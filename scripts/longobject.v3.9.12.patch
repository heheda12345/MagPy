diff --git a/Objects/longobject.c b/Objects/longobject.c
index cf13b2c430..396ad09ec6 100644
--- a/Objects/longobject.c
+++ b/Objects/longobject.c
@@ -17,8 +17,8 @@ class int "PyObject *" "&PyLong_Type"
 [clinic start generated code]*/
 /*[clinic end generated code: output=da39a3ee5e6b4b0d input=ec0275e3422a36e3]*/
 
-#define NSMALLPOSINTS           _PY_NSMALLPOSINTS
-#define NSMALLNEGINTS           _PY_NSMALLNEGINTS
+#define NSMALLPOSINTS           0
+#define NSMALLNEGINTS           0
 
 _Py_IDENTIFIER(little);
 _Py_IDENTIFIER(big);
@@ -29,9 +29,6 @@ _Py_IDENTIFIER(big);
              (Py_SIZE(x) == 0 ? (sdigit)0 :                             \
               (sdigit)(x)->ob_digit[0]))
 
-PyObject *_PyLong_Zero = NULL;
-PyObject *_PyLong_One = NULL;
-
 #if NSMALLNEGINTS + NSMALLPOSINTS > 0
 #define IS_SMALL_INT(ival) (-NSMALLNEGINTS <= (ival) && (ival) < NSMALLPOSINTS)
 #define IS_SMALL_UINT(ival) ((ival) < NSMALLPOSINTS)
@@ -5712,99 +5709,6 @@ PyTypeObject PyLong_Type = {
     PyObject_Del,                               /* tp_free */
 };
 
-static PyTypeObject Int_InfoType;
-
-PyDoc_STRVAR(int_info__doc__,
-"sys.int_info\n\
-\n\
-A named tuple that holds information about Python's\n\
-internal representation of integers.  The attributes are read only.");
-
-static PyStructSequence_Field int_info_fields[] = {
-    {"bits_per_digit", "size of a digit in bits"},
-    {"sizeof_digit", "size in bytes of the C type used to represent a digit"},
-    {NULL, NULL}
-};
-
-static PyStructSequence_Desc int_info_desc = {
-    "sys.int_info",   /* name */
-    int_info__doc__,  /* doc */
-    int_info_fields,  /* fields */
-    2                 /* number of fields */
-};
-
-PyObject *
-PyLong_GetInfo(void)
-{
-    PyObject* int_info;
-    int field = 0;
-    int_info = PyStructSequence_New(&Int_InfoType);
-    if (int_info == NULL)
-        return NULL;
-    PyStructSequence_SET_ITEM(int_info, field++,
-                              PyLong_FromLong(PyLong_SHIFT));
-    PyStructSequence_SET_ITEM(int_info, field++,
-                              PyLong_FromLong(sizeof(digit)));
-    if (PyErr_Occurred()) {
-        Py_CLEAR(int_info);
-        return NULL;
-    }
-    return int_info;
-}
-
-int
-_PyLong_Init(PyThreadState *tstate)
-{
-#if NSMALLNEGINTS + NSMALLPOSINTS > 0
-    for (Py_ssize_t i=0; i < NSMALLNEGINTS + NSMALLPOSINTS; i++) {
-        sdigit ival = (sdigit)i - NSMALLNEGINTS;
-        int size = (ival < 0) ? -1 : ((ival == 0) ? 0 : 1);
-
-        PyLongObject *v = _PyLong_New(1);
-        if (!v) {
-            return -1;
-        }
-
-        Py_SET_SIZE(v, size);
-        v->ob_digit[0] = (digit)abs(ival);
-
-        tstate->interp->small_ints[i] = v;
-    }
-#endif
-
-    if (_Py_IsMainInterpreter(tstate)) {
-        _PyLong_Zero = PyLong_FromLong(0);
-        if (_PyLong_Zero == NULL) {
-            return 0;
-        }
-
-        _PyLong_One = PyLong_FromLong(1);
-        if (_PyLong_One == NULL) {
-            return 0;
-        }
-
-        /* initialize int_info */
-        if (Int_InfoType.tp_name == NULL) {
-            if (PyStructSequence_InitType2(&Int_InfoType, &int_info_desc) < 0) {
-                return 0;
-            }
-        }
-    }
-
-    return 1;
-}
-
-void
-_PyLong_Fini(PyThreadState *tstate)
-{
-    if (_Py_IsMainInterpreter(tstate)) {
-        Py_CLEAR(_PyLong_One);
-        Py_CLEAR(_PyLong_Zero);
-    }
-
-#if NSMALLNEGINTS + NSMALLPOSINTS > 0
-    for (Py_ssize_t i = 0; i < NSMALLNEGINTS + NSMALLPOSINTS; i++) {
-        Py_CLEAR(tstate->interp->small_ints[i]);
-    }
-#endif
-}
+PyTypeObject get_PyLong_Type()  {
+    return PyLong_Type;
+}
\ No newline at end of file
