preprocess frame /home/drc/frontend/test/simple.py 0 0x65459d0 forward
0: [33mLOAD_FAST[0m(3, decoder_input_ids) 
1: [33mLOAD_CONST[0m(0, None) 
2: [33mIS_OP[0m(0, 0) 
3: [33mPOP_JUMP_IF_FALSE[0m(52, 52)  -> inst 26
4: [33mLOAD_FAST[0m(11, decoder_inputs_embeds) 
5: [33mLOAD_CONST[0m(0, None) 
6: [33mIS_OP[0m(0, 0) 
7: [33mPOP_JUMP_IF_FALSE[0m(52, 52)  -> inst 26
8: [33mLOAD_FAST[0m(1, input_ids) 
9: [33mLOAD_CONST[0m(0, None) 
10: [33mIS_OP[0m(0, 0) 
11: [33mPOP_JUMP_IF_FALSE[0m(32, 32)  -> inst 16
12: [33mLOAD_GLOBAL[0m(0, ValueError) 
13: [33mLOAD_CONST[0m(1, If no `decoder_input_ids` or `decoder_inputs_embeds` are passed, `input_ids` cannot be `None`. Please pass either `input_ids` or `decoder_input_ids` or `decoder_inputs_embeds`.) 
14: [33mCALL_FUNCTION[0m(1, 1) 
15: [33mRAISE_VARARGS[0m(1, 1) 
16: [33mLOAD_GLOBAL[0m(1, shift_tokens_right) 
17: [33mLOAD_FAST[0m(1, input_ids) 
18: [33mLOAD_FAST[0m(0, self) 
19: [33mLOAD_ATTR[0m(2, config) 
20: [33mLOAD_ATTR[0m(3, pad_token_id) 
21: [33mLOAD_FAST[0m(0, self) 
22: [33mLOAD_ATTR[0m(2, config) 
23: [33mLOAD_ATTR[0m(4, decoder_start_token_id) 
24: [33mCALL_FUNCTION[0m(3, 3) 
25: [33mSTORE_FAST[0m(3, decoder_input_ids) 
26: [33mLOAD_FAST[0m(13, output_attentions) 
27: [33mLOAD_CONST[0m(0, None) 
28: [33mIS_OP[0m(1, 1) 
29: [33mPOP_JUMP_IF_FALSE[0m(64, 64)  -> inst 32
30: [33mLOAD_FAST[0m(13, output_attentions) 
31: [33mJUMP_FORWARD[0m(6, 70)  -> inst 35
32: [33mLOAD_FAST[0m(0, self) 
33: [33mLOAD_ATTR[0m(2, config) 
34: [33mLOAD_ATTR[0m(5, output_attentions) 
35: [33mSTORE_FAST[0m(13, output_attentions) 
36: [33mLOAD_FAST[0m(14, output_hidden_states) 
37: [33mLOAD_CONST[0m(0, None) 
38: [33mIS_OP[0m(1, 1) 
39: [33mPOP_JUMP_IF_FALSE[0m(84, 84)  -> inst 42
40: [33mLOAD_FAST[0m(14, output_hidden_states) 
41: [33mJUMP_FORWARD[0m(6, 90)  -> inst 45
42: [33mLOAD_FAST[0m(0, self) 
43: [33mLOAD_ATTR[0m(2, config) 
44: [33mLOAD_ATTR[0m(6, output_hidden_states) 
45: [33mSTORE_FAST[0m(14, output_hidden_states) 
46: [33mLOAD_FAST[0m(12, use_cache) 
47: [33mLOAD_CONST[0m(0, None) 
48: [33mIS_OP[0m(1, 1) 
49: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
50: [33mLOAD_FAST[0m(12, use_cache) 
51: [33mJUMP_FORWARD[0m(6, 110)  -> inst 55
52: [33mLOAD_FAST[0m(0, self) 
53: [33mLOAD_ATTR[0m(2, config) 
54: [33mLOAD_ATTR[0m(7, use_cache) 
55: [33mSTORE_FAST[0m(12, use_cache) 
56: [33mLOAD_FAST[0m(15, return_dict) 
57: [33mLOAD_CONST[0m(0, None) 
58: [33mIS_OP[0m(1, 1) 
59: [33mPOP_JUMP_IF_FALSE[0m(124, 124)  -> inst 62
60: [33mLOAD_FAST[0m(15, return_dict) 
61: [33mJUMP_FORWARD[0m(6, 130)  -> inst 65
62: [33mLOAD_FAST[0m(0, self) 
63: [33mLOAD_ATTR[0m(2, config) 
64: [33mLOAD_ATTR[0m(8, use_return_dict) 
65: [33mSTORE_FAST[0m(15, return_dict) 
66: [33mLOAD_FAST[0m(8, encoder_outputs) 
67: [33mLOAD_CONST[0m(0, None) 
68: [33mIS_OP[0m(0, 0) 
69: [33mPOP_JUMP_IF_FALSE[0m(166, 166)  -> inst 83
70: [33mLOAD_FAST[0m(0, self) 
71: [33mLOAD_ATTR[0m(9, encoder) 
72: [33mLOAD_FAST[0m(1, input_ids) 
73: [33mLOAD_FAST[0m(2, attention_mask) 
74: [33mLOAD_FAST[0m(5, head_mask) 
75: [33mLOAD_FAST[0m(10, inputs_embeds) 
76: [33mLOAD_FAST[0m(13, output_attentions) 
77: [33mLOAD_FAST[0m(14, output_hidden_states) 
78: [33mLOAD_FAST[0m(15, return_dict) 
79: [33mLOAD_CONST[0m(2, ('input_ids', 'attention_mask', 'head_mask', 'inputs_embeds', 'output_attentions', 'output_hidden_states', 'return_dict')) 
80: [33mCALL_FUNCTION_KW[0m(7, 7) 
81: [33mSTORE_FAST[0m(8, encoder_outputs) 
82: [33mJUMP_FORWARD[0m(72, 238)  -> inst 119
83: [33mLOAD_FAST[0m(15, return_dict) 
84: [33mPOP_JUMP_IF_FALSE[0m(238, 238)  -> inst 119
85: [33mLOAD_GLOBAL[0m(10, isinstance) 
86: [33mLOAD_FAST[0m(8, encoder_outputs) 
87: [33mLOAD_GLOBAL[0m(11, BaseModelOutput) 
88: [33mCALL_FUNCTION[0m(2, 2) 
89: [33mPOP_JUMP_IF_TRUE[0m(238, 238)  -> inst 119
90: [33mLOAD_GLOBAL[0m(11, BaseModelOutput) 
91: [33mLOAD_FAST[0m(8, encoder_outputs) 
92: [33mLOAD_CONST[0m(3, 0) 
93: [33mBINARY_SUBSCR[0m(None, None) 
94: [33mLOAD_GLOBAL[0m(12, len) 
95: [33mLOAD_FAST[0m(8, encoder_outputs) 
96: [33mCALL_FUNCTION[0m(1, 1) 
97: [33mLOAD_CONST[0m(4, 1) 
98: [33mCOMPARE_OP[0m(4, >) 
99: [33mPOP_JUMP_IF_FALSE[0m(208, 208)  -> inst 104
100: [33mLOAD_FAST[0m(8, encoder_outputs) 
101: [33mLOAD_CONST[0m(4, 1) 
102: [33mBINARY_SUBSCR[0m(None, None) 
103: [33mJUMP_FORWARD[0m(2, 210)  -> inst 105
104: [33mLOAD_CONST[0m(0, None) 
105: [33mLOAD_GLOBAL[0m(12, len) 
106: [33mLOAD_FAST[0m(8, encoder_outputs) 
107: [33mCALL_FUNCTION[0m(1, 1) 
108: [33mLOAD_CONST[0m(5, 2) 
109: [33mCOMPARE_OP[0m(4, >) 
110: [33mPOP_JUMP_IF_FALSE[0m(230, 230)  -> inst 115
111: [33mLOAD_FAST[0m(8, encoder_outputs) 
112: [33mLOAD_CONST[0m(5, 2) 
113: [33mBINARY_SUBSCR[0m(None, None) 
114: [33mJUMP_FORWARD[0m(2, 232)  -> inst 116
115: [33mLOAD_CONST[0m(0, None) 
116: [33mLOAD_CONST[0m(6, ('last_hidden_state', 'hidden_states', 'attentions')) 
117: [33mCALL_FUNCTION_KW[0m(3, 3) 
118: [33mSTORE_FAST[0m(8, encoder_outputs) 
119: [33mLOAD_FAST[0m(0, self) 
120: [33mLOAD_ATTR[0m(13, decoder) 
121: [33mLOAD_FAST[0m(3, decoder_input_ids) 
122: [33mLOAD_FAST[0m(4, decoder_attention_mask) 
123: [33mLOAD_FAST[0m(8, encoder_outputs) 
124: [33mLOAD_CONST[0m(3, 0) 
125: [33mBINARY_SUBSCR[0m(None, None) 
126: [33mLOAD_FAST[0m(2, attention_mask) 
127: [33mLOAD_FAST[0m(6, decoder_head_mask) 
128: [33mLOAD_FAST[0m(7, cross_attn_head_mask) 
129: [33mLOAD_FAST[0m(9, past_key_values) 
130: [33mLOAD_FAST[0m(11, decoder_inputs_embeds) 
131: [33mLOAD_FAST[0m(12, use_cache) 
132: [33mLOAD_FAST[0m(13, output_attentions) 
133: [33mLOAD_FAST[0m(14, output_hidden_states) 
134: [33mLOAD_FAST[0m(15, return_dict) 
135: [33mLOAD_CONST[0m(7, ('input_ids', 'attention_mask', 'encoder_hidden_states', 'encoder_attention_mask', 'head_mask', 'cross_attn_head_mask', 'past_key_values', 'inputs_embeds', 'use_cache', 'output_attentions', 'output_hidden_states', 'return_dict')) 
136: [33mCALL_FUNCTION_KW[0m(12, 12) 
137: [33mSTORE_FAST[0m(16, decoder_outputs) 
138: [33mLOAD_FAST[0m(15, return_dict) 
139: [33mEXTENDED_ARG[0m(1, 1) 
140: [33mPOP_JUMP_IF_TRUE[0m(290, 290)  -> inst 145
141: [33mLOAD_FAST[0m(16, decoder_outputs) 
142: [33mLOAD_FAST[0m(8, encoder_outputs) 
143: [33mBINARY_ADD[0m(None, None) 
144: [33mRETURN_VALUE[0m(None, None) 
145: [33mLOAD_GLOBAL[0m(14, Seq2SeqModelOutput) 
146: [33mLOAD_FAST[0m(16, decoder_outputs) 
147: [33mLOAD_ATTR[0m(15, last_hidden_state) 
148: [33mLOAD_FAST[0m(16, decoder_outputs) 
149: [33mLOAD_ATTR[0m(16, past_key_values) 
150: [33mLOAD_FAST[0m(16, decoder_outputs) 
151: [33mLOAD_ATTR[0m(17, hidden_states) 
152: [33mLOAD_FAST[0m(16, decoder_outputs) 
153: [33mLOAD_ATTR[0m(18, attentions) 
154: [33mLOAD_FAST[0m(16, decoder_outputs) 
155: [33mLOAD_ATTR[0m(19, cross_attentions) 
156: [33mLOAD_FAST[0m(8, encoder_outputs) 
157: [33mLOAD_ATTR[0m(15, last_hidden_state) 
158: [33mLOAD_FAST[0m(8, encoder_outputs) 
159: [33mLOAD_ATTR[0m(17, hidden_states) 
160: [33mLOAD_FAST[0m(8, encoder_outputs) 
161: [33mLOAD_ATTR[0m(18, attentions) 
162: [33mLOAD_CONST[0m(8, ('last_hidden_state', 'past_key_values', 'decoder_hidden_states', 'decoder_attentions', 'cross_attentions', 'encoder_last_hidden_state', 'encoder_hidden_states', 'encoder_attentions')) 
163: [33mCALL_FUNCTION_KW[0m(8, 8) 
164: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('last_hidden_state', 'past_key_values', 'decoder_hidden_states', 'decoder_attentions', 'cross_attentions', 'encoder_last_hidden_state', 'encoder_hidden_states', 'encoder_attentions')), (<class 'int'>, 2), (<class 'int'>, 1), (<class 'str'>, 'If no `decoder_input_ids` or `decoder_inputs_embeds` are passed, `input_ids` cannot be `None`. Please pass either `input_ids` or `decoder_input_ids` or `decoder_inputs_embeds`.'), (<class 'int'>, 0), (<class 'tuple'>, ('last_hidden_state', 'hidden_states', 'attentions')), (<class 'NoneType'>, None), (<class 'tuple'>, ('input_ids', 'attention_mask', 'encoder_hidden_states', 'encoder_attention_mask', 'head_mask', 'cross_attn_head_mask', 'past_key_values', 'inputs_embeds', 'use_cache', 'output_attentions', 'output_hidden_states', 'return_dict')), (<class 'tuple'>, ('input_ids', 'attention_mask', 'head_mask', 'inputs_embeds', 'output_attentions', 'output_hidden_states', 'return_dict'))]
guarded code
0: [32mEXTENDED_ARG[0m(1, 1) 
1: [32mJUMP_ABSOLUTE[0m(338, 338)  -> inst 169
2: [33mLOAD_FAST[0m(3, decoder_input_ids) 
3: [33mLOAD_CONST[0m(6, None) 
4: [33mIS_OP[0m(0, 0) 
5: [33mPOP_JUMP_IF_FALSE[0m(56, 56)  -> inst 28
6: [33mLOAD_FAST[0m(11, decoder_inputs_embeds) 
7: [33mLOAD_CONST[0m(6, None) 
8: [33mIS_OP[0m(0, 0) 
9: [33mPOP_JUMP_IF_FALSE[0m(56, 56)  -> inst 28
10: [33mLOAD_FAST[0m(1, input_ids) 
11: [33mLOAD_CONST[0m(6, None) 
12: [33mIS_OP[0m(0, 0) 
13: [33mPOP_JUMP_IF_FALSE[0m(36, 36)  -> inst 18
14: [33mLOAD_GLOBAL[0m(0, ValueError) 
15: [33mLOAD_CONST[0m(3, If no `decoder_input_ids` or `decoder_inputs_embeds` are passed, `input_ids` cannot be `None`. Please pass either `input_ids` or `decoder_input_ids` or `decoder_inputs_embeds`.) 
16: [33mCALL_FUNCTION[0m(1, 1) 
17: [33mRAISE_VARARGS[0m(1, 1) 
18: [33mLOAD_GLOBAL[0m(1, shift_tokens_right) 
19: [33mLOAD_FAST[0m(1, input_ids) 
20: [33mLOAD_FAST[0m(0, self) 
21: [33mLOAD_ATTR[0m(2, config) 
22: [33mLOAD_ATTR[0m(3, pad_token_id) 
23: [33mLOAD_FAST[0m(0, self) 
24: [33mLOAD_ATTR[0m(2, config) 
25: [33mLOAD_ATTR[0m(4, decoder_start_token_id) 
26: [33mCALL_FUNCTION[0m(3, 3) 
27: [33mSTORE_FAST[0m(3, decoder_input_ids) 
28: [33mLOAD_FAST[0m(13, output_attentions) 
29: [33mLOAD_CONST[0m(6, None) 
30: [33mIS_OP[0m(1, 1) 
31: [33mPOP_JUMP_IF_FALSE[0m(68, 68)  -> inst 34
32: [33mLOAD_FAST[0m(13, output_attentions) 
33: [33mJUMP_FORWARD[0m(6, 74)  -> inst 37
34: [33mLOAD_FAST[0m(0, self) 
35: [33mLOAD_ATTR[0m(2, config) 
36: [33mLOAD_ATTR[0m(5, output_attentions) 
37: [33mSTORE_FAST[0m(13, output_attentions) 
38: [33mLOAD_FAST[0m(14, output_hidden_states) 
39: [33mLOAD_CONST[0m(6, None) 
40: [33mIS_OP[0m(1, 1) 
41: [33mPOP_JUMP_IF_FALSE[0m(88, 88)  -> inst 44
42: [33mLOAD_FAST[0m(14, output_hidden_states) 
43: [33mJUMP_FORWARD[0m(6, 94)  -> inst 47
44: [33mLOAD_FAST[0m(0, self) 
45: [33mLOAD_ATTR[0m(2, config) 
46: [33mLOAD_ATTR[0m(6, output_hidden_states) 
47: [33mSTORE_FAST[0m(14, output_hidden_states) 
48: [33mLOAD_FAST[0m(12, use_cache) 
49: [33mLOAD_CONST[0m(6, None) 
50: [33mIS_OP[0m(1, 1) 
51: [33mPOP_JUMP_IF_FALSE[0m(108, 108)  -> inst 54
52: [33mLOAD_FAST[0m(12, use_cache) 
53: [33mJUMP_FORWARD[0m(6, 114)  -> inst 57
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_ATTR[0m(2, config) 
56: [33mLOAD_ATTR[0m(7, use_cache) 
57: [33mSTORE_FAST[0m(12, use_cache) 
58: [33mLOAD_FAST[0m(15, return_dict) 
59: [33mLOAD_CONST[0m(6, None) 
60: [33mIS_OP[0m(1, 1) 
61: [33mPOP_JUMP_IF_FALSE[0m(128, 128)  -> inst 64
62: [33mLOAD_FAST[0m(15, return_dict) 
63: [33mJUMP_FORWARD[0m(6, 134)  -> inst 67
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_ATTR[0m(2, config) 
66: [33mLOAD_ATTR[0m(8, use_return_dict) 
67: [33mSTORE_FAST[0m(15, return_dict) 
68: [33mLOAD_FAST[0m(8, encoder_outputs) 
69: [33mLOAD_CONST[0m(6, None) 
70: [33mIS_OP[0m(0, 0) 
71: [33mPOP_JUMP_IF_FALSE[0m(170, 170)  -> inst 85
72: [33mLOAD_FAST[0m(0, self) 
73: [33mLOAD_ATTR[0m(9, encoder) 
74: [33mLOAD_FAST[0m(1, input_ids) 
75: [33mLOAD_FAST[0m(2, attention_mask) 
76: [33mLOAD_FAST[0m(5, head_mask) 
77: [33mLOAD_FAST[0m(10, inputs_embeds) 
78: [33mLOAD_FAST[0m(13, output_attentions) 
79: [33mLOAD_FAST[0m(14, output_hidden_states) 
80: [33mLOAD_FAST[0m(15, return_dict) 
81: [33mLOAD_CONST[0m(8, ('input_ids', 'attention_mask', 'head_mask', 'inputs_embeds', 'output_attentions', 'output_hidden_states', 'return_dict')) 
82: [33mCALL_FUNCTION_KW[0m(7, 7) 
83: [33mSTORE_FAST[0m(8, encoder_outputs) 
84: [33mJUMP_FORWARD[0m(72, 242)  -> inst 121
85: [33mLOAD_FAST[0m(15, return_dict) 
86: [33mPOP_JUMP_IF_FALSE[0m(242, 242)  -> inst 121
87: [33mLOAD_GLOBAL[0m(10, isinstance) 
88: [33mLOAD_FAST[0m(8, encoder_outputs) 
89: [33mLOAD_GLOBAL[0m(11, BaseModelOutput) 
90: [33mCALL_FUNCTION[0m(2, 2) 
91: [33mPOP_JUMP_IF_TRUE[0m(242, 242)  -> inst 121
92: [33mLOAD_GLOBAL[0m(11, BaseModelOutput) 
93: [33mLOAD_FAST[0m(8, encoder_outputs) 
94: [33mLOAD_CONST[0m(4, 0) 
95: [33mBINARY_SUBSCR[0m(None, None) 
96: [33mLOAD_GLOBAL[0m(12, len) 
97: [33mLOAD_FAST[0m(8, encoder_outputs) 
98: [33mCALL_FUNCTION[0m(1, 1) 
99: [33mLOAD_CONST[0m(2, 1) 
100: [33mCOMPARE_OP[0m(4, >) 
101: [33mPOP_JUMP_IF_FALSE[0m(212, 212)  -> inst 106
102: [33mLOAD_FAST[0m(8, encoder_outputs) 
103: [33mLOAD_CONST[0m(2, 1) 
104: [33mBINARY_SUBSCR[0m(None, None) 
105: [33mJUMP_FORWARD[0m(2, 214)  -> inst 107
106: [33mLOAD_CONST[0m(6, None) 
107: [33mLOAD_GLOBAL[0m(12, len) 
108: [33mLOAD_FAST[0m(8, encoder_outputs) 
109: [33mCALL_FUNCTION[0m(1, 1) 
110: [33mLOAD_CONST[0m(1, 2) 
111: [33mCOMPARE_OP[0m(4, >) 
112: [33mPOP_JUMP_IF_FALSE[0m(234, 234)  -> inst 117
113: [33mLOAD_FAST[0m(8, encoder_outputs) 
114: [33mLOAD_CONST[0m(1, 2) 
115: [33mBINARY_SUBSCR[0m(None, None) 
116: [33mJUMP_FORWARD[0m(2, 236)  -> inst 118
117: [33mLOAD_CONST[0m(6, None) 
118: [33mLOAD_CONST[0m(5, ('last_hidden_state', 'hidden_states', 'attentions')) 
119: [33mCALL_FUNCTION_KW[0m(3, 3) 
120: [33mSTORE_FAST[0m(8, encoder_outputs) 
121: [33mLOAD_FAST[0m(0, self) 
122: [33mLOAD_ATTR[0m(13, decoder) 
123: [33mLOAD_FAST[0m(3, decoder_input_ids) 
124: [33mLOAD_FAST[0m(4, decoder_attention_mask) 
125: [33mLOAD_FAST[0m(8, encoder_outputs) 
126: [33mLOAD_CONST[0m(4, 0) 
127: [33mBINARY_SUBSCR[0m(None, None) 
128: [33mLOAD_FAST[0m(2, attention_mask) 
129: [33mLOAD_FAST[0m(6, decoder_head_mask) 
130: [33mLOAD_FAST[0m(7, cross_attn_head_mask) 
131: [33mLOAD_FAST[0m(9, past_key_values) 
132: [33mLOAD_FAST[0m(11, decoder_inputs_embeds) 
133: [33mLOAD_FAST[0m(12, use_cache) 
134: [33mLOAD_FAST[0m(13, output_attentions) 
135: [33mLOAD_FAST[0m(14, output_hidden_states) 
136: [33mLOAD_FAST[0m(15, return_dict) 
137: [33mLOAD_CONST[0m(7, ('input_ids', 'attention_mask', 'encoder_hidden_states', 'encoder_attention_mask', 'head_mask', 'cross_attn_head_mask', 'past_key_values', 'inputs_embeds', 'use_cache', 'output_attentions', 'output_hidden_states', 'return_dict')) 
138: [33mCALL_FUNCTION_KW[0m(12, 12) 
139: [33mSTORE_FAST[0m(16, decoder_outputs) 
140: [33mLOAD_FAST[0m(15, return_dict) 
141: [32mEXTENDED_ARG[0m(1, 1) 
142: [33mPOP_JUMP_IF_TRUE[0m(296, 296)  -> inst 148
143: [33mLOAD_FAST[0m(16, decoder_outputs) 
144: [33mLOAD_FAST[0m(8, encoder_outputs) 
145: [33mBINARY_ADD[0m(None, None) 
146: [32mEXTENDED_ARG[0m(1, 1) 
147: [32mJUMP_ABSOLUTE[0m(366, 366)  -> inst 183
148: [33mLOAD_GLOBAL[0m(14, Seq2SeqModelOutput) 
149: [33mLOAD_FAST[0m(16, decoder_outputs) 
150: [33mLOAD_ATTR[0m(15, last_hidden_state) 
151: [33mLOAD_FAST[0m(16, decoder_outputs) 
152: [33mLOAD_ATTR[0m(16, past_key_values) 
153: [33mLOAD_FAST[0m(16, decoder_outputs) 
154: [33mLOAD_ATTR[0m(17, hidden_states) 
155: [33mLOAD_FAST[0m(16, decoder_outputs) 
156: [33mLOAD_ATTR[0m(18, attentions) 
157: [33mLOAD_FAST[0m(16, decoder_outputs) 
158: [33mLOAD_ATTR[0m(19, cross_attentions) 
159: [33mLOAD_FAST[0m(8, encoder_outputs) 
160: [33mLOAD_ATTR[0m(15, last_hidden_state) 
161: [33mLOAD_FAST[0m(8, encoder_outputs) 
162: [33mLOAD_ATTR[0m(17, hidden_states) 
163: [33mLOAD_FAST[0m(8, encoder_outputs) 
164: [33mLOAD_ATTR[0m(18, attentions) 
165: [33mLOAD_CONST[0m(0, ('last_hidden_state', 'past_key_values', 'decoder_hidden_states', 'decoder_attentions', 'cross_attentions', 'encoder_last_hidden_state', 'encoder_hidden_states', 'encoder_attentions')) 
166: [33mCALL_FUNCTION_KW[0m(8, 8) 
167: [32mEXTENDED_ARG[0m(1, 1) 
168: [32mJUMP_ABSOLUTE[0m(366, 366)  -> inst 183
169: [32mLOAD_GLOBAL[0m(21, guard_match) 
170: [32mLOAD_CONST[0m(4, 0) 
171: [32mLOAD_CONST[0m(4, 0) 
172: [32mLOAD_GLOBAL[0m(20, locals) 
173: [32mCALL_FUNCTION[0m(0, 0) 
174: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
175: [32mUNPACK_SEQUENCE[0m(2, 2) 
176: [32mSTORE_FAST[0m(18, __case_idx) 
177: [32mSTORE_FAST[0m(17, __graph_fn) 
178: [32mLOAD_GLOBAL[0m(22, enable_trace) 
179: [32mLOAD_CONST[0m(4, 0) 
180: [32mCALL_FUNCTION[0m(1, 1) 
181: [32mPOP_TOP[0m(None, None) 
182: [32mJUMP_ABSOLUTE[0m(4, 4)  -> inst 2
183: [32mLOAD_GLOBAL[0m(24, disable_trace) 
184: [32mLOAD_CONST[0m(4, 0) 
185: [32mCALL_FUNCTION[0m(1, 1) 
186: [32mPOP_TOP[0m(None, None) 
187: [32mRETURN_VALUE[0m(None, None) 

enable_trace
push tracker 0 frame 0x686ff00 frame_id 0 read_stack False cf_info <class 'NoneType'> all [0]
tracing opcode POP_TOP None pc=362 frame=0(0x686ff00)
process last instruction done
restart: running injected code (f_lasti=362)
tracing opcode JUMP_ABSOLUTE None pc=364 frame=0(0x686ff00)
process last instruction done
restart: running injected code (f_lasti=364)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=4 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_CONST None pc=6 frame=0(0x686ff00)
process last instruction done
tracing opcode IS_OP None pc=8 frame=0(0x686ff00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=10 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_FAST None pc=12 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=0(0x686ff00)
process last instruction done
tracing opcode IS_OP None pc=16 frame=0(0x686ff00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=18 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_CONST None pc=22 frame=0(0x686ff00)
process last instruction done
tracing opcode IS_OP None pc=24 frame=0(0x686ff00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=26 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=36 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=38 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_FAST None pc=40 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=42 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=0(0x686ff00)
generate any for BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}
 <class 'transformers.models.bart.configuration_bart.BartConfig'> [locals['self'].config]
enumate value come here BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}

process last instruction done
tracing opcode LOAD_FAST None pc=46 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=48 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=50 frame=0(0x686ff00)
generate any for BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}
 <class 'transformers.models.bart.configuration_bart.BartConfig'> [locals['self'].config]
enumate value come here BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}

process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode CALL_FUNCTION None pc=52 frame=0(0x686ff00)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 1 0x6815a20 shift_tokens_right
0: [33mLOAD_FAST[0m(0, input_ids) 
1: [33mLOAD_METHOD[0m(0, new_zeros) 
2: [33mLOAD_FAST[0m(0, input_ids) 
3: [33mLOAD_ATTR[0m(1, shape) 
4: [33mCALL_METHOD[0m(1, 1) 
5: [33mSTORE_FAST[0m(3, shifted_input_ids) 
6: [33mLOAD_FAST[0m(0, input_ids) 
7: [33mLOAD_CONST[0m(1, None) 
8: [33mLOAD_CONST[0m(1, None) 
9: [33mBUILD_SLICE[0m(2, 2) 
10: [33mLOAD_CONST[0m(1, None) 
11: [33mLOAD_CONST[0m(2, -1) 
12: [33mBUILD_SLICE[0m(2, 2) 
13: [33mBUILD_TUPLE[0m(2, 2) 
14: [33mBINARY_SUBSCR[0m(None, None) 
15: [33mLOAD_METHOD[0m(2, clone) 
16: [33mCALL_METHOD[0m(0, 0) 
17: [33mLOAD_FAST[0m(3, shifted_input_ids) 
18: [33mLOAD_CONST[0m(1, None) 
19: [33mLOAD_CONST[0m(1, None) 
20: [33mBUILD_SLICE[0m(2, 2) 
21: [33mLOAD_CONST[0m(3, 1) 
22: [33mLOAD_CONST[0m(1, None) 
23: [33mBUILD_SLICE[0m(2, 2) 
24: [33mBUILD_TUPLE[0m(2, 2) 
25: [33mSTORE_SUBSCR[0m(None, None) 
26: [33mLOAD_FAST[0m(2, decoder_start_token_id) 
27: [33mLOAD_FAST[0m(3, shifted_input_ids) 
28: [33mLOAD_CONST[0m(1, None) 
29: [33mLOAD_CONST[0m(1, None) 
30: [33mBUILD_SLICE[0m(2, 2) 
31: [33mLOAD_CONST[0m(4, 0) 
32: [33mBUILD_TUPLE[0m(2, 2) 
33: [33mSTORE_SUBSCR[0m(None, None) 
34: [33mLOAD_FAST[0m(1, pad_token_id) 
35: [33mLOAD_CONST[0m(1, None) 
36: [33mIS_OP[0m(0, 0) 
37: [33mPOP_JUMP_IF_FALSE[0m(84, 84)  -> inst 42
38: [33mLOAD_GLOBAL[0m(3, ValueError) 
39: [33mLOAD_CONST[0m(5, self.model.config.pad_token_id has to be defined.) 
40: [33mCALL_FUNCTION[0m(1, 1) 
41: [33mRAISE_VARARGS[0m(1, 1) 
42: [33mLOAD_FAST[0m(3, shifted_input_ids) 
43: [33mLOAD_METHOD[0m(4, masked_fill_) 
44: [33mLOAD_FAST[0m(3, shifted_input_ids) 
45: [33mLOAD_CONST[0m(6, -100) 
46: [33mCOMPARE_OP[0m(2, ==) 
47: [33mLOAD_FAST[0m(1, pad_token_id) 
48: [33mCALL_METHOD[0m(2, 2) 
49: [33mPOP_TOP[0m(None, None) 
50: [33mLOAD_FAST[0m(3, shifted_input_ids) 
51: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, -1), (<class 'str'>, 'self.model.config.pad_token_id has to be defined.'), (<class 'int'>, 1), (<class 'str'>, '\n    Shift input ids one token to the right.\n    '), (<class 'int'>, 0), (<class 'NoneType'>, None), (<class 'int'>, -100)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(2, 1) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(114, 114)  -> inst 57
5: [33mLOAD_FAST[0m(0, input_ids) 
6: [33mLOAD_METHOD[0m(0, new_zeros) 
7: [33mLOAD_FAST[0m(0, input_ids) 
8: [33mLOAD_ATTR[0m(1, shape) 
9: [33mCALL_METHOD[0m(1, 1) 
10: [33mSTORE_FAST[0m(3, shifted_input_ids) 
11: [33mLOAD_FAST[0m(0, input_ids) 
12: [33mLOAD_CONST[0m(5, None) 
13: [33mLOAD_CONST[0m(5, None) 
14: [33mBUILD_SLICE[0m(2, 2) 
15: [33mLOAD_CONST[0m(5, None) 
16: [33mLOAD_CONST[0m(0, -1) 
17: [33mBUILD_SLICE[0m(2, 2) 
18: [33mBUILD_TUPLE[0m(2, 2) 
19: [33mBINARY_SUBSCR[0m(None, None) 
20: [33mLOAD_METHOD[0m(2, clone) 
21: [33mCALL_METHOD[0m(0, 0) 
22: [33mLOAD_FAST[0m(3, shifted_input_ids) 
23: [33mLOAD_CONST[0m(5, None) 
24: [33mLOAD_CONST[0m(5, None) 
25: [33mBUILD_SLICE[0m(2, 2) 
26: [33mLOAD_CONST[0m(2, 1) 
27: [33mLOAD_CONST[0m(5, None) 
28: [33mBUILD_SLICE[0m(2, 2) 
29: [33mBUILD_TUPLE[0m(2, 2) 
30: [33mSTORE_SUBSCR[0m(None, None) 
31: [33mLOAD_FAST[0m(2, decoder_start_token_id) 
32: [33mLOAD_FAST[0m(3, shifted_input_ids) 
33: [33mLOAD_CONST[0m(5, None) 
34: [33mLOAD_CONST[0m(5, None) 
35: [33mBUILD_SLICE[0m(2, 2) 
36: [33mLOAD_CONST[0m(4, 0) 
37: [33mBUILD_TUPLE[0m(2, 2) 
38: [33mSTORE_SUBSCR[0m(None, None) 
39: [33mLOAD_FAST[0m(1, pad_token_id) 
40: [33mLOAD_CONST[0m(5, None) 
41: [33mIS_OP[0m(0, 0) 
42: [33mPOP_JUMP_IF_FALSE[0m(94, 94)  -> inst 47
43: [33mLOAD_GLOBAL[0m(3, ValueError) 
44: [33mLOAD_CONST[0m(1, self.model.config.pad_token_id has to be defined.) 
45: [33mCALL_FUNCTION[0m(1, 1) 
46: [33mRAISE_VARARGS[0m(1, 1) 
47: [33mLOAD_FAST[0m(3, shifted_input_ids) 
48: [33mLOAD_METHOD[0m(4, masked_fill_) 
49: [33mLOAD_FAST[0m(3, shifted_input_ids) 
50: [33mLOAD_CONST[0m(6, -100) 
51: [33mCOMPARE_OP[0m(2, ==) 
52: [33mLOAD_FAST[0m(1, pad_token_id) 
53: [33mCALL_METHOD[0m(2, 2) 
54: [33mPOP_TOP[0m(None, None) 
55: [33mLOAD_FAST[0m(3, shifted_input_ids) 
56: [32mJUMP_ABSOLUTE[0m(142, 142)  -> inst 71
57: [32mLOAD_GLOBAL[0m(6, guard_match) 
58: [32mLOAD_CONST[0m(2, 1) 
59: [32mLOAD_CONST[0m(4, 0) 
60: [32mLOAD_GLOBAL[0m(5, locals) 
61: [32mCALL_FUNCTION[0m(0, 0) 
62: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
63: [32mUNPACK_SEQUENCE[0m(2, 2) 
64: [32mSTORE_FAST[0m(5, __case_idx) 
65: [32mSTORE_FAST[0m(4, __graph_fn) 
66: [32mLOAD_GLOBAL[0m(7, enable_trace) 
67: [32mLOAD_CONST[0m(2, 1) 
68: [32mCALL_FUNCTION[0m(1, 1) 
69: [32mPOP_TOP[0m(None, None) 
70: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
71: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=1(0x687fe90)
push tracker due to record
push tracker 1 frame 0x687fe90 frame_id 1 read_stack False cf_info <class 'NoneType'> all [0, 1]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=1(0x687fe90)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=1(0x687fe90)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 1] frame_id 1
enable_trace
push tracker 1 frame 0x687fe90 frame_id 1 read_stack False cf_info <class 'NoneType'> all [0, 1]
tracing opcode POP_TOP None pc=138 frame=1(0x687fe90)
process last instruction done
restart: running injected code (f_lasti=138)
tracing opcode JUMP_ABSOLUTE None pc=140 frame=1(0x687fe90)
process last instruction done
restart: running injected code (f_lasti=140)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_ATTR None pc=16 frame=1(0x687fe90)
process last instruction done
tracing opcode CALL_METHOD None pc=18 frame=1(0x687fe90)
process last instruction done
tracing opcode STORE_FAST None pc=20 frame=1(0x687fe90)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=22 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=24 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=26 frame=1(0x687fe90)
process last instruction done
tracing opcode BUILD_SLICE None pc=28 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=1(0x687fe90)
process last instruction done
tracing opcode BUILD_SLICE None pc=34 frame=1(0x687fe90)
process last instruction done
tracing opcode BUILD_TUPLE None pc=36 frame=1(0x687fe90)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=38 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_METHOD None pc=40 frame=1(0x687fe90)
process last instruction done
tracing opcode CALL_METHOD None pc=42 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_FAST None pc=44 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=46 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=48 frame=1(0x687fe90)
process last instruction done
tracing opcode BUILD_SLICE None pc=50 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=52 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=54 frame=1(0x687fe90)
process last instruction done
tracing opcode BUILD_SLICE None pc=56 frame=1(0x687fe90)
process last instruction done
tracing opcode BUILD_TUPLE None pc=58 frame=1(0x687fe90)
process last instruction done
tracing opcode STORE_SUBSCR None pc=60 frame=1(0x687fe90)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=62 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_FAST None pc=64 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=66 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=68 frame=1(0x687fe90)
process last instruction done
tracing opcode BUILD_SLICE None pc=70 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=72 frame=1(0x687fe90)
process last instruction done
tracing opcode BUILD_TUPLE None pc=74 frame=1(0x687fe90)
process last instruction done
tracing opcode STORE_SUBSCR None pc=76 frame=1(0x687fe90)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=78 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=80 frame=1(0x687fe90)
process last instruction done
tracing opcode IS_OP None pc=82 frame=1(0x687fe90)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=84 frame=1(0x687fe90)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=94 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_METHOD None pc=96 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_FAST None pc=98 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_CONST None pc=100 frame=1(0x687fe90)
process last instruction done
tracing opcode COMPARE_OP None pc=102 frame=1(0x687fe90)
process last instruction done
tracing opcode LOAD_FAST None pc=104 frame=1(0x687fe90)
process last instruction done
tracing opcode CALL_METHOD None pc=106 frame=1(0x687fe90)
process last instruction done
tracing opcode POP_TOP None pc=108 frame=1(0x687fe90)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=110 frame=1(0x687fe90)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=112 frame=1(0x687fe90)
process last instruction done
restart: running injected code (f_lasti=112)
commiting 0 51 [32mRETURN_VALUE[0m(None, None)  112
graph graph():
    %tensor_2 : [#users=2] = placeholder[target=tensor_2]
    %new_zeros : [#users=5] = call_function[target=torch.Tensor.new_zeros](args = (%tensor_2, [1, 2]), kwargs = {})
    %getitem : [#users=1] = call_function[target=operator.getitem](args = (%tensor_2, [slice(None, None, None), slice(None, -1, None)]), kwargs = {})
    %clone : [#users=1] = call_function[target=torch.Tensor.clone](args = (%getitem,), kwargs = {})
    %setitem : [#users=0] = call_function[target=operator.setitem](args = (%new_zeros, [slice(None, None, None), slice(1, None, None)], %clone), kwargs = {})
    %setitem_1 : [#users=0] = call_function[target=operator.setitem](args = (%new_zeros, [slice(None, None, None), 0], 2), kwargs = {})
    %eq : [#users=1] = call_function[target=operator.eq](args = (%new_zeros, -100), kwargs = {})
    %masked_fill_ : [#users=0] = call_function[target=torch.Tensor.masked_fill_](args = (%new_zeros, %eq, 1), kwargs = {})
    return (new_zeros,)
callee is full graph, merge to caller
to merge graph():
    %tensor_2 : [#users=2] = placeholder[target=tensor_2]
    %new_zeros : [#users=5] = call_function[target=torch.Tensor.new_zeros](args = (%tensor_2, [1, 2]), kwargs = {})
    %getitem : [#users=1] = call_function[target=operator.getitem](args = (%tensor_2, [slice(None, None, None), slice(None, -1, None)]), kwargs = {})
    %clone : [#users=1] = call_function[target=torch.Tensor.clone](args = (%getitem,), kwargs = {})
    %setitem : [#users=0] = call_function[target=operator.setitem](args = (%new_zeros, [slice(None, None, None), slice(1, None, None)], %clone), kwargs = {})
    %setitem_1 : [#users=0] = call_function[target=operator.setitem](args = (%new_zeros, [slice(None, None, None), 0], 2), kwargs = {})
    %eq : [#users=1] = call_function[target=operator.eq](args = (%new_zeros, -100), kwargs = {})
    %masked_fill_ : [#users=0] = call_function[target=torch.Tensor.masked_fill_](args = (%new_zeros, %eq, 1), kwargs = {})
    return (new_zeros,)
tracing opcode RETURN_VALUE None pc=142 frame=1(0x687fe90)
process last instruction done
restart: running injected code (f_lasti=142)
before pop_tracker [0, 1] frame_id 1
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=54 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=56 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_CONST None pc=58 frame=0(0x686ff00)
process last instruction done
tracing opcode IS_OP None pc=60 frame=0(0x686ff00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=62 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_FAST None pc=68 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=70 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=72 frame=0(0x686ff00)
generate any for BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}
 <class 'transformers.models.bart.configuration_bart.BartConfig'> [locals['self'].config]
enumate value come here BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}

process last instruction done
tracing opcode STORE_FAST None pc=74 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=76 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_CONST None pc=78 frame=0(0x686ff00)
process last instruction done
tracing opcode IS_OP None pc=80 frame=0(0x686ff00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=82 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_FAST None pc=88 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=90 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=92 frame=0(0x686ff00)
generate any for BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}
 <class 'transformers.models.bart.configuration_bart.BartConfig'> [locals['self'].config]
enumate value come here BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}

process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=94 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=96 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_CONST None pc=98 frame=0(0x686ff00)
process last instruction done
tracing opcode IS_OP None pc=100 frame=0(0x686ff00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=102 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_FAST None pc=108 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=110 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=112 frame=0(0x686ff00)
generate any for BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}
 <class 'transformers.models.bart.configuration_bart.BartConfig'> [locals['self'].config]
enumate value come here BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}

process last instruction done
tracing opcode STORE_FAST None pc=114 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=116 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_CONST None pc=118 frame=0(0x686ff00)
process last instruction done
tracing opcode IS_OP None pc=120 frame=0(0x686ff00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=122 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_FAST None pc=128 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=130 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=132 frame=0(0x686ff00)
generate any for BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}
 <class 'transformers.models.bart.configuration_bart.BartConfig'> [locals['self'].config]
enumate value come here BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "max_position_embeddings": 1024,
  "model_type": "bart",
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "return_dict": false,
  "scale_embedding": false,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.34.0",
  "use_cache": true,
  "vocab_size": 50265
}

process last instruction done
tracing opcode STORE_FAST None pc=134 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=136 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_CONST None pc=138 frame=0(0x686ff00)
process last instruction done
tracing opcode IS_OP None pc=140 frame=0(0x686ff00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=142 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=144 frame=0(0x686ff00)
process last instruction done
tracing opcode LOAD_ATTR None pc=146 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=148 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=150 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=152 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=154 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=156 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=158 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=160 frame=0(0x686ff00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=162 frame=0(0x686ff00)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=164 frame=0(0x686ff00)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 2 0x681bd00 forward
0: [33mLOAD_DEREF[0m(0, output_attentions) 
1: [33mLOAD_CONST[0m(1, None) 
2: [33mIS_OP[0m(1, 1) 
3: [33mPOP_JUMP_IF_FALSE[0m(12, 12)  -> inst 6
4: [33mLOAD_DEREF[0m(0, output_attentions) 
5: [33mJUMP_FORWARD[0m(6, 18)  -> inst 9
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(0, config) 
8: [33mLOAD_ATTR[0m(1, output_attentions) 
9: [33mSTORE_DEREF[0m(0, output_attentions) 
10: [33mLOAD_FAST[0m(6, output_hidden_states) 
11: [33mLOAD_CONST[0m(1, None) 
12: [33mIS_OP[0m(1, 1) 
13: [33mPOP_JUMP_IF_FALSE[0m(32, 32)  -> inst 16
14: [33mLOAD_FAST[0m(6, output_hidden_states) 
15: [33mJUMP_FORWARD[0m(6, 38)  -> inst 19
16: [33mLOAD_FAST[0m(0, self) 
17: [33mLOAD_ATTR[0m(0, config) 
18: [33mLOAD_ATTR[0m(2, output_hidden_states) 
19: [33mSTORE_FAST[0m(6, output_hidden_states) 
20: [33mLOAD_FAST[0m(7, return_dict) 
21: [33mLOAD_CONST[0m(1, None) 
22: [33mIS_OP[0m(1, 1) 
23: [33mPOP_JUMP_IF_FALSE[0m(52, 52)  -> inst 26
24: [33mLOAD_FAST[0m(7, return_dict) 
25: [33mJUMP_FORWARD[0m(6, 58)  -> inst 29
26: [33mLOAD_FAST[0m(0, self) 
27: [33mLOAD_ATTR[0m(0, config) 
28: [33mLOAD_ATTR[0m(3, use_return_dict) 
29: [33mSTORE_FAST[0m(7, return_dict) 
30: [33mLOAD_FAST[0m(1, input_ids) 
31: [33mLOAD_CONST[0m(1, None) 
32: [33mIS_OP[0m(1, 1) 
33: [33mPOP_JUMP_IF_FALSE[0m(86, 86)  -> inst 43
34: [33mLOAD_FAST[0m(4, inputs_embeds) 
35: [33mLOAD_CONST[0m(1, None) 
36: [33mIS_OP[0m(1, 1) 
37: [33mPOP_JUMP_IF_FALSE[0m(86, 86)  -> inst 43
38: [33mLOAD_GLOBAL[0m(4, ValueError) 
39: [33mLOAD_CONST[0m(2, You cannot specify both input_ids and inputs_embeds at the same time) 
40: [33mCALL_FUNCTION[0m(1, 1) 
41: [33mRAISE_VARARGS[0m(1, 1) 
42: [33mJUMP_FORWARD[0m(72, 158)  -> inst 79
43: [33mLOAD_FAST[0m(1, input_ids) 
44: [33mLOAD_CONST[0m(1, None) 
45: [33mIS_OP[0m(1, 1) 
46: [33mPOP_JUMP_IF_FALSE[0m(118, 118)  -> inst 59
47: [33mLOAD_FAST[0m(1, input_ids) 
48: [33mSTORE_FAST[0m(8, input) 
49: [33mLOAD_FAST[0m(1, input_ids) 
50: [33mLOAD_METHOD[0m(5, view) 
51: [33mLOAD_CONST[0m(3, -1) 
52: [33mLOAD_FAST[0m(1, input_ids) 
53: [33mLOAD_ATTR[0m(6, shape) 
54: [33mLOAD_CONST[0m(3, -1) 
55: [33mBINARY_SUBSCR[0m(None, None) 
56: [33mCALL_METHOD[0m(2, 2) 
57: [33mSTORE_FAST[0m(1, input_ids) 
58: [33mJUMP_FORWARD[0m(40, 158)  -> inst 79
59: [33mLOAD_FAST[0m(4, inputs_embeds) 
60: [33mLOAD_CONST[0m(1, None) 
61: [33mIS_OP[0m(1, 1) 
62: [33mPOP_JUMP_IF_FALSE[0m(150, 150)  -> inst 75
63: [33mLOAD_FAST[0m(4, inputs_embeds) 
64: [33mLOAD_CONST[0m(1, None) 
65: [33mLOAD_CONST[0m(1, None) 
66: [33mBUILD_SLICE[0m(2, 2) 
67: [33mLOAD_CONST[0m(1, None) 
68: [33mLOAD_CONST[0m(1, None) 
69: [33mBUILD_SLICE[0m(2, 2) 
70: [33mLOAD_CONST[0m(3, -1) 
71: [33mBUILD_TUPLE[0m(3, 3) 
72: [33mBINARY_SUBSCR[0m(None, None) 
73: [33mSTORE_FAST[0m(8, input) 
74: [33mJUMP_FORWARD[0m(8, 158)  -> inst 79
75: [33mLOAD_GLOBAL[0m(4, ValueError) 
76: [33mLOAD_CONST[0m(4, You have to specify either input_ids or inputs_embeds) 
77: [33mCALL_FUNCTION[0m(1, 1) 
78: [33mRAISE_VARARGS[0m(1, 1) 
79: [33mLOAD_FAST[0m(4, inputs_embeds) 
80: [33mLOAD_CONST[0m(1, None) 
81: [33mIS_OP[0m(0, 0) 
82: [33mPOP_JUMP_IF_FALSE[0m(182, 182)  -> inst 91
83: [33mLOAD_FAST[0m(0, self) 
84: [33mLOAD_METHOD[0m(7, embed_tokens) 
85: [33mLOAD_FAST[0m(1, input_ids) 
86: [33mCALL_METHOD[0m(1, 1) 
87: [33mLOAD_FAST[0m(0, self) 
88: [33mLOAD_ATTR[0m(8, embed_scale) 
89: [33mBINARY_MULTIPLY[0m(None, None) 
90: [33mSTORE_FAST[0m(4, inputs_embeds) 
91: [33mLOAD_FAST[0m(0, self) 
92: [33mLOAD_METHOD[0m(9, embed_positions) 
93: [33mLOAD_FAST[0m(8, input) 
94: [33mCALL_METHOD[0m(1, 1) 
95: [33mSTORE_FAST[0m(9, embed_pos) 
96: [33mLOAD_FAST[0m(9, embed_pos) 
97: [33mLOAD_METHOD[0m(10, to) 
98: [33mLOAD_FAST[0m(4, inputs_embeds) 
99: [33mLOAD_ATTR[0m(11, device) 
100: [33mCALL_METHOD[0m(1, 1) 
101: [33mSTORE_FAST[0m(9, embed_pos) 
102: [33mLOAD_FAST[0m(4, inputs_embeds) 
103: [33mLOAD_FAST[0m(9, embed_pos) 
104: [33mBINARY_ADD[0m(None, None) 
105: [33mSTORE_FAST[0m(10, hidden_states) 
106: [33mLOAD_FAST[0m(0, self) 
107: [33mLOAD_METHOD[0m(12, layernorm_embedding) 
108: [33mLOAD_FAST[0m(10, hidden_states) 
109: [33mCALL_METHOD[0m(1, 1) 
110: [33mSTORE_FAST[0m(10, hidden_states) 
111: [33mLOAD_GLOBAL[0m(13, nn) 
112: [33mLOAD_ATTR[0m(14, functional) 
113: [33mLOAD_ATTR[0m(15, dropout) 
114: [33mLOAD_FAST[0m(10, hidden_states) 
115: [33mLOAD_FAST[0m(0, self) 
116: [33mLOAD_ATTR[0m(15, dropout) 
117: [33mLOAD_FAST[0m(0, self) 
118: [33mLOAD_ATTR[0m(16, training) 
119: [33mLOAD_CONST[0m(5, ('p', 'training')) 
120: [33mCALL_FUNCTION_KW[0m(3, 3) 
121: [33mSTORE_FAST[0m(10, hidden_states) 
122: [33mLOAD_FAST[0m(2, attention_mask) 
123: [33mLOAD_CONST[0m(1, None) 
124: [33mIS_OP[0m(1, 1) 
125: [33mEXTENDED_ARG[0m(1, 1) 
126: [33mPOP_JUMP_IF_FALSE[0m(266, 266)  -> inst 133
127: [33mLOAD_GLOBAL[0m(17, _expand_mask) 
128: [33mLOAD_FAST[0m(2, attention_mask) 
129: [33mLOAD_FAST[0m(4, inputs_embeds) 
130: [33mLOAD_ATTR[0m(18, dtype) 
131: [33mCALL_FUNCTION[0m(2, 2) 
132: [33mSTORE_FAST[0m(2, attention_mask) 
133: [33mLOAD_FAST[0m(6, output_hidden_states) 
134: [33mEXTENDED_ARG[0m(1, 1) 
135: [33mPOP_JUMP_IF_FALSE[0m(276, 276)  -> inst 138
136: [33mLOAD_CONST[0m(6, ()) 
137: [33mJUMP_FORWARD[0m(2, 278)  -> inst 139
138: [33mLOAD_CONST[0m(1, None) 
139: [33mSTORE_FAST[0m(11, encoder_states) 
140: [33mLOAD_DEREF[0m(0, output_attentions) 
141: [33mEXTENDED_ARG[0m(1, 1) 
142: [33mPOP_JUMP_IF_FALSE[0m(290, 290)  -> inst 145
143: [33mLOAD_CONST[0m(6, ()) 
144: [33mJUMP_FORWARD[0m(2, 292)  -> inst 146
145: [33mLOAD_CONST[0m(1, None) 
146: [33mSTORE_FAST[0m(12, all_attentions) 
147: [33mLOAD_FAST[0m(3, head_mask) 
148: [33mLOAD_CONST[0m(1, None) 
149: [33mIS_OP[0m(1, 1) 
150: [33mEXTENDED_ARG[0m(1, 1) 
151: [33mPOP_JUMP_IF_FALSE[0m(364, 364)  -> inst 182
152: [33mLOAD_FAST[0m(3, head_mask) 
153: [33mLOAD_METHOD[0m(19, size) 
154: [33mCALL_METHOD[0m(0, 0) 
155: [33mLOAD_CONST[0m(7, 0) 
156: [33mBINARY_SUBSCR[0m(None, None) 
157: [33mLOAD_GLOBAL[0m(20, len) 
158: [33mLOAD_FAST[0m(0, self) 
159: [33mLOAD_ATTR[0m(21, layers) 
160: [33mCALL_FUNCTION[0m(1, 1) 
161: [33mCOMPARE_OP[0m(3, !=) 
162: [33mEXTENDED_ARG[0m(1, 1) 
163: [33mPOP_JUMP_IF_FALSE[0m(364, 364)  -> inst 182
164: [33mLOAD_GLOBAL[0m(4, ValueError) 
165: [33mLOAD_CONST[0m(8, The head_mask should be specified for ) 
166: [33mLOAD_GLOBAL[0m(20, len) 
167: [33mLOAD_FAST[0m(0, self) 
168: [33mLOAD_ATTR[0m(21, layers) 
169: [33mCALL_FUNCTION[0m(1, 1) 
170: [33mFORMAT_VALUE[0m(0, (None, False)) 
171: [33mLOAD_CONST[0m(9,  layers, but it is for ) 
172: [33mLOAD_FAST[0m(3, head_mask) 
173: [33mLOAD_METHOD[0m(19, size) 
174: [33mCALL_METHOD[0m(0, 0) 
175: [33mLOAD_CONST[0m(7, 0) 
176: [33mBINARY_SUBSCR[0m(None, None) 
177: [33mFORMAT_VALUE[0m(0, (None, False)) 
178: [33mLOAD_CONST[0m(10, .) 
179: [33mBUILD_STRING[0m(5, 5) 
180: [33mCALL_FUNCTION[0m(1, 1) 
181: [33mRAISE_VARARGS[0m(1, 1) 
182: [33mLOAD_GLOBAL[0m(22, enumerate) 
183: [33mLOAD_FAST[0m(0, self) 
184: [33mLOAD_ATTR[0m(21, layers) 
185: [33mCALL_FUNCTION[0m(1, 1) 
186: [33mGET_ITER[0m(None, None) 
187: [33mFOR_ITER[0m(198, 574)  -> inst 287
188: [33mUNPACK_SEQUENCE[0m(2, 2) 
189: [33mSTORE_FAST[0m(13, idx) 
190: [33mSTORE_FAST[0m(14, encoder_layer) 
191: [33mLOAD_FAST[0m(6, output_hidden_states) 
192: [33mEXTENDED_ARG[0m(1, 1) 
193: [33mPOP_JUMP_IF_FALSE[0m(398, 398)  -> inst 199
194: [33mLOAD_FAST[0m(11, encoder_states) 
195: [33mLOAD_FAST[0m(10, hidden_states) 
196: [33mBUILD_TUPLE[0m(1, 1) 
197: [33mBINARY_ADD[0m(None, None) 
198: [33mSTORE_FAST[0m(11, encoder_states) 
199: [33mLOAD_GLOBAL[0m(23, random) 
200: [33mLOAD_METHOD[0m(24, uniform) 
201: [33mLOAD_CONST[0m(7, 0) 
202: [33mLOAD_CONST[0m(11, 1) 
203: [33mCALL_METHOD[0m(2, 2) 
204: [33mSTORE_FAST[0m(15, dropout_probability) 
205: [33mLOAD_FAST[0m(0, self) 
206: [33mLOAD_ATTR[0m(16, training) 
207: [33mEXTENDED_ARG[0m(1, 1) 
208: [33mPOP_JUMP_IF_FALSE[0m(436, 436)  -> inst 218
209: [33mLOAD_FAST[0m(15, dropout_probability) 
210: [33mLOAD_FAST[0m(0, self) 
211: [33mLOAD_ATTR[0m(25, layerdrop) 
212: [33mCOMPARE_OP[0m(0, <) 
213: [33mEXTENDED_ARG[0m(1, 1) 
214: [33mPOP_JUMP_IF_FALSE[0m(436, 436)  -> inst 218
215: [33mLOAD_CONST[0m(12, (None, None)) 
216: [33mSTORE_FAST[0m(16, layer_outputs) 
217: [33mJUMP_FORWARD[0m(114, 550)  -> inst 275
218: [33mLOAD_FAST[0m(0, self) 
219: [33mLOAD_ATTR[0m(26, gradient_checkpointing) 
220: [33mEXTENDED_ARG[0m(1, 1) 
221: [33mPOP_JUMP_IF_FALSE[0m(508, 508)  -> inst 254
222: [33mLOAD_FAST[0m(0, self) 
223: [33mLOAD_ATTR[0m(16, training) 
224: [33mEXTENDED_ARG[0m(1, 1) 
225: [33mPOP_JUMP_IF_FALSE[0m(508, 508)  -> inst 254
226: [33mLOAD_CLOSURE[0m(0, output_attentions) 
227: [33mBUILD_TUPLE[0m(1, 1) 
228: [33mLOAD_CONST[0m(13, <code object create_custom_forward at 0x150be67dc710, file "/home/drc/frontend/test/simple.py", line 833>) 
229: [33mLOAD_CONST[0m(14, BartEncoder.forward.<locals>.create_custom_forward) 
230: [33mMAKE_FUNCTION[0m(8, 8) 
231: [33mSTORE_FAST[0m(17, create_custom_forward) 
232: [33mLOAD_GLOBAL[0m(27, torch) 
233: [33mLOAD_ATTR[0m(28, utils) 
234: [33mLOAD_ATTR[0m(29, checkpoint) 
235: [33mLOAD_METHOD[0m(29, checkpoint) 
236: [33mLOAD_FAST[0m(17, create_custom_forward) 
237: [33mLOAD_FAST[0m(14, encoder_layer) 
238: [33mCALL_FUNCTION[0m(1, 1) 
239: [33mLOAD_FAST[0m(10, hidden_states) 
240: [33mLOAD_FAST[0m(2, attention_mask) 
241: [33mLOAD_FAST[0m(3, head_mask) 
242: [33mLOAD_CONST[0m(1, None) 
243: [33mIS_OP[0m(1, 1) 
244: [33mEXTENDED_ARG[0m(1, 1) 
245: [33mPOP_JUMP_IF_FALSE[0m(500, 500)  -> inst 250
246: [33mLOAD_FAST[0m(3, head_mask) 
247: [33mLOAD_FAST[0m(13, idx) 
248: [33mBINARY_SUBSCR[0m(None, None) 
249: [33mJUMP_FORWARD[0m(2, 502)  -> inst 251
250: [33mLOAD_CONST[0m(1, None) 
251: [33mCALL_METHOD[0m(4, 4) 
252: [33mSTORE_FAST[0m(16, layer_outputs) 
253: [33mJUMP_FORWARD[0m(34, 542)  -> inst 271
254: [33mLOAD_FAST[0m(14, encoder_layer) 
255: [33mLOAD_FAST[0m(10, hidden_states) 
256: [33mLOAD_FAST[0m(2, attention_mask) 
257: [33mLOAD_FAST[0m(3, head_mask) 
258: [33mLOAD_CONST[0m(1, None) 
259: [33mIS_OP[0m(1, 1) 
260: [33mEXTENDED_ARG[0m(2, 2) 
261: [33mPOP_JUMP_IF_FALSE[0m(532, 532)  -> inst 266
262: [33mLOAD_FAST[0m(3, head_mask) 
263: [33mLOAD_FAST[0m(13, idx) 
264: [33mBINARY_SUBSCR[0m(None, None) 
265: [33mJUMP_FORWARD[0m(2, 534)  -> inst 267
266: [33mLOAD_CONST[0m(1, None) 
267: [33mLOAD_DEREF[0m(0, output_attentions) 
268: [33mLOAD_CONST[0m(15, ('layer_head_mask', 'output_attentions')) 
269: [33mCALL_FUNCTION_KW[0m(4, 4) 
270: [33mSTORE_FAST[0m(16, layer_outputs) 
271: [33mLOAD_FAST[0m(16, layer_outputs) 
272: [33mLOAD_CONST[0m(7, 0) 
273: [33mBINARY_SUBSCR[0m(None, None) 
274: [33mSTORE_FAST[0m(10, hidden_states) 
275: [33mLOAD_DEREF[0m(0, output_attentions) 
276: [33mEXTENDED_ARG[0m(1, 1) 
277: [33mPOP_JUMP_IF_FALSE[0m(374, 374)  -> inst 187
278: [33mLOAD_FAST[0m(12, all_attentions) 
279: [33mLOAD_FAST[0m(16, layer_outputs) 
280: [33mLOAD_CONST[0m(11, 1) 
281: [33mBINARY_SUBSCR[0m(None, None) 
282: [33mBUILD_TUPLE[0m(1, 1) 
283: [33mBINARY_ADD[0m(None, None) 
284: [33mSTORE_FAST[0m(12, all_attentions) 
285: [33mEXTENDED_ARG[0m(1, 1) 
286: [33mJUMP_ABSOLUTE[0m(374, 374)  -> inst 187
287: [33mLOAD_FAST[0m(6, output_hidden_states) 
288: [33mEXTENDED_ARG[0m(2, 2) 
289: [33mPOP_JUMP_IF_FALSE[0m(590, 590)  -> inst 295
290: [33mLOAD_FAST[0m(11, encoder_states) 
291: [33mLOAD_FAST[0m(10, hidden_states) 
292: [33mBUILD_TUPLE[0m(1, 1) 
293: [33mBINARY_ADD[0m(None, None) 
294: [33mSTORE_FAST[0m(11, encoder_states) 
295: [33mLOAD_FAST[0m(7, return_dict) 
296: [33mEXTENDED_ARG[0m(2, 2) 
297: [33mPOP_JUMP_IF_TRUE[0m(620, 620)  -> inst 310
298: [33mLOAD_GLOBAL[0m(30, tuple) 
299: [33mLOAD_CONST[0m(16, <code object <genexpr> at 0x150be67dc7c0, file "/home/drc/frontend/test/simple.py", line 862>) 
300: [33mLOAD_CONST[0m(17, BartEncoder.forward.<locals>.<genexpr>) 
301: [33mMAKE_FUNCTION[0m(0, 0) 
302: [33mLOAD_FAST[0m(10, hidden_states) 
303: [33mLOAD_FAST[0m(11, encoder_states) 
304: [33mLOAD_FAST[0m(12, all_attentions) 
305: [33mBUILD_TUPLE[0m(3, 3) 
306: [33mGET_ITER[0m(None, None) 
307: [33mCALL_FUNCTION[0m(1, 1) 
308: [33mCALL_FUNCTION[0m(1, 1) 
309: [33mRETURN_VALUE[0m(None, None) 
310: [33mLOAD_GLOBAL[0m(31, BaseModelOutput) 
311: [33mLOAD_FAST[0m(10, hidden_states) 
312: [33mLOAD_FAST[0m(11, encoder_states) 
313: [33mLOAD_FAST[0m(12, all_attentions) 
314: [33mLOAD_CONST[0m(18, ('last_hidden_state', 'hidden_states', 'attentions')) 
315: [33mCALL_FUNCTION_KW[0m(3, 3) 
316: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'code'>, <code object <genexpr> at 0x150be67dc7c0, file "/home/drc/frontend/test/simple.py", line 862>), (<class 'str'>, 'BartEncoder.forward.<locals>.<genexpr>'), (<class 'int'>, 0), (<class 'tuple'>, ('p', 'training')), (<class 'NoneType'>, None), (<class 'str'>, 'BartEncoder.forward.<locals>.create_custom_forward'), (<class 'str'>, ' layers, but it is for '), (<class 'str'>, 'You have to specify either input_ids or inputs_embeds'), (<class 'tuple'>, ('layer_head_mask', 'output_attentions')), (<class 'str'>, 'The head_mask should be specified for '), (<class 'tuple'>, ('last_hidden_state', 'hidden_states', 'attentions')), (<class 'tuple'>, (None, None)), (<class 'str'>, "\n        Args:\n            input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):\n                Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you\n                provide it.\n\n                Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n                [`PreTrainedTokenizer.__call__`] for details.\n\n                [What are input IDs?](../glossary#input-ids)\n            attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):\n                Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:\n\n                - 1 for tokens that are **not masked**,\n                - 0 for tokens that are **masked**.\n\n                [What are attention masks?](../glossary#attention-mask)\n            head_mask (`torch.Tensor` of shape `(encoder_layers, encoder_attention_heads)`, *optional*):\n                Mask to nullify selected heads of the attention modules. Mask values selected in `[0, 1]`:\n\n                - 1 indicates the head is **not masked**,\n                - 0 indicates the head is **masked**.\n\n            inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n                Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation.\n                This is useful if you want more control over how to convert `input_ids` indices into associated vectors\n                than the model's internal embedding lookup matrix.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n            output_hidden_states (`bool`, *optional*):\n                Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors\n                for more detail.\n            return_dict (`bool`, *optional*):\n                Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n        "), (<class 'code'>, <code object create_custom_forward at 0x150be67dc710, file "/home/drc/frontend/test/simple.py", line 833>), (<class 'int'>, -1), (<class 'str'>, '.'), (<class 'int'>, 1), (<class 'tuple'>, ()), (<class 'str'>, 'You cannot specify both input_ids and inputs_embeds at the same time'), (<class 'int'>, 2)]
guarded code
0: [32mLOAD_GLOBAL[0m(36, disable_trace) 
1: [32mLOAD_CONST[0m(19, 2) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(2, 2) 
5: [32mJUMP_ABSOLUTE[0m(650, 650)  -> inst 325
6: [33mLOAD_DEREF[0m(0, output_attentions) 
7: [33mLOAD_CONST[0m(4, None) 
8: [33mIS_OP[0m(1, 1) 
9: [33mPOP_JUMP_IF_FALSE[0m(24, 24)  -> inst 12
10: [33mLOAD_DEREF[0m(0, output_attentions) 
11: [33mJUMP_FORWARD[0m(6, 30)  -> inst 15
12: [33mLOAD_FAST[0m(0, self) 
13: [33mLOAD_ATTR[0m(0, config) 
14: [33mLOAD_ATTR[0m(1, output_attentions) 
15: [33mSTORE_DEREF[0m(0, output_attentions) 
16: [33mLOAD_FAST[0m(6, output_hidden_states) 
17: [33mLOAD_CONST[0m(4, None) 
18: [33mIS_OP[0m(1, 1) 
19: [33mPOP_JUMP_IF_FALSE[0m(44, 44)  -> inst 22
20: [33mLOAD_FAST[0m(6, output_hidden_states) 
21: [33mJUMP_FORWARD[0m(6, 50)  -> inst 25
22: [33mLOAD_FAST[0m(0, self) 
23: [33mLOAD_ATTR[0m(0, config) 
24: [33mLOAD_ATTR[0m(2, output_hidden_states) 
25: [33mSTORE_FAST[0m(6, output_hidden_states) 
26: [33mLOAD_FAST[0m(7, return_dict) 
27: [33mLOAD_CONST[0m(4, None) 
28: [33mIS_OP[0m(1, 1) 
29: [33mPOP_JUMP_IF_FALSE[0m(64, 64)  -> inst 32
30: [33mLOAD_FAST[0m(7, return_dict) 
31: [33mJUMP_FORWARD[0m(6, 70)  -> inst 35
32: [33mLOAD_FAST[0m(0, self) 
33: [33mLOAD_ATTR[0m(0, config) 
34: [33mLOAD_ATTR[0m(3, use_return_dict) 
35: [33mSTORE_FAST[0m(7, return_dict) 
36: [33mLOAD_FAST[0m(1, input_ids) 
37: [33mLOAD_CONST[0m(4, None) 
38: [33mIS_OP[0m(1, 1) 
39: [33mPOP_JUMP_IF_FALSE[0m(98, 98)  -> inst 49
40: [33mLOAD_FAST[0m(4, inputs_embeds) 
41: [33mLOAD_CONST[0m(4, None) 
42: [33mIS_OP[0m(1, 1) 
43: [33mPOP_JUMP_IF_FALSE[0m(98, 98)  -> inst 49
44: [33mLOAD_GLOBAL[0m(4, ValueError) 
45: [33mLOAD_CONST[0m(18, You cannot specify both input_ids and inputs_embeds at the same time) 
46: [33mCALL_FUNCTION[0m(1, 1) 
47: [33mRAISE_VARARGS[0m(1, 1) 
48: [33mJUMP_FORWARD[0m(72, 170)  -> inst 85
49: [33mLOAD_FAST[0m(1, input_ids) 
50: [33mLOAD_CONST[0m(4, None) 
51: [33mIS_OP[0m(1, 1) 
52: [33mPOP_JUMP_IF_FALSE[0m(130, 130)  -> inst 65
53: [33mLOAD_FAST[0m(1, input_ids) 
54: [33mSTORE_FAST[0m(8, input) 
55: [33mLOAD_FAST[0m(1, input_ids) 
56: [33mLOAD_METHOD[0m(5, view) 
57: [33mLOAD_CONST[0m(14, -1) 
58: [33mLOAD_FAST[0m(1, input_ids) 
59: [33mLOAD_ATTR[0m(6, shape) 
60: [33mLOAD_CONST[0m(14, -1) 
61: [33mBINARY_SUBSCR[0m(None, None) 
62: [33mCALL_METHOD[0m(2, 2) 
63: [33mSTORE_FAST[0m(1, input_ids) 
64: [33mJUMP_FORWARD[0m(40, 170)  -> inst 85
65: [33mLOAD_FAST[0m(4, inputs_embeds) 
66: [33mLOAD_CONST[0m(4, None) 
67: [33mIS_OP[0m(1, 1) 
68: [33mPOP_JUMP_IF_FALSE[0m(162, 162)  -> inst 81
69: [33mLOAD_FAST[0m(4, inputs_embeds) 
70: [33mLOAD_CONST[0m(4, None) 
71: [33mLOAD_CONST[0m(4, None) 
72: [33mBUILD_SLICE[0m(2, 2) 
73: [33mLOAD_CONST[0m(4, None) 
74: [33mLOAD_CONST[0m(4, None) 
75: [33mBUILD_SLICE[0m(2, 2) 
76: [33mLOAD_CONST[0m(14, -1) 
77: [33mBUILD_TUPLE[0m(3, 3) 
78: [33mBINARY_SUBSCR[0m(None, None) 
79: [33mSTORE_FAST[0m(8, input) 
80: [33mJUMP_FORWARD[0m(8, 170)  -> inst 85
81: [33mLOAD_GLOBAL[0m(4, ValueError) 
82: [33mLOAD_CONST[0m(7, You have to specify either input_ids or inputs_embeds) 
83: [33mCALL_FUNCTION[0m(1, 1) 
84: [33mRAISE_VARARGS[0m(1, 1) 
85: [33mLOAD_FAST[0m(4, inputs_embeds) 
86: [33mLOAD_CONST[0m(4, None) 
87: [33mIS_OP[0m(0, 0) 
88: [33mPOP_JUMP_IF_FALSE[0m(194, 194)  -> inst 97
89: [33mLOAD_FAST[0m(0, self) 
90: [33mLOAD_METHOD[0m(7, embed_tokens) 
91: [33mLOAD_FAST[0m(1, input_ids) 
92: [33mCALL_METHOD[0m(1, 1) 
93: [33mLOAD_FAST[0m(0, self) 
94: [33mLOAD_ATTR[0m(8, embed_scale) 
95: [33mBINARY_MULTIPLY[0m(None, None) 
96: [33mSTORE_FAST[0m(4, inputs_embeds) 
97: [33mLOAD_FAST[0m(0, self) 
98: [33mLOAD_METHOD[0m(9, embed_positions) 
99: [33mLOAD_FAST[0m(8, input) 
100: [33mCALL_METHOD[0m(1, 1) 
101: [33mSTORE_FAST[0m(9, embed_pos) 
102: [33mLOAD_FAST[0m(9, embed_pos) 
103: [33mLOAD_METHOD[0m(10, to) 
104: [33mLOAD_FAST[0m(4, inputs_embeds) 
105: [33mLOAD_ATTR[0m(11, device) 
106: [33mCALL_METHOD[0m(1, 1) 
107: [33mSTORE_FAST[0m(9, embed_pos) 
108: [33mLOAD_FAST[0m(4, inputs_embeds) 
109: [33mLOAD_FAST[0m(9, embed_pos) 
110: [33mBINARY_ADD[0m(None, None) 
111: [33mSTORE_FAST[0m(10, hidden_states) 
112: [33mLOAD_FAST[0m(0, self) 
113: [33mLOAD_METHOD[0m(12, layernorm_embedding) 
114: [33mLOAD_FAST[0m(10, hidden_states) 
115: [33mCALL_METHOD[0m(1, 1) 
116: [33mSTORE_FAST[0m(10, hidden_states) 
117: [33mLOAD_GLOBAL[0m(13, nn) 
118: [33mLOAD_ATTR[0m(14, functional) 
119: [33mLOAD_ATTR[0m(15, dropout) 
120: [33mLOAD_FAST[0m(10, hidden_states) 
121: [33mLOAD_FAST[0m(0, self) 
122: [33mLOAD_ATTR[0m(15, dropout) 
123: [33mLOAD_FAST[0m(0, self) 
124: [33mLOAD_ATTR[0m(16, training) 
125: [33mLOAD_CONST[0m(3, ('p', 'training')) 
126: [33mCALL_FUNCTION_KW[0m(3, 3) 
127: [33mSTORE_FAST[0m(10, hidden_states) 
128: [33mLOAD_FAST[0m(2, attention_mask) 
129: [33mLOAD_CONST[0m(4, None) 
130: [33mIS_OP[0m(1, 1) 
131: [32mEXTENDED_ARG[0m(1, 1) 
132: [33mPOP_JUMP_IF_FALSE[0m(278, 278)  -> inst 139
133: [33mLOAD_GLOBAL[0m(17, _expand_mask) 
134: [33mLOAD_FAST[0m(2, attention_mask) 
135: [33mLOAD_FAST[0m(4, inputs_embeds) 
136: [33mLOAD_ATTR[0m(18, dtype) 
137: [33mCALL_FUNCTION[0m(2, 2) 
138: [33mSTORE_FAST[0m(2, attention_mask) 
139: [33mLOAD_FAST[0m(6, output_hidden_states) 
140: [32mEXTENDED_ARG[0m(1, 1) 
141: [33mPOP_JUMP_IF_FALSE[0m(288, 288)  -> inst 144
142: [33mLOAD_CONST[0m(17, ()) 
143: [33mJUMP_FORWARD[0m(2, 290)  -> inst 145
144: [33mLOAD_CONST[0m(4, None) 
145: [33mSTORE_FAST[0m(11, encoder_states) 
146: [33mLOAD_DEREF[0m(0, output_attentions) 
147: [32mEXTENDED_ARG[0m(1, 1) 
148: [33mPOP_JUMP_IF_FALSE[0m(302, 302)  -> inst 151
149: [33mLOAD_CONST[0m(17, ()) 
150: [33mJUMP_FORWARD[0m(2, 304)  -> inst 152
151: [33mLOAD_CONST[0m(4, None) 
152: [33mSTORE_FAST[0m(12, all_attentions) 
153: [33mLOAD_FAST[0m(3, head_mask) 
154: [33mLOAD_CONST[0m(4, None) 
155: [33mIS_OP[0m(1, 1) 
156: [32mEXTENDED_ARG[0m(1, 1) 
157: [33mPOP_JUMP_IF_FALSE[0m(376, 376)  -> inst 188
158: [33mLOAD_FAST[0m(3, head_mask) 
159: [33mLOAD_METHOD[0m(19, size) 
160: [33mCALL_METHOD[0m(0, 0) 
161: [33mLOAD_CONST[0m(2, 0) 
162: [33mBINARY_SUBSCR[0m(None, None) 
163: [33mLOAD_GLOBAL[0m(20, len) 
164: [33mLOAD_FAST[0m(0, self) 
165: [33mLOAD_ATTR[0m(21, layers) 
166: [33mCALL_FUNCTION[0m(1, 1) 
167: [33mCOMPARE_OP[0m(3, !=) 
168: [32mEXTENDED_ARG[0m(1, 1) 
169: [33mPOP_JUMP_IF_FALSE[0m(376, 376)  -> inst 188
170: [33mLOAD_GLOBAL[0m(4, ValueError) 
171: [33mLOAD_CONST[0m(9, The head_mask should be specified for ) 
172: [33mLOAD_GLOBAL[0m(20, len) 
173: [33mLOAD_FAST[0m(0, self) 
174: [33mLOAD_ATTR[0m(21, layers) 
175: [33mCALL_FUNCTION[0m(1, 1) 
176: [33mFORMAT_VALUE[0m(0, (None, False)) 
177: [33mLOAD_CONST[0m(6,  layers, but it is for ) 
178: [33mLOAD_FAST[0m(3, head_mask) 
179: [33mLOAD_METHOD[0m(19, size) 
180: [33mCALL_METHOD[0m(0, 0) 
181: [33mLOAD_CONST[0m(2, 0) 
182: [33mBINARY_SUBSCR[0m(None, None) 
183: [33mFORMAT_VALUE[0m(0, (None, False)) 
184: [33mLOAD_CONST[0m(15, .) 
185: [33mBUILD_STRING[0m(5, 5) 
186: [33mCALL_FUNCTION[0m(1, 1) 
187: [33mRAISE_VARARGS[0m(1, 1) 
188: [33mLOAD_GLOBAL[0m(22, enumerate) 
189: [33mLOAD_FAST[0m(0, self) 
190: [33mLOAD_ATTR[0m(21, layers) 
191: [33mCALL_FUNCTION[0m(1, 1) 
192: [33mGET_ITER[0m(None, None) 
193: [33mFOR_ITER[0m(198, 586)  -> inst 293
194: [33mUNPACK_SEQUENCE[0m(2, 2) 
195: [33mSTORE_FAST[0m(13, idx) 
196: [33mSTORE_FAST[0m(14, encoder_layer) 
197: [33mLOAD_FAST[0m(6, output_hidden_states) 
198: [32mEXTENDED_ARG[0m(1, 1) 
199: [33mPOP_JUMP_IF_FALSE[0m(410, 410)  -> inst 205
200: [33mLOAD_FAST[0m(11, encoder_states) 
201: [33mLOAD_FAST[0m(10, hidden_states) 
202: [33mBUILD_TUPLE[0m(1, 1) 
203: [33mBINARY_ADD[0m(None, None) 
204: [33mSTORE_FAST[0m(11, encoder_states) 
205: [33mLOAD_GLOBAL[0m(23, random) 
206: [33mLOAD_METHOD[0m(24, uniform) 
207: [33mLOAD_CONST[0m(2, 0) 
208: [33mLOAD_CONST[0m(16, 1) 
209: [33mCALL_METHOD[0m(2, 2) 
210: [33mSTORE_FAST[0m(15, dropout_probability) 
211: [33mLOAD_FAST[0m(0, self) 
212: [33mLOAD_ATTR[0m(16, training) 
213: [32mEXTENDED_ARG[0m(1, 1) 
214: [33mPOP_JUMP_IF_FALSE[0m(448, 448)  -> inst 224
215: [33mLOAD_FAST[0m(15, dropout_probability) 
216: [33mLOAD_FAST[0m(0, self) 
217: [33mLOAD_ATTR[0m(25, layerdrop) 
218: [33mCOMPARE_OP[0m(0, <) 
219: [32mEXTENDED_ARG[0m(1, 1) 
220: [33mPOP_JUMP_IF_FALSE[0m(448, 448)  -> inst 224
221: [33mLOAD_CONST[0m(11, (None, None)) 
222: [33mSTORE_FAST[0m(16, layer_outputs) 
223: [33mJUMP_FORWARD[0m(114, 562)  -> inst 281
224: [33mLOAD_FAST[0m(0, self) 
225: [33mLOAD_ATTR[0m(26, gradient_checkpointing) 
226: [32mEXTENDED_ARG[0m(2, 2) 
227: [33mPOP_JUMP_IF_FALSE[0m(520, 520)  -> inst 260
228: [33mLOAD_FAST[0m(0, self) 
229: [33mLOAD_ATTR[0m(16, training) 
230: [32mEXTENDED_ARG[0m(2, 2) 
231: [33mPOP_JUMP_IF_FALSE[0m(520, 520)  -> inst 260
232: [33mLOAD_CLOSURE[0m(0, output_attentions) 
233: [33mBUILD_TUPLE[0m(1, 1) 
234: [33mLOAD_CONST[0m(13, <code object create_custom_forward at 0x150be67dc710, file "/home/drc/frontend/test/simple.py", line 833>) 
235: [33mLOAD_CONST[0m(5, BartEncoder.forward.<locals>.create_custom_forward) 
236: [33mMAKE_FUNCTION[0m(8, 8) 
237: [33mSTORE_FAST[0m(17, create_custom_forward) 
238: [33mLOAD_GLOBAL[0m(27, torch) 
239: [33mLOAD_ATTR[0m(28, utils) 
240: [33mLOAD_ATTR[0m(29, checkpoint) 
241: [33mLOAD_METHOD[0m(29, checkpoint) 
242: [33mLOAD_FAST[0m(17, create_custom_forward) 
243: [33mLOAD_FAST[0m(14, encoder_layer) 
244: [33mCALL_FUNCTION[0m(1, 1) 
245: [33mLOAD_FAST[0m(10, hidden_states) 
246: [33mLOAD_FAST[0m(2, attention_mask) 
247: [33mLOAD_FAST[0m(3, head_mask) 
248: [33mLOAD_CONST[0m(4, None) 
249: [33mIS_OP[0m(1, 1) 
250: [32mEXTENDED_ARG[0m(2, 2) 
251: [33mPOP_JUMP_IF_FALSE[0m(512, 512)  -> inst 256
252: [33mLOAD_FAST[0m(3, head_mask) 
253: [33mLOAD_FAST[0m(13, idx) 
254: [33mBINARY_SUBSCR[0m(None, None) 
255: [33mJUMP_FORWARD[0m(2, 514)  -> inst 257
256: [33mLOAD_CONST[0m(4, None) 
257: [33mCALL_METHOD[0m(4, 4) 
258: [33mSTORE_FAST[0m(16, layer_outputs) 
259: [33mJUMP_FORWARD[0m(34, 554)  -> inst 277
260: [33mLOAD_FAST[0m(14, encoder_layer) 
261: [33mLOAD_FAST[0m(10, hidden_states) 
262: [33mLOAD_FAST[0m(2, attention_mask) 
263: [33mLOAD_FAST[0m(3, head_mask) 
264: [33mLOAD_CONST[0m(4, None) 
265: [33mIS_OP[0m(1, 1) 
266: [32mEXTENDED_ARG[0m(2, 2) 
267: [33mPOP_JUMP_IF_FALSE[0m(544, 544)  -> inst 272
268: [33mLOAD_FAST[0m(3, head_mask) 
269: [33mLOAD_FAST[0m(13, idx) 
270: [33mBINARY_SUBSCR[0m(None, None) 
271: [33mJUMP_FORWARD[0m(2, 546)  -> inst 273
272: [33mLOAD_CONST[0m(4, None) 
273: [33mLOAD_DEREF[0m(0, output_attentions) 
274: [33mLOAD_CONST[0m(8, ('layer_head_mask', 'output_attentions')) 
275: [33mCALL_FUNCTION_KW[0m(4, 4) 
276: [33mSTORE_FAST[0m(16, layer_outputs) 
277: [33mLOAD_FAST[0m(16, layer_outputs) 
278: [33mLOAD_CONST[0m(2, 0) 
279: [33mBINARY_SUBSCR[0m(None, None) 
280: [33mSTORE_FAST[0m(10, hidden_states) 
281: [33mLOAD_DEREF[0m(0, output_attentions) 
282: [32mEXTENDED_ARG[0m(1, 1) 
283: [33mPOP_JUMP_IF_FALSE[0m(386, 386)  -> inst 193
284: [33mLOAD_FAST[0m(12, all_attentions) 
285: [33mLOAD_FAST[0m(16, layer_outputs) 
286: [33mLOAD_CONST[0m(16, 1) 
287: [33mBINARY_SUBSCR[0m(None, None) 
288: [33mBUILD_TUPLE[0m(1, 1) 
289: [33mBINARY_ADD[0m(None, None) 
290: [33mSTORE_FAST[0m(12, all_attentions) 
291: [32mEXTENDED_ARG[0m(1, 1) 
292: [33mJUMP_ABSOLUTE[0m(386, 386)  -> inst 193
293: [33mLOAD_FAST[0m(6, output_hidden_states) 
294: [32mEXTENDED_ARG[0m(2, 2) 
295: [33mPOP_JUMP_IF_FALSE[0m(602, 602)  -> inst 301
296: [33mLOAD_FAST[0m(11, encoder_states) 
297: [33mLOAD_FAST[0m(10, hidden_states) 
298: [33mBUILD_TUPLE[0m(1, 1) 
299: [33mBINARY_ADD[0m(None, None) 
300: [33mSTORE_FAST[0m(11, encoder_states) 
301: [33mLOAD_FAST[0m(7, return_dict) 
302: [32mEXTENDED_ARG[0m(2, 2) 
303: [33mPOP_JUMP_IF_TRUE[0m(634, 634)  -> inst 317
304: [33mLOAD_GLOBAL[0m(30, tuple) 
305: [33mLOAD_CONST[0m(0, <code object <genexpr> at 0x150be67dc7c0, file "/home/drc/frontend/test/simple.py", line 862>) 
306: [33mLOAD_CONST[0m(1, BartEncoder.forward.<locals>.<genexpr>) 
307: [33mMAKE_FUNCTION[0m(0, 0) 
308: [33mLOAD_FAST[0m(10, hidden_states) 
309: [33mLOAD_FAST[0m(11, encoder_states) 
310: [33mLOAD_FAST[0m(12, all_attentions) 
311: [33mBUILD_TUPLE[0m(3, 3) 
312: [33mGET_ITER[0m(None, None) 
313: [33mCALL_FUNCTION[0m(1, 1) 
314: [33mCALL_FUNCTION[0m(1, 1) 
315: [32mEXTENDED_ARG[0m(2, 2) 
316: [32mJUMP_ABSOLUTE[0m(678, 678)  -> inst 339
317: [33mLOAD_GLOBAL[0m(31, BaseModelOutput) 
318: [33mLOAD_FAST[0m(10, hidden_states) 
319: [33mLOAD_FAST[0m(11, encoder_states) 
320: [33mLOAD_FAST[0m(12, all_attentions) 
321: [33mLOAD_CONST[0m(10, ('last_hidden_state', 'hidden_states', 'attentions')) 
322: [33mCALL_FUNCTION_KW[0m(3, 3) 
323: [32mEXTENDED_ARG[0m(2, 2) 
324: [32mJUMP_ABSOLUTE[0m(678, 678)  -> inst 339
325: [32mLOAD_GLOBAL[0m(33, guard_match) 
326: [32mLOAD_CONST[0m(19, 2) 
327: [32mLOAD_CONST[0m(2, 0) 
328: [32mLOAD_GLOBAL[0m(32, locals) 
329: [32mCALL_FUNCTION[0m(0, 0) 
330: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
331: [32mUNPACK_SEQUENCE[0m(2, 2) 
332: [32mSTORE_FAST[0m(19, __case_idx) 
333: [32mSTORE_FAST[0m(18, __graph_fn) 
334: [32mLOAD_GLOBAL[0m(34, enable_trace) 
335: [32mLOAD_CONST[0m(19, 2) 
336: [32mCALL_FUNCTION[0m(1, 1) 
337: [32mPOP_TOP[0m(None, None) 
338: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
339: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=2(0x688b4d0)
push tracker due to record
push tracker 2 frame 0x688b4d0 frame_id 2 read_stack False cf_info <class 'NoneType'> all [0, 2]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=2(0x688b4d0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=2(0x688b4d0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2] frame_id 2
enable_trace
push tracker 2 frame 0x688b4d0 frame_id 2 read_stack False cf_info <class 'NoneType'> all [0, 2]
tracing opcode POP_TOP None pc=674 frame=2(0x688b4d0)
process last instruction done
restart: running injected code (f_lasti=674)
tracing opcode JUMP_ABSOLUTE None pc=676 frame=2(0x688b4d0)
process last instruction done
restart: running injected code (f_lasti=676)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=12 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=16 frame=2(0x688b4d0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=18 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_DEREF None pc=20 frame=2(0x688b4d0)
process last instruction done
tracing opcode JUMP_FORWARD None pc=22 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_DEREF None pc=30 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=32 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=34 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=36 frame=2(0x688b4d0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=38 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=40 frame=2(0x688b4d0)
process last instruction done
tracing opcode JUMP_FORWARD None pc=42 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=50 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=52 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=54 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=56 frame=2(0x688b4d0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=58 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=60 frame=2(0x688b4d0)
process last instruction done
tracing opcode JUMP_FORWARD None pc=62 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=70 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=72 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=74 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=76 frame=2(0x688b4d0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=78 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=80 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=82 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=84 frame=2(0x688b4d0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=86 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=98 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=100 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=102 frame=2(0x688b4d0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=104 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=106 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=108 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=110 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=112 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=114 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=116 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=118 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=120 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=122 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=124 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=126 frame=2(0x688b4d0)
process last instruction done
tracing opcode JUMP_FORWARD None pc=128 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=170 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=172 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=174 frame=2(0x688b4d0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=176 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=178 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=180 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=182 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=184 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=186 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=188 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=190 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=192 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=194 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=196 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=198 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=200 frame=2(0x688b4d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 3 0x150b33c65230 forward
0: [33mLOAD_FAST[0m(1, input_ids) 
1: [33mLOAD_ATTR[0m(0, shape) 
2: [33mLOAD_CONST[0m(1, None) 
3: [33mLOAD_CONST[0m(2, 2) 
4: [33mBUILD_SLICE[0m(2, 2) 
5: [33mBINARY_SUBSCR[0m(None, None) 
6: [33mUNPACK_SEQUENCE[0m(2, 2) 
7: [33mSTORE_FAST[0m(3, bsz) 
8: [33mSTORE_FAST[0m(4, seq_len) 
9: [33mLOAD_GLOBAL[0m(1, torch) 
10: [33mLOAD_ATTR[0m(2, arange) 
11: [33mLOAD_FAST[0m(2, past_key_values_length) 
12: [33mLOAD_FAST[0m(2, past_key_values_length) 
13: [33mLOAD_FAST[0m(4, seq_len) 
14: [33mBINARY_ADD[0m(None, None) 
15: [33mLOAD_GLOBAL[0m(1, torch) 
16: [33mLOAD_ATTR[0m(3, long) 
17: [33mLOAD_FAST[0m(0, self) 
18: [33mLOAD_ATTR[0m(4, weight) 
19: [33mLOAD_ATTR[0m(5, device) 
20: [33mLOAD_CONST[0m(3, ('dtype', 'device')) 
21: [33mCALL_FUNCTION_KW[0m(4, 4) 
22: [33mLOAD_METHOD[0m(6, expand) 
23: [33mLOAD_FAST[0m(3, bsz) 
24: [33mLOAD_CONST[0m(4, -1) 
25: [33mCALL_METHOD[0m(2, 2) 
26: [33mSTORE_FAST[0m(5, positions) 
27: [33mLOAD_GLOBAL[0m(7, super) 
28: [33mCALL_FUNCTION[0m(0, 0) 
29: [33mLOAD_METHOD[0m(8, forward) 
30: [33mLOAD_FAST[0m(5, positions) 
31: [33mLOAD_FAST[0m(0, self) 
32: [33mLOAD_ATTR[0m(9, offset) 
33: [33mBINARY_ADD[0m(None, None) 
34: [33mCALL_METHOD[0m(1, 1) 
35: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 2), (<class 'int'>, -1), (<class 'tuple'>, ('dtype', 'device')), (<class 'NoneType'>, None), (<class 'str'>, "`input_ids' shape is expected to be [bsz x seqlen]."), (<class 'int'>, 3), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(14, disable_trace) 
1: [32mLOAD_CONST[0m(5, 3) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(82, 82)  -> inst 41
5: [33mLOAD_FAST[0m(1, input_ids) 
6: [33mLOAD_ATTR[0m(0, shape) 
7: [33mLOAD_CONST[0m(3, None) 
8: [33mLOAD_CONST[0m(0, 2) 
9: [33mBUILD_SLICE[0m(2, 2) 
10: [33mBINARY_SUBSCR[0m(None, None) 
11: [33mUNPACK_SEQUENCE[0m(2, 2) 
12: [33mSTORE_FAST[0m(3, bsz) 
13: [33mSTORE_FAST[0m(4, seq_len) 
14: [33mLOAD_GLOBAL[0m(1, torch) 
15: [33mLOAD_ATTR[0m(2, arange) 
16: [33mLOAD_FAST[0m(2, past_key_values_length) 
17: [33mLOAD_FAST[0m(2, past_key_values_length) 
18: [33mLOAD_FAST[0m(4, seq_len) 
19: [33mBINARY_ADD[0m(None, None) 
20: [33mLOAD_GLOBAL[0m(1, torch) 
21: [33mLOAD_ATTR[0m(3, long) 
22: [33mLOAD_FAST[0m(0, self) 
23: [33mLOAD_ATTR[0m(4, weight) 
24: [33mLOAD_ATTR[0m(5, device) 
25: [33mLOAD_CONST[0m(2, ('dtype', 'device')) 
26: [33mCALL_FUNCTION_KW[0m(4, 4) 
27: [33mLOAD_METHOD[0m(6, expand) 
28: [33mLOAD_FAST[0m(3, bsz) 
29: [33mLOAD_CONST[0m(1, -1) 
30: [33mCALL_METHOD[0m(2, 2) 
31: [33mSTORE_FAST[0m(5, positions) 
32: [33mLOAD_GLOBAL[0m(7, super) 
33: [33mCALL_FUNCTION[0m(0, 0) 
34: [33mLOAD_METHOD[0m(8, forward) 
35: [33mLOAD_FAST[0m(5, positions) 
36: [33mLOAD_FAST[0m(0, self) 
37: [33mLOAD_ATTR[0m(9, offset) 
38: [33mBINARY_ADD[0m(None, None) 
39: [33mCALL_METHOD[0m(1, 1) 
40: [32mJUMP_ABSOLUTE[0m(110, 110)  -> inst 55
41: [32mLOAD_GLOBAL[0m(11, guard_match) 
42: [32mLOAD_CONST[0m(5, 3) 
43: [32mLOAD_CONST[0m(6, 0) 
44: [32mLOAD_GLOBAL[0m(10, locals) 
45: [32mCALL_FUNCTION[0m(0, 0) 
46: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
47: [32mUNPACK_SEQUENCE[0m(2, 2) 
48: [32mSTORE_FAST[0m(7, __case_idx) 
49: [32mSTORE_FAST[0m(6, __graph_fn) 
50: [32mLOAD_GLOBAL[0m(12, enable_trace) 
51: [32mLOAD_CONST[0m(5, 3) 
52: [32mCALL_FUNCTION[0m(1, 1) 
53: [32mPOP_TOP[0m(None, None) 
54: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
55: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=3(0x150b31a2f640)
push tracker due to record
push tracker 3 frame 0x150b31a2f640 frame_id 3 read_stack False cf_info <class 'NoneType'> all [0, 2, 3]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=3(0x150b31a2f640)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=3(0x150b31a2f640)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 3] frame_id 3
enable_trace
push tracker 3 frame 0x150b31a2f640 frame_id 3 read_stack False cf_info <class 'NoneType'> all [0, 2, 3]
tracing opcode POP_TOP None pc=106 frame=3(0x150b31a2f640)
process last instruction done
restart: running injected code (f_lasti=106)
tracing opcode JUMP_ABSOLUTE None pc=108 frame=3(0x150b31a2f640)
process last instruction done
restart: running injected code (f_lasti=108)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_ATTR None pc=12 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_CONST None pc=16 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode BUILD_SLICE None pc=18 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=20 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=22 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode STORE_FAST None pc=24 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode STORE_FAST None pc=26 frame=3(0x150b31a2f640)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=28 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_ATTR None pc=30 frame=3(0x150b31a2f640)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=32 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_FAST None pc=34 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_FAST None pc=36 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode BINARY_ADD None pc=38 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=40 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_ATTR None pc=42 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_FAST None pc=44 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_ATTR None pc=46 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_ATTR None pc=48 frame=3(0x150b31a2f640)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=50 frame=3(0x150b31a2f640)
device:cpu, id:23135849826832
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=52 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_METHOD None pc=54 frame=3(0x150b31a2f640)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=56 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_CONST None pc=58 frame=3(0x150b31a2f640)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode CALL_METHOD None pc=60 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode STORE_FAST None pc=62 frame=3(0x150b31a2f640)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=64 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode CALL_FUNCTION None pc=66 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_METHOD None pc=68 frame=3(0x150b31a2f640)
generate any for <super: <class 'BartLearnedPositionalEmbedding'>, <BartLearnedPositionalEmbedding object>> <class 'super'> [__stack__0]
enumate value come here <super: <class 'BartLearnedPositionalEmbedding'>, <BartLearnedPositionalEmbedding object>>
process last instruction done
tracing opcode LOAD_FAST None pc=70 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_FAST None pc=72 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode LOAD_ATTR None pc=74 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode BINARY_ADD None pc=76 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode CALL_METHOD None pc=78 frame=3(0x150b31a2f640)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=80 frame=3(0x150b31a2f640)
process last instruction done
restart: running injected code (f_lasti=80)
commiting 0 35 [32mRETURN_VALUE[0m(None, None)  80
graph graph():
    %tensor_6 : [#users=0] = placeholder[target=tensor_6]
    %weight : [#users=0] = get_attr[target=weight]
    %arange : [#users=1] = call_function[target=torch.arange](args = (0, 2), kwargs = {dtype: torch.int64, device: cpu})
    %expand : [#users=1] = call_function[target=torch.Tensor.expand](args = (%arange, 1, -1), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%expand, 2), kwargs = {})
    %forward : [#users=1] = call_function[target=torch.nn.modules.sparse.forward](args = (%add,), kwargs = {})
    return (forward,)
callee is full graph, merge to caller
to merge graph():
    %tensor_6 : [#users=0] = placeholder[target=tensor_6]
    %weight : [#users=0] = get_attr[target=weight]
    %arange : [#users=1] = call_function[target=torch.arange](args = (0, 2), kwargs = {dtype: torch.int64, device: cpu})
    %expand : [#users=1] = call_function[target=torch.Tensor.expand](args = (%arange, 1, -1), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%expand, 2), kwargs = {})
    %forward : [#users=1] = call_function[target=torch.nn.modules.sparse.forward](args = (%add,), kwargs = {})
    return (forward,)
tracing opcode RETURN_VALUE None pc=110 frame=3(0x150b31a2f640)
process last instruction done
restart: running injected code (f_lasti=110)
before pop_tracker [0, 2, 3] frame_id 3
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=202 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=204 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=206 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=208 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=210 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=212 frame=2(0x688b4d0)
device:cpu, id:23135849825168
process last instruction done
tracing opcode STORE_FAST None pc=214 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=216 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=218 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_ADD None pc=220 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=222 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=224 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=226 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=228 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=230 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=232 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=234 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=236 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=238 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=240 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=242 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=244 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=246 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=248 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=250 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=252 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=254 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=256 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=258 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=260 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=262 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=266 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=268 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=270 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=272 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION None pc=274 frame=2(0x688b4d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 4 0x150b33c65dd0 _expand_mask
0: [33mLOAD_FAST[0m(0, mask) 
1: [33mLOAD_METHOD[0m(0, size) 
2: [33mCALL_METHOD[0m(0, 0) 
3: [33mUNPACK_SEQUENCE[0m(2, 2) 
4: [33mSTORE_FAST[0m(3, bsz) 
5: [33mSTORE_FAST[0m(4, src_len) 
6: [33mLOAD_FAST[0m(2, tgt_len) 
7: [33mLOAD_CONST[0m(1, None) 
8: [33mIS_OP[0m(1, 1) 
9: [33mPOP_JUMP_IF_FALSE[0m(24, 24)  -> inst 12
10: [33mLOAD_FAST[0m(2, tgt_len) 
11: [33mJUMP_FORWARD[0m(2, 26)  -> inst 13
12: [33mLOAD_FAST[0m(4, src_len) 
13: [33mSTORE_FAST[0m(2, tgt_len) 
14: [33mLOAD_FAST[0m(0, mask) 
15: [33mLOAD_CONST[0m(1, None) 
16: [33mLOAD_CONST[0m(1, None) 
17: [33mBUILD_SLICE[0m(2, 2) 
18: [33mLOAD_CONST[0m(1, None) 
19: [33mLOAD_CONST[0m(1, None) 
20: [33mLOAD_CONST[0m(1, None) 
21: [33mLOAD_CONST[0m(1, None) 
22: [33mBUILD_SLICE[0m(2, 2) 
23: [33mBUILD_TUPLE[0m(4, 4) 
24: [33mBINARY_SUBSCR[0m(None, None) 
25: [33mLOAD_METHOD[0m(1, expand) 
26: [33mLOAD_FAST[0m(3, bsz) 
27: [33mLOAD_CONST[0m(2, 1) 
28: [33mLOAD_FAST[0m(2, tgt_len) 
29: [33mLOAD_FAST[0m(4, src_len) 
30: [33mCALL_METHOD[0m(4, 4) 
31: [33mLOAD_METHOD[0m(2, to) 
32: [33mLOAD_FAST[0m(1, dtype) 
33: [33mCALL_METHOD[0m(1, 1) 
34: [33mSTORE_FAST[0m(5, expanded_mask) 
35: [33mLOAD_CONST[0m(3, 1.0) 
36: [33mLOAD_FAST[0m(5, expanded_mask) 
37: [33mBINARY_SUBTRACT[0m(None, None) 
38: [33mSTORE_FAST[0m(6, inverted_mask) 
39: [33mLOAD_FAST[0m(6, inverted_mask) 
40: [33mLOAD_METHOD[0m(3, masked_fill) 
41: [33mLOAD_FAST[0m(6, inverted_mask) 
42: [33mLOAD_METHOD[0m(2, to) 
43: [33mLOAD_GLOBAL[0m(4, torch) 
44: [33mLOAD_ATTR[0m(5, bool) 
45: [33mCALL_METHOD[0m(1, 1) 
46: [33mLOAD_GLOBAL[0m(4, torch) 
47: [33mLOAD_METHOD[0m(6, finfo) 
48: [33mLOAD_FAST[0m(1, dtype) 
49: [33mCALL_METHOD[0m(1, 1) 
50: [33mLOAD_ATTR[0m(7, min) 
51: [33mCALL_METHOD[0m(2, 2) 
52: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'float'>, 1.0), (<class 'str'>, '\n    Expands attention_mask from `[bsz, seq_len]` to `[bsz, 1, tgt_seq_len, src_seq_len]`.\n    '), (<class 'int'>, 1), (<class 'NoneType'>, None), (<class 'int'>, 4), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(12, disable_trace) 
1: [32mLOAD_CONST[0m(4, 4) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(116, 116)  -> inst 58
5: [33mLOAD_FAST[0m(0, mask) 
6: [33mLOAD_METHOD[0m(0, size) 
7: [33mCALL_METHOD[0m(0, 0) 
8: [33mUNPACK_SEQUENCE[0m(2, 2) 
9: [33mSTORE_FAST[0m(3, bsz) 
10: [33mSTORE_FAST[0m(4, src_len) 
11: [33mLOAD_FAST[0m(2, tgt_len) 
12: [33mLOAD_CONST[0m(3, None) 
13: [33mIS_OP[0m(1, 1) 
14: [33mPOP_JUMP_IF_FALSE[0m(34, 34)  -> inst 17
15: [33mLOAD_FAST[0m(2, tgt_len) 
16: [33mJUMP_FORWARD[0m(2, 36)  -> inst 18
17: [33mLOAD_FAST[0m(4, src_len) 
18: [33mSTORE_FAST[0m(2, tgt_len) 
19: [33mLOAD_FAST[0m(0, mask) 
20: [33mLOAD_CONST[0m(3, None) 
21: [33mLOAD_CONST[0m(3, None) 
22: [33mBUILD_SLICE[0m(2, 2) 
23: [33mLOAD_CONST[0m(3, None) 
24: [33mLOAD_CONST[0m(3, None) 
25: [33mLOAD_CONST[0m(3, None) 
26: [33mLOAD_CONST[0m(3, None) 
27: [33mBUILD_SLICE[0m(2, 2) 
28: [33mBUILD_TUPLE[0m(4, 4) 
29: [33mBINARY_SUBSCR[0m(None, None) 
30: [33mLOAD_METHOD[0m(1, expand) 
31: [33mLOAD_FAST[0m(3, bsz) 
32: [33mLOAD_CONST[0m(2, 1) 
33: [33mLOAD_FAST[0m(2, tgt_len) 
34: [33mLOAD_FAST[0m(4, src_len) 
35: [33mCALL_METHOD[0m(4, 4) 
36: [33mLOAD_METHOD[0m(2, to) 
37: [33mLOAD_FAST[0m(1, dtype) 
38: [33mCALL_METHOD[0m(1, 1) 
39: [33mSTORE_FAST[0m(5, expanded_mask) 
40: [33mLOAD_CONST[0m(0, 1.0) 
41: [33mLOAD_FAST[0m(5, expanded_mask) 
42: [33mBINARY_SUBTRACT[0m(None, None) 
43: [33mSTORE_FAST[0m(6, inverted_mask) 
44: [33mLOAD_FAST[0m(6, inverted_mask) 
45: [33mLOAD_METHOD[0m(3, masked_fill) 
46: [33mLOAD_FAST[0m(6, inverted_mask) 
47: [33mLOAD_METHOD[0m(2, to) 
48: [33mLOAD_GLOBAL[0m(4, torch) 
49: [33mLOAD_ATTR[0m(5, bool) 
50: [33mCALL_METHOD[0m(1, 1) 
51: [33mLOAD_GLOBAL[0m(4, torch) 
52: [33mLOAD_METHOD[0m(6, finfo) 
53: [33mLOAD_FAST[0m(1, dtype) 
54: [33mCALL_METHOD[0m(1, 1) 
55: [33mLOAD_ATTR[0m(7, min) 
56: [33mCALL_METHOD[0m(2, 2) 
57: [32mJUMP_ABSOLUTE[0m(144, 144)  -> inst 72
58: [32mLOAD_GLOBAL[0m(9, guard_match) 
59: [32mLOAD_CONST[0m(4, 4) 
60: [32mLOAD_CONST[0m(5, 0) 
61: [32mLOAD_GLOBAL[0m(8, locals) 
62: [32mCALL_FUNCTION[0m(0, 0) 
63: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
64: [32mUNPACK_SEQUENCE[0m(2, 2) 
65: [32mSTORE_FAST[0m(8, __case_idx) 
66: [32mSTORE_FAST[0m(7, __graph_fn) 
67: [32mLOAD_GLOBAL[0m(10, enable_trace) 
68: [32mLOAD_CONST[0m(4, 4) 
69: [32mCALL_FUNCTION[0m(1, 1) 
70: [32mPOP_TOP[0m(None, None) 
71: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
72: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=4(0x150b31a2f240)
push tracker due to record
push tracker 4 frame 0x150b31a2f240 frame_id 4 read_stack False cf_info <class 'NoneType'> all [0, 2, 4]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=4(0x150b31a2f240)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=4(0x150b31a2f240)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 4] frame_id 4
enable_trace
push tracker 4 frame 0x150b31a2f240 frame_id 4 read_stack False cf_info <class 'NoneType'> all [0, 2, 4]
tracing opcode POP_TOP None pc=140 frame=4(0x150b31a2f240)
process last instruction done
restart: running injected code (f_lasti=140)
tracing opcode JUMP_ABSOLUTE None pc=142 frame=4(0x150b31a2f240)
process last instruction done
restart: running injected code (f_lasti=142)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode CALL_METHOD None pc=14 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=16 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode STORE_FAST None pc=18 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode STORE_FAST None pc=20 frame=4(0x150b31a2f240)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=22 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_CONST None pc=24 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode IS_OP None pc=26 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=28 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_FAST None pc=34 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode STORE_FAST None pc=36 frame=4(0x150b31a2f240)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=38 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_CONST None pc=40 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_CONST None pc=42 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode BUILD_SLICE None pc=44 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_CONST None pc=46 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_CONST None pc=48 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_CONST None pc=50 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_CONST None pc=52 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode BUILD_SLICE None pc=54 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode BUILD_TUPLE None pc=56 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=58 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_METHOD None pc=60 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_FAST None pc=62 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_CONST None pc=64 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_FAST None pc=66 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_FAST None pc=68 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode CALL_METHOD None pc=70 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_METHOD None pc=72 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_FAST None pc=74 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode CALL_METHOD None pc=76 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode STORE_FAST None pc=78 frame=4(0x150b31a2f240)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=80 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_FAST None pc=82 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode BINARY_SUBTRACT None pc=84 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode STORE_FAST None pc=86 frame=4(0x150b31a2f240)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=88 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_METHOD None pc=90 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_FAST None pc=92 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_METHOD None pc=94 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=96 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_ATTR None pc=98 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode CALL_METHOD None pc=100 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=102 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_METHOD None pc=104 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_FAST None pc=106 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode CALL_METHOD None pc=108 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode LOAD_ATTR None pc=110 frame=4(0x150b31a2f240)
generate any for finfo(resolution=1e-06, min=-3.40282e+38, max=3.40282e+38, eps=1.19209e-07, smallest_normal=1.17549e-38, tiny=1.17549e-38, dtype=float32) <class 'torch.finfo'> []
enumate value come here finfo(resolution=1e-06, min=-3.40282e+38, max=3.40282e+38, eps=1.19209e-07, smallest_normal=1.17549e-38, tiny=1.17549e-38, dtype=float32)
process last instruction done
tracing opcode CALL_METHOD None pc=112 frame=4(0x150b31a2f240)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=114 frame=4(0x150b31a2f240)
process last instruction done
restart: running injected code (f_lasti=114)
commiting 0 52 [32mRETURN_VALUE[0m(None, None)  114
graph graph():
    %tensor_10 : [#users=1] = placeholder[target=tensor_10]
    %getitem : [#users=1] = call_function[target=operator.getitem](args = (%tensor_10, [slice(None, None, None), None, None, slice(None, None, None)]), kwargs = {})
    %expand : [#users=1] = call_function[target=torch.Tensor.expand](args = (%getitem, 1, 1, 2, 2), kwargs = {})
    %to : [#users=1] = call_function[target=torch.Tensor.to](args = (%expand, torch.float32), kwargs = {})
    %sub : [#users=2] = call_function[target=operator.sub](args = (1.0, %to), kwargs = {})
    %to_1 : [#users=1] = call_function[target=torch.Tensor.to](args = (%sub, torch.bool), kwargs = {})
    %finfo : [#users=0] = call_function[target=torch.finfo](args = (torch.float32,), kwargs = {})
    %masked_fill : [#users=1] = call_function[target=torch.Tensor.masked_fill](args = (%sub, %to_1, -3.4028234663852886e+38), kwargs = {})
    return (masked_fill,)
callee is full graph, merge to caller
to merge graph():
    %tensor_10 : [#users=1] = placeholder[target=tensor_10]
    %getitem : [#users=1] = call_function[target=operator.getitem](args = (%tensor_10, [slice(None, None, None), None, None, slice(None, None, None)]), kwargs = {})
    %expand : [#users=1] = call_function[target=torch.Tensor.expand](args = (%getitem, 1, 1, 2, 2), kwargs = {})
    %to : [#users=1] = call_function[target=torch.Tensor.to](args = (%expand, torch.float32), kwargs = {})
    %sub : [#users=2] = call_function[target=operator.sub](args = (1.0, %to), kwargs = {})
    %to_1 : [#users=1] = call_function[target=torch.Tensor.to](args = (%sub, torch.bool), kwargs = {})
    %finfo : [#users=0] = call_function[target=torch.finfo](args = (torch.float32,), kwargs = {})
    %masked_fill : [#users=1] = call_function[target=torch.Tensor.masked_fill](args = (%sub, %to_1, -3.4028234663852886e+38), kwargs = {})
    return (masked_fill,)
tracing opcode RETURN_VALUE None pc=144 frame=4(0x150b31a2f240)
process last instruction done
restart: running injected code (f_lasti=144)
before pop_tracker [0, 2, 4] frame_id 4
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=276 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=278 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=280 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=288 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=290 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=292 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=294 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=302 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=304 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=306 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=308 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=310 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=312 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=376 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=378 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=380 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION None pc=382 frame=2(0x688b4d0)
process last instruction done
tracing opcode GET_ITER None pc=384 frame=2(0x688b4d0)
generate any for <enumerate object at 0x150abc1c0300> <class 'enumerate'> [enumerate(locals['self'].layers)]
enumate value come here <enumerate object at 0x150abc1c0300>
process last instruction done
tracing opcode FOR_ITER None pc=386 frame=2(0x688b4d0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=388 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=390 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=392 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=394 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=396 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=410 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=412 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=414 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=416 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=418 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=420 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=422 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=424 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=426 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=430 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=432 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=434 frame=2(0x688b4d0)
process last instruction done
tracing opcode COMPARE_OP None pc=436 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=438 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=448 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=450 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=452 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=520 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=522 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=524 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=526 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=528 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=530 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=532 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=544 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=546 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=548 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=550 frame=2(0x688b4d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 5 0x150b33c83640 forward
0: [33mLOAD_FAST[0m(1, hidden_states) 
1: [33mSTORE_FAST[0m(5, residual) 
2: [33mLOAD_FAST[0m(0, self) 
3: [33mLOAD_ATTR[0m(0, self_attn) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_FAST[0m(2, attention_mask) 
6: [33mLOAD_FAST[0m(3, layer_head_mask) 
7: [33mLOAD_FAST[0m(4, output_attentions) 
8: [33mLOAD_CONST[0m(1, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
9: [33mCALL_FUNCTION_KW[0m(4, 4) 
10: [33mUNPACK_SEQUENCE[0m(3, 3) 
11: [33mSTORE_FAST[0m(1, hidden_states) 
12: [33mSTORE_FAST[0m(6, attn_weights) 
13: [33mSTORE_FAST[0m(7, _) 
14: [33mLOAD_GLOBAL[0m(1, nn) 
15: [33mLOAD_ATTR[0m(2, functional) 
16: [33mLOAD_ATTR[0m(3, dropout) 
17: [33mLOAD_FAST[0m(1, hidden_states) 
18: [33mLOAD_FAST[0m(0, self) 
19: [33mLOAD_ATTR[0m(3, dropout) 
20: [33mLOAD_FAST[0m(0, self) 
21: [33mLOAD_ATTR[0m(4, training) 
22: [33mLOAD_CONST[0m(2, ('p', 'training')) 
23: [33mCALL_FUNCTION_KW[0m(3, 3) 
24: [33mSTORE_FAST[0m(1, hidden_states) 
25: [33mLOAD_FAST[0m(5, residual) 
26: [33mLOAD_FAST[0m(1, hidden_states) 
27: [33mBINARY_ADD[0m(None, None) 
28: [33mSTORE_FAST[0m(1, hidden_states) 
29: [33mLOAD_FAST[0m(0, self) 
30: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
31: [33mLOAD_FAST[0m(1, hidden_states) 
32: [33mCALL_METHOD[0m(1, 1) 
33: [33mSTORE_FAST[0m(1, hidden_states) 
34: [33mLOAD_FAST[0m(1, hidden_states) 
35: [33mSTORE_FAST[0m(5, residual) 
36: [33mLOAD_FAST[0m(0, self) 
37: [33mLOAD_METHOD[0m(6, activation_fn) 
38: [33mLOAD_FAST[0m(0, self) 
39: [33mLOAD_METHOD[0m(7, fc1) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mCALL_METHOD[0m(1, 1) 
42: [33mCALL_METHOD[0m(1, 1) 
43: [33mSTORE_FAST[0m(1, hidden_states) 
44: [33mLOAD_GLOBAL[0m(1, nn) 
45: [33mLOAD_ATTR[0m(2, functional) 
46: [33mLOAD_ATTR[0m(3, dropout) 
47: [33mLOAD_FAST[0m(1, hidden_states) 
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_ATTR[0m(8, activation_dropout) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_ATTR[0m(4, training) 
52: [33mLOAD_CONST[0m(2, ('p', 'training')) 
53: [33mCALL_FUNCTION_KW[0m(3, 3) 
54: [33mSTORE_FAST[0m(1, hidden_states) 
55: [33mLOAD_FAST[0m(0, self) 
56: [33mLOAD_METHOD[0m(9, fc2) 
57: [33mLOAD_FAST[0m(1, hidden_states) 
58: [33mCALL_METHOD[0m(1, 1) 
59: [33mSTORE_FAST[0m(1, hidden_states) 
60: [33mLOAD_GLOBAL[0m(1, nn) 
61: [33mLOAD_ATTR[0m(2, functional) 
62: [33mLOAD_ATTR[0m(3, dropout) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_ATTR[0m(3, dropout) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_ATTR[0m(4, training) 
68: [33mLOAD_CONST[0m(2, ('p', 'training')) 
69: [33mCALL_FUNCTION_KW[0m(3, 3) 
70: [33mSTORE_FAST[0m(1, hidden_states) 
71: [33mLOAD_FAST[0m(5, residual) 
72: [33mLOAD_FAST[0m(1, hidden_states) 
73: [33mBINARY_ADD[0m(None, None) 
74: [33mSTORE_FAST[0m(1, hidden_states) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(10, final_layer_norm) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mSTORE_FAST[0m(1, hidden_states) 
80: [33mLOAD_FAST[0m(1, hidden_states) 
81: [33mLOAD_ATTR[0m(11, dtype) 
82: [33mLOAD_GLOBAL[0m(12, torch) 
83: [33mLOAD_ATTR[0m(13, float16) 
84: [33mCOMPARE_OP[0m(2, ==) 
85: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
86: [33mLOAD_GLOBAL[0m(12, torch) 
87: [33mLOAD_METHOD[0m(14, isinf) 
88: [33mLOAD_FAST[0m(1, hidden_states) 
89: [33mCALL_METHOD[0m(1, 1) 
90: [33mLOAD_METHOD[0m(15, any) 
91: [33mCALL_METHOD[0m(0, 0) 
92: [33mPOP_JUMP_IF_TRUE[0m(200, 200)  -> inst 100
93: [33mLOAD_GLOBAL[0m(12, torch) 
94: [33mLOAD_METHOD[0m(16, isnan) 
95: [33mLOAD_FAST[0m(1, hidden_states) 
96: [33mCALL_METHOD[0m(1, 1) 
97: [33mLOAD_METHOD[0m(15, any) 
98: [33mCALL_METHOD[0m(0, 0) 
99: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
100: [33mLOAD_GLOBAL[0m(12, torch) 
101: [33mLOAD_METHOD[0m(17, finfo) 
102: [33mLOAD_FAST[0m(1, hidden_states) 
103: [33mLOAD_ATTR[0m(11, dtype) 
104: [33mCALL_METHOD[0m(1, 1) 
105: [33mLOAD_ATTR[0m(18, max) 
106: [33mLOAD_CONST[0m(3, 1000) 
107: [33mBINARY_SUBTRACT[0m(None, None) 
108: [33mSTORE_FAST[0m(8, clamp_value) 
109: [33mLOAD_GLOBAL[0m(12, torch) 
110: [33mLOAD_ATTR[0m(19, clamp) 
111: [33mLOAD_FAST[0m(1, hidden_states) 
112: [33mLOAD_FAST[0m(8, clamp_value) 
113: [33mUNARY_NEGATIVE[0m(None, None) 
114: [33mLOAD_FAST[0m(8, clamp_value) 
115: [33mLOAD_CONST[0m(4, ('min', 'max')) 
116: [33mCALL_FUNCTION_KW[0m(3, 3) 
117: [33mSTORE_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(1, hidden_states) 
119: [33mBUILD_TUPLE[0m(1, 1) 
120: [33mSTORE_FAST[0m(9, outputs) 
121: [33mLOAD_FAST[0m(4, output_attentions) 
122: [33mEXTENDED_ARG[0m(1, 1) 
123: [33mPOP_JUMP_IF_FALSE[0m(258, 258)  -> inst 129
124: [33mLOAD_FAST[0m(9, outputs) 
125: [33mLOAD_FAST[0m(6, attn_weights) 
126: [33mBUILD_TUPLE[0m(1, 1) 
127: [33mINPLACE_ADD[0m(None, None) 
128: [33mSTORE_FAST[0m(9, outputs) 
129: [33mLOAD_FAST[0m(9, outputs) 
130: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')), (<class 'int'>, 1000), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, '\n        Args:\n            hidden_states (`torch.FloatTensor`): input to the layer of shape `(seq_len, batch, embed_dim)`\n            attention_mask (`torch.FloatTensor`): attention mask of size\n                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.\n            layer_head_mask (`torch.FloatTensor`): mask for attention heads in a given layer of size\n                `(encoder_attention_heads,)`.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n        '), (<class 'tuple'>, ('min', 'max')), (<class 'int'>, 5), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(24, disable_trace) 
1: [32mLOAD_CONST[0m(5, 5) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(1, 1) 
5: [32mJUMP_ABSOLUTE[0m(276, 276)  -> inst 138
6: [33mLOAD_FAST[0m(1, hidden_states) 
7: [33mSTORE_FAST[0m(5, residual) 
8: [33mLOAD_FAST[0m(0, self) 
9: [33mLOAD_ATTR[0m(0, self_attn) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_FAST[0m(2, attention_mask) 
12: [33mLOAD_FAST[0m(3, layer_head_mask) 
13: [33mLOAD_FAST[0m(4, output_attentions) 
14: [33mLOAD_CONST[0m(0, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
15: [33mCALL_FUNCTION_KW[0m(4, 4) 
16: [33mUNPACK_SEQUENCE[0m(3, 3) 
17: [33mSTORE_FAST[0m(1, hidden_states) 
18: [33mSTORE_FAST[0m(6, attn_weights) 
19: [33mSTORE_FAST[0m(7, _) 
20: [33mLOAD_GLOBAL[0m(1, nn) 
21: [33mLOAD_ATTR[0m(2, functional) 
22: [33mLOAD_ATTR[0m(3, dropout) 
23: [33mLOAD_FAST[0m(1, hidden_states) 
24: [33mLOAD_FAST[0m(0, self) 
25: [33mLOAD_ATTR[0m(3, dropout) 
26: [33mLOAD_FAST[0m(0, self) 
27: [33mLOAD_ATTR[0m(4, training) 
28: [33mLOAD_CONST[0m(2, ('p', 'training')) 
29: [33mCALL_FUNCTION_KW[0m(3, 3) 
30: [33mSTORE_FAST[0m(1, hidden_states) 
31: [33mLOAD_FAST[0m(5, residual) 
32: [33mLOAD_FAST[0m(1, hidden_states) 
33: [33mBINARY_ADD[0m(None, None) 
34: [33mSTORE_FAST[0m(1, hidden_states) 
35: [33mLOAD_FAST[0m(0, self) 
36: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
37: [33mLOAD_FAST[0m(1, hidden_states) 
38: [33mCALL_METHOD[0m(1, 1) 
39: [33mSTORE_FAST[0m(1, hidden_states) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mSTORE_FAST[0m(5, residual) 
42: [33mLOAD_FAST[0m(0, self) 
43: [33mLOAD_METHOD[0m(6, activation_fn) 
44: [33mLOAD_FAST[0m(0, self) 
45: [33mLOAD_METHOD[0m(7, fc1) 
46: [33mLOAD_FAST[0m(1, hidden_states) 
47: [33mCALL_METHOD[0m(1, 1) 
48: [33mCALL_METHOD[0m(1, 1) 
49: [33mSTORE_FAST[0m(1, hidden_states) 
50: [33mLOAD_GLOBAL[0m(1, nn) 
51: [33mLOAD_ATTR[0m(2, functional) 
52: [33mLOAD_ATTR[0m(3, dropout) 
53: [33mLOAD_FAST[0m(1, hidden_states) 
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_ATTR[0m(8, activation_dropout) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_ATTR[0m(4, training) 
58: [33mLOAD_CONST[0m(2, ('p', 'training')) 
59: [33mCALL_FUNCTION_KW[0m(3, 3) 
60: [33mSTORE_FAST[0m(1, hidden_states) 
61: [33mLOAD_FAST[0m(0, self) 
62: [33mLOAD_METHOD[0m(9, fc2) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mCALL_METHOD[0m(1, 1) 
65: [33mSTORE_FAST[0m(1, hidden_states) 
66: [33mLOAD_GLOBAL[0m(1, nn) 
67: [33mLOAD_ATTR[0m(2, functional) 
68: [33mLOAD_ATTR[0m(3, dropout) 
69: [33mLOAD_FAST[0m(1, hidden_states) 
70: [33mLOAD_FAST[0m(0, self) 
71: [33mLOAD_ATTR[0m(3, dropout) 
72: [33mLOAD_FAST[0m(0, self) 
73: [33mLOAD_ATTR[0m(4, training) 
74: [33mLOAD_CONST[0m(2, ('p', 'training')) 
75: [33mCALL_FUNCTION_KW[0m(3, 3) 
76: [33mSTORE_FAST[0m(1, hidden_states) 
77: [33mLOAD_FAST[0m(5, residual) 
78: [33mLOAD_FAST[0m(1, hidden_states) 
79: [33mBINARY_ADD[0m(None, None) 
80: [33mSTORE_FAST[0m(1, hidden_states) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(10, final_layer_norm) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mSTORE_FAST[0m(1, hidden_states) 
86: [33mLOAD_FAST[0m(1, hidden_states) 
87: [33mLOAD_ATTR[0m(11, dtype) 
88: [33mLOAD_GLOBAL[0m(12, torch) 
89: [33mLOAD_ATTR[0m(13, float16) 
90: [33mCOMPARE_OP[0m(2, ==) 
91: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
92: [33mLOAD_GLOBAL[0m(12, torch) 
93: [33mLOAD_METHOD[0m(14, isinf) 
94: [33mLOAD_FAST[0m(1, hidden_states) 
95: [33mCALL_METHOD[0m(1, 1) 
96: [33mLOAD_METHOD[0m(15, any) 
97: [33mCALL_METHOD[0m(0, 0) 
98: [33mPOP_JUMP_IF_TRUE[0m(212, 212)  -> inst 106
99: [33mLOAD_GLOBAL[0m(12, torch) 
100: [33mLOAD_METHOD[0m(16, isnan) 
101: [33mLOAD_FAST[0m(1, hidden_states) 
102: [33mCALL_METHOD[0m(1, 1) 
103: [33mLOAD_METHOD[0m(15, any) 
104: [33mCALL_METHOD[0m(0, 0) 
105: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
106: [33mLOAD_GLOBAL[0m(12, torch) 
107: [33mLOAD_METHOD[0m(17, finfo) 
108: [33mLOAD_FAST[0m(1, hidden_states) 
109: [33mLOAD_ATTR[0m(11, dtype) 
110: [33mCALL_METHOD[0m(1, 1) 
111: [33mLOAD_ATTR[0m(18, max) 
112: [33mLOAD_CONST[0m(1, 1000) 
113: [33mBINARY_SUBTRACT[0m(None, None) 
114: [33mSTORE_FAST[0m(8, clamp_value) 
115: [33mLOAD_GLOBAL[0m(12, torch) 
116: [33mLOAD_ATTR[0m(19, clamp) 
117: [33mLOAD_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(8, clamp_value) 
119: [33mUNARY_NEGATIVE[0m(None, None) 
120: [33mLOAD_FAST[0m(8, clamp_value) 
121: [33mLOAD_CONST[0m(4, ('min', 'max')) 
122: [33mCALL_FUNCTION_KW[0m(3, 3) 
123: [33mSTORE_FAST[0m(1, hidden_states) 
124: [33mLOAD_FAST[0m(1, hidden_states) 
125: [33mBUILD_TUPLE[0m(1, 1) 
126: [33mSTORE_FAST[0m(9, outputs) 
127: [33mLOAD_FAST[0m(4, output_attentions) 
128: [32mEXTENDED_ARG[0m(1, 1) 
129: [33mPOP_JUMP_IF_FALSE[0m(270, 270)  -> inst 135
130: [33mLOAD_FAST[0m(9, outputs) 
131: [33mLOAD_FAST[0m(6, attn_weights) 
132: [33mBUILD_TUPLE[0m(1, 1) 
133: [33mINPLACE_ADD[0m(None, None) 
134: [33mSTORE_FAST[0m(9, outputs) 
135: [33mLOAD_FAST[0m(9, outputs) 
136: [32mEXTENDED_ARG[0m(1, 1) 
137: [32mJUMP_ABSOLUTE[0m(304, 304)  -> inst 152
138: [32mLOAD_GLOBAL[0m(21, guard_match) 
139: [32mLOAD_CONST[0m(5, 5) 
140: [32mLOAD_CONST[0m(6, 0) 
141: [32mLOAD_GLOBAL[0m(20, locals) 
142: [32mCALL_FUNCTION[0m(0, 0) 
143: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
144: [32mUNPACK_SEQUENCE[0m(2, 2) 
145: [32mSTORE_FAST[0m(11, __case_idx) 
146: [32mSTORE_FAST[0m(10, __graph_fn) 
147: [32mLOAD_GLOBAL[0m(22, enable_trace) 
148: [32mLOAD_CONST[0m(5, 5) 
149: [32mCALL_FUNCTION[0m(1, 1) 
150: [32mPOP_TOP[0m(None, None) 
151: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
152: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=5(0x6895f00)
push tracker due to record
push tracker 5 frame 0x6895f00 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=5(0x6895f00)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=5(0x6895f00)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5] frame_id 5
enable_trace
push tracker 5 frame 0x6895f00 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
tracing opcode POP_TOP None pc=300 frame=5(0x6895f00)
process last instruction done
restart: running injected code (f_lasti=300)
tracing opcode JUMP_ABSOLUTE None pc=302 frame=5(0x6895f00)
process last instruction done
restart: running injected code (f_lasti=302)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=14 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=16 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=18 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=22 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=24 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=26 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=28 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=30 frame=5(0x6895f00)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 6 0x6825f10 forward
0: [33mLOAD_FAST[0m(2, key_value_states) 
1: [33mLOAD_CONST[0m(1, None) 
2: [33mIS_OP[0m(1, 1) 
3: [33mSTORE_FAST[0m(7, is_cross_attention) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_METHOD[0m(0, size) 
6: [33mCALL_METHOD[0m(0, 0) 
7: [33mUNPACK_SEQUENCE[0m(3, 3) 
8: [33mSTORE_FAST[0m(8, bsz) 
9: [33mSTORE_FAST[0m(9, tgt_len) 
10: [33mSTORE_FAST[0m(10, _) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_METHOD[0m(1, q_proj) 
13: [33mLOAD_FAST[0m(1, hidden_states) 
14: [33mCALL_METHOD[0m(1, 1) 
15: [33mLOAD_FAST[0m(0, self) 
16: [33mLOAD_ATTR[0m(2, scaling) 
17: [33mBINARY_MULTIPLY[0m(None, None) 
18: [33mSTORE_FAST[0m(11, query_states) 
19: [33mLOAD_FAST[0m(7, is_cross_attention) 
20: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
21: [33mLOAD_FAST[0m(3, past_key_value) 
22: [33mLOAD_CONST[0m(1, None) 
23: [33mIS_OP[0m(1, 1) 
24: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
25: [33mLOAD_FAST[0m(3, past_key_value) 
26: [33mLOAD_CONST[0m(2, 0) 
27: [33mBINARY_SUBSCR[0m(None, None) 
28: [33mLOAD_ATTR[0m(3, shape) 
29: [33mLOAD_CONST[0m(3, 2) 
30: [33mBINARY_SUBSCR[0m(None, None) 
31: [33mLOAD_FAST[0m(2, key_value_states) 
32: [33mLOAD_ATTR[0m(3, shape) 
33: [33mLOAD_CONST[0m(4, 1) 
34: [33mBINARY_SUBSCR[0m(None, None) 
35: [33mCOMPARE_OP[0m(2, ==) 
36: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
37: [33mLOAD_FAST[0m(3, past_key_value) 
38: [33mLOAD_CONST[0m(2, 0) 
39: [33mBINARY_SUBSCR[0m(None, None) 
40: [33mSTORE_FAST[0m(12, key_states) 
41: [33mLOAD_FAST[0m(3, past_key_value) 
42: [33mLOAD_CONST[0m(4, 1) 
43: [33mBINARY_SUBSCR[0m(None, None) 
44: [33mSTORE_FAST[0m(13, value_states) 
45: [33mJUMP_FORWARD[0m(180, 272)  -> inst 136
46: [33mLOAD_FAST[0m(7, is_cross_attention) 
47: [33mPOP_JUMP_IF_FALSE[0m(138, 138)  -> inst 69
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_METHOD[0m(4, _shape) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_METHOD[0m(5, k_proj) 
52: [33mLOAD_FAST[0m(2, key_value_states) 
53: [33mCALL_METHOD[0m(1, 1) 
54: [33mLOAD_CONST[0m(5, -1) 
55: [33mLOAD_FAST[0m(8, bsz) 
56: [33mCALL_METHOD[0m(3, 3) 
57: [33mSTORE_FAST[0m(12, key_states) 
58: [33mLOAD_FAST[0m(0, self) 
59: [33mLOAD_METHOD[0m(4, _shape) 
60: [33mLOAD_FAST[0m(0, self) 
61: [33mLOAD_METHOD[0m(6, v_proj) 
62: [33mLOAD_FAST[0m(2, key_value_states) 
63: [33mCALL_METHOD[0m(1, 1) 
64: [33mLOAD_CONST[0m(5, -1) 
65: [33mLOAD_FAST[0m(8, bsz) 
66: [33mCALL_METHOD[0m(3, 3) 
67: [33mSTORE_FAST[0m(13, value_states) 
68: [33mJUMP_FORWARD[0m(134, 272)  -> inst 136
69: [33mLOAD_FAST[0m(3, past_key_value) 
70: [33mLOAD_CONST[0m(1, None) 
71: [33mIS_OP[0m(1, 1) 
72: [33mPOP_JUMP_IF_FALSE[0m(232, 232)  -> inst 116
73: [33mLOAD_FAST[0m(0, self) 
74: [33mLOAD_METHOD[0m(4, _shape) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(5, k_proj) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mLOAD_CONST[0m(5, -1) 
80: [33mLOAD_FAST[0m(8, bsz) 
81: [33mCALL_METHOD[0m(3, 3) 
82: [33mSTORE_FAST[0m(12, key_states) 
83: [33mLOAD_FAST[0m(0, self) 
84: [33mLOAD_METHOD[0m(4, _shape) 
85: [33mLOAD_FAST[0m(0, self) 
86: [33mLOAD_METHOD[0m(6, v_proj) 
87: [33mLOAD_FAST[0m(1, hidden_states) 
88: [33mCALL_METHOD[0m(1, 1) 
89: [33mLOAD_CONST[0m(5, -1) 
90: [33mLOAD_FAST[0m(8, bsz) 
91: [33mCALL_METHOD[0m(3, 3) 
92: [33mSTORE_FAST[0m(13, value_states) 
93: [33mLOAD_GLOBAL[0m(7, torch) 
94: [33mLOAD_ATTR[0m(8, cat) 
95: [33mLOAD_FAST[0m(3, past_key_value) 
96: [33mLOAD_CONST[0m(2, 0) 
97: [33mBINARY_SUBSCR[0m(None, None) 
98: [33mLOAD_FAST[0m(12, key_states) 
99: [33mBUILD_LIST[0m(2, 2) 
100: [33mLOAD_CONST[0m(3, 2) 
101: [33mLOAD_CONST[0m(6, ('dim',)) 
102: [33mCALL_FUNCTION_KW[0m(2, 2) 
103: [33mSTORE_FAST[0m(12, key_states) 
104: [33mLOAD_GLOBAL[0m(7, torch) 
105: [33mLOAD_ATTR[0m(8, cat) 
106: [33mLOAD_FAST[0m(3, past_key_value) 
107: [33mLOAD_CONST[0m(4, 1) 
108: [33mBINARY_SUBSCR[0m(None, None) 
109: [33mLOAD_FAST[0m(13, value_states) 
110: [33mBUILD_LIST[0m(2, 2) 
111: [33mLOAD_CONST[0m(3, 2) 
112: [33mLOAD_CONST[0m(6, ('dim',)) 
113: [33mCALL_FUNCTION_KW[0m(2, 2) 
114: [33mSTORE_FAST[0m(13, value_states) 
115: [33mJUMP_FORWARD[0m(40, 272)  -> inst 136
116: [33mLOAD_FAST[0m(0, self) 
117: [33mLOAD_METHOD[0m(4, _shape) 
118: [33mLOAD_FAST[0m(0, self) 
119: [33mLOAD_METHOD[0m(5, k_proj) 
120: [33mLOAD_FAST[0m(1, hidden_states) 
121: [33mCALL_METHOD[0m(1, 1) 
122: [33mLOAD_CONST[0m(5, -1) 
123: [33mLOAD_FAST[0m(8, bsz) 
124: [33mCALL_METHOD[0m(3, 3) 
125: [33mSTORE_FAST[0m(12, key_states) 
126: [33mLOAD_FAST[0m(0, self) 
127: [33mLOAD_METHOD[0m(4, _shape) 
128: [33mLOAD_FAST[0m(0, self) 
129: [33mLOAD_METHOD[0m(6, v_proj) 
130: [33mLOAD_FAST[0m(1, hidden_states) 
131: [33mCALL_METHOD[0m(1, 1) 
132: [33mLOAD_CONST[0m(5, -1) 
133: [33mLOAD_FAST[0m(8, bsz) 
134: [33mCALL_METHOD[0m(3, 3) 
135: [33mSTORE_FAST[0m(13, value_states) 
136: [33mLOAD_FAST[0m(0, self) 
137: [33mLOAD_ATTR[0m(9, is_decoder) 
138: [33mEXTENDED_ARG[0m(1, 1) 
139: [33mPOP_JUMP_IF_FALSE[0m(288, 288)  -> inst 144
140: [33mLOAD_FAST[0m(12, key_states) 
141: [33mLOAD_FAST[0m(13, value_states) 
142: [33mBUILD_TUPLE[0m(2, 2) 
143: [33mSTORE_FAST[0m(3, past_key_value) 
144: [33mLOAD_FAST[0m(8, bsz) 
145: [33mLOAD_FAST[0m(0, self) 
146: [33mLOAD_ATTR[0m(10, num_heads) 
147: [33mBINARY_MULTIPLY[0m(None, None) 
148: [33mLOAD_CONST[0m(5, -1) 
149: [33mLOAD_FAST[0m(0, self) 
150: [33mLOAD_ATTR[0m(11, head_dim) 
151: [33mBUILD_TUPLE[0m(3, 3) 
152: [33mSTORE_FAST[0m(14, proj_shape) 
153: [33mLOAD_FAST[0m(0, self) 
154: [33mLOAD_METHOD[0m(4, _shape) 
155: [33mLOAD_FAST[0m(11, query_states) 
156: [33mLOAD_FAST[0m(9, tgt_len) 
157: [33mLOAD_FAST[0m(8, bsz) 
158: [33mCALL_METHOD[0m(3, 3) 
159: [33mLOAD_ATTR[0m(12, view) 
160: [33mLOAD_FAST[0m(14, proj_shape) 
161: [33mCALL_FUNCTION_EX[0m(0, 0) 
162: [33mSTORE_FAST[0m(11, query_states) 
163: [33mLOAD_FAST[0m(12, key_states) 
164: [33mLOAD_ATTR[0m(13, reshape) 
165: [33mLOAD_FAST[0m(14, proj_shape) 
166: [33mCALL_FUNCTION_EX[0m(0, 0) 
167: [33mSTORE_FAST[0m(12, key_states) 
168: [33mLOAD_FAST[0m(13, value_states) 
169: [33mLOAD_ATTR[0m(13, reshape) 
170: [33mLOAD_FAST[0m(14, proj_shape) 
171: [33mCALL_FUNCTION_EX[0m(0, 0) 
172: [33mSTORE_FAST[0m(13, value_states) 
173: [33mLOAD_FAST[0m(12, key_states) 
174: [33mLOAD_METHOD[0m(0, size) 
175: [33mLOAD_CONST[0m(4, 1) 
176: [33mCALL_METHOD[0m(1, 1) 
177: [33mSTORE_FAST[0m(15, src_len) 
178: [33mLOAD_GLOBAL[0m(7, torch) 
179: [33mLOAD_METHOD[0m(14, bmm) 
180: [33mLOAD_FAST[0m(11, query_states) 
181: [33mLOAD_FAST[0m(12, key_states) 
182: [33mLOAD_METHOD[0m(15, transpose) 
183: [33mLOAD_CONST[0m(4, 1) 
184: [33mLOAD_CONST[0m(3, 2) 
185: [33mCALL_METHOD[0m(2, 2) 
186: [33mCALL_METHOD[0m(2, 2) 
187: [33mSTORE_FAST[0m(16, attn_weights) 
188: [33mLOAD_FAST[0m(16, attn_weights) 
189: [33mLOAD_METHOD[0m(0, size) 
190: [33mCALL_METHOD[0m(0, 0) 
191: [33mLOAD_FAST[0m(8, bsz) 
192: [33mLOAD_FAST[0m(0, self) 
193: [33mLOAD_ATTR[0m(10, num_heads) 
194: [33mBINARY_MULTIPLY[0m(None, None) 
195: [33mLOAD_FAST[0m(9, tgt_len) 
196: [33mLOAD_FAST[0m(15, src_len) 
197: [33mBUILD_TUPLE[0m(3, 3) 
198: [33mCOMPARE_OP[0m(3, !=) 
199: [33mEXTENDED_ARG[0m(1, 1) 
200: [33mPOP_JUMP_IF_FALSE[0m(438, 438)  -> inst 219
201: [33mLOAD_GLOBAL[0m(16, ValueError) 
202: [33mLOAD_CONST[0m(7, Attention weights should be of size ) 
203: [33mLOAD_FAST[0m(8, bsz) 
204: [33mLOAD_FAST[0m(0, self) 
205: [33mLOAD_ATTR[0m(10, num_heads) 
206: [33mBINARY_MULTIPLY[0m(None, None) 
207: [33mLOAD_FAST[0m(9, tgt_len) 
208: [33mLOAD_FAST[0m(15, src_len) 
209: [33mBUILD_TUPLE[0m(3, 3) 
210: [33mFORMAT_VALUE[0m(0, (None, False)) 
211: [33mLOAD_CONST[0m(8, , but is ) 
212: [33mLOAD_FAST[0m(16, attn_weights) 
213: [33mLOAD_METHOD[0m(0, size) 
214: [33mCALL_METHOD[0m(0, 0) 
215: [33mFORMAT_VALUE[0m(0, (None, False)) 
216: [33mBUILD_STRING[0m(4, 4) 
217: [33mCALL_FUNCTION[0m(1, 1) 
218: [33mRAISE_VARARGS[0m(1, 1) 
219: [33mLOAD_FAST[0m(4, attention_mask) 
220: [33mLOAD_CONST[0m(1, None) 
221: [33mIS_OP[0m(1, 1) 
222: [33mEXTENDED_ARG[0m(2, 2) 
223: [33mPOP_JUMP_IF_FALSE[0m(544, 544)  -> inst 272
224: [33mLOAD_FAST[0m(4, attention_mask) 
225: [33mLOAD_METHOD[0m(0, size) 
226: [33mCALL_METHOD[0m(0, 0) 
227: [33mLOAD_FAST[0m(8, bsz) 
228: [33mLOAD_CONST[0m(4, 1) 
229: [33mLOAD_FAST[0m(9, tgt_len) 
230: [33mLOAD_FAST[0m(15, src_len) 
231: [33mBUILD_TUPLE[0m(4, 4) 
232: [33mCOMPARE_OP[0m(3, !=) 
233: [33mEXTENDED_ARG[0m(1, 1) 
234: [33mPOP_JUMP_IF_FALSE[0m(502, 502)  -> inst 251
235: [33mLOAD_GLOBAL[0m(16, ValueError) 
236: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
237: [33mLOAD_FAST[0m(8, bsz) 
238: [33mLOAD_CONST[0m(4, 1) 
239: [33mLOAD_FAST[0m(9, tgt_len) 
240: [33mLOAD_FAST[0m(15, src_len) 
241: [33mBUILD_TUPLE[0m(4, 4) 
242: [33mFORMAT_VALUE[0m(0, (None, False)) 
243: [33mLOAD_CONST[0m(8, , but is ) 
244: [33mLOAD_FAST[0m(4, attention_mask) 
245: [33mLOAD_METHOD[0m(0, size) 
246: [33mCALL_METHOD[0m(0, 0) 
247: [33mFORMAT_VALUE[0m(0, (None, False)) 
248: [33mBUILD_STRING[0m(4, 4) 
249: [33mCALL_FUNCTION[0m(1, 1) 
250: [33mRAISE_VARARGS[0m(1, 1) 
251: [33mLOAD_FAST[0m(16, attn_weights) 
252: [33mLOAD_METHOD[0m(12, view) 
253: [33mLOAD_FAST[0m(8, bsz) 
254: [33mLOAD_FAST[0m(0, self) 
255: [33mLOAD_ATTR[0m(10, num_heads) 
256: [33mLOAD_FAST[0m(9, tgt_len) 
257: [33mLOAD_FAST[0m(15, src_len) 
258: [33mCALL_METHOD[0m(4, 4) 
259: [33mLOAD_FAST[0m(4, attention_mask) 
260: [33mBINARY_ADD[0m(None, None) 
261: [33mSTORE_FAST[0m(16, attn_weights) 
262: [33mLOAD_FAST[0m(16, attn_weights) 
263: [33mLOAD_METHOD[0m(12, view) 
264: [33mLOAD_FAST[0m(8, bsz) 
265: [33mLOAD_FAST[0m(0, self) 
266: [33mLOAD_ATTR[0m(10, num_heads) 
267: [33mBINARY_MULTIPLY[0m(None, None) 
268: [33mLOAD_FAST[0m(9, tgt_len) 
269: [33mLOAD_FAST[0m(15, src_len) 
270: [33mCALL_METHOD[0m(3, 3) 
271: [33mSTORE_FAST[0m(16, attn_weights) 
272: [33mLOAD_GLOBAL[0m(17, nn) 
273: [33mLOAD_ATTR[0m(18, functional) 
274: [33mLOAD_ATTR[0m(19, softmax) 
275: [33mLOAD_FAST[0m(16, attn_weights) 
276: [33mLOAD_CONST[0m(5, -1) 
277: [33mLOAD_CONST[0m(6, ('dim',)) 
278: [33mCALL_FUNCTION_KW[0m(2, 2) 
279: [33mSTORE_FAST[0m(16, attn_weights) 
280: [33mLOAD_FAST[0m(5, layer_head_mask) 
281: [33mLOAD_CONST[0m(1, None) 
282: [33mIS_OP[0m(1, 1) 
283: [33mEXTENDED_ARG[0m(2, 2) 
284: [33mPOP_JUMP_IF_FALSE[0m(670, 670)  -> inst 335
285: [33mLOAD_FAST[0m(5, layer_head_mask) 
286: [33mLOAD_METHOD[0m(0, size) 
287: [33mCALL_METHOD[0m(0, 0) 
288: [33mLOAD_FAST[0m(0, self) 
289: [33mLOAD_ATTR[0m(10, num_heads) 
290: [33mBUILD_TUPLE[0m(1, 1) 
291: [33mCOMPARE_OP[0m(3, !=) 
292: [33mEXTENDED_ARG[0m(2, 2) 
293: [33mPOP_JUMP_IF_FALSE[0m(616, 616)  -> inst 308
294: [33mLOAD_GLOBAL[0m(16, ValueError) 
295: [33mLOAD_CONST[0m(10, Head mask for a single layer should be of size ) 
296: [33mLOAD_FAST[0m(0, self) 
297: [33mLOAD_ATTR[0m(10, num_heads) 
298: [33mBUILD_TUPLE[0m(1, 1) 
299: [33mFORMAT_VALUE[0m(0, (None, False)) 
300: [33mLOAD_CONST[0m(8, , but is ) 
301: [33mLOAD_FAST[0m(5, layer_head_mask) 
302: [33mLOAD_METHOD[0m(0, size) 
303: [33mCALL_METHOD[0m(0, 0) 
304: [33mFORMAT_VALUE[0m(0, (None, False)) 
305: [33mBUILD_STRING[0m(4, 4) 
306: [33mCALL_FUNCTION[0m(1, 1) 
307: [33mRAISE_VARARGS[0m(1, 1) 
308: [33mLOAD_FAST[0m(5, layer_head_mask) 
309: [33mLOAD_METHOD[0m(12, view) 
310: [33mLOAD_CONST[0m(4, 1) 
311: [33mLOAD_CONST[0m(5, -1) 
312: [33mLOAD_CONST[0m(4, 1) 
313: [33mLOAD_CONST[0m(4, 1) 
314: [33mCALL_METHOD[0m(4, 4) 
315: [33mLOAD_FAST[0m(16, attn_weights) 
316: [33mLOAD_METHOD[0m(12, view) 
317: [33mLOAD_FAST[0m(8, bsz) 
318: [33mLOAD_FAST[0m(0, self) 
319: [33mLOAD_ATTR[0m(10, num_heads) 
320: [33mLOAD_FAST[0m(9, tgt_len) 
321: [33mLOAD_FAST[0m(15, src_len) 
322: [33mCALL_METHOD[0m(4, 4) 
323: [33mBINARY_MULTIPLY[0m(None, None) 
324: [33mSTORE_FAST[0m(16, attn_weights) 
325: [33mLOAD_FAST[0m(16, attn_weights) 
326: [33mLOAD_METHOD[0m(12, view) 
327: [33mLOAD_FAST[0m(8, bsz) 
328: [33mLOAD_FAST[0m(0, self) 
329: [33mLOAD_ATTR[0m(10, num_heads) 
330: [33mBINARY_MULTIPLY[0m(None, None) 
331: [33mLOAD_FAST[0m(9, tgt_len) 
332: [33mLOAD_FAST[0m(15, src_len) 
333: [33mCALL_METHOD[0m(3, 3) 
334: [33mSTORE_FAST[0m(16, attn_weights) 
335: [33mLOAD_FAST[0m(6, output_attentions) 
336: [33mEXTENDED_ARG[0m(2, 2) 
337: [33mPOP_JUMP_IF_FALSE[0m(716, 716)  -> inst 358
338: [33mLOAD_FAST[0m(16, attn_weights) 
339: [33mLOAD_METHOD[0m(12, view) 
340: [33mLOAD_FAST[0m(8, bsz) 
341: [33mLOAD_FAST[0m(0, self) 
342: [33mLOAD_ATTR[0m(10, num_heads) 
343: [33mLOAD_FAST[0m(9, tgt_len) 
344: [33mLOAD_FAST[0m(15, src_len) 
345: [33mCALL_METHOD[0m(4, 4) 
346: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
347: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
348: [33mLOAD_METHOD[0m(12, view) 
349: [33mLOAD_FAST[0m(8, bsz) 
350: [33mLOAD_FAST[0m(0, self) 
351: [33mLOAD_ATTR[0m(10, num_heads) 
352: [33mBINARY_MULTIPLY[0m(None, None) 
353: [33mLOAD_FAST[0m(9, tgt_len) 
354: [33mLOAD_FAST[0m(15, src_len) 
355: [33mCALL_METHOD[0m(3, 3) 
356: [33mSTORE_FAST[0m(16, attn_weights) 
357: [33mJUMP_FORWARD[0m(4, 720)  -> inst 360
358: [33mLOAD_CONST[0m(1, None) 
359: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
360: [33mLOAD_GLOBAL[0m(17, nn) 
361: [33mLOAD_ATTR[0m(18, functional) 
362: [33mLOAD_ATTR[0m(20, dropout) 
363: [33mLOAD_FAST[0m(16, attn_weights) 
364: [33mLOAD_FAST[0m(0, self) 
365: [33mLOAD_ATTR[0m(20, dropout) 
366: [33mLOAD_FAST[0m(0, self) 
367: [33mLOAD_ATTR[0m(21, training) 
368: [33mLOAD_CONST[0m(11, ('p', 'training')) 
369: [33mCALL_FUNCTION_KW[0m(3, 3) 
370: [33mSTORE_FAST[0m(18, attn_probs) 
371: [33mLOAD_GLOBAL[0m(7, torch) 
372: [33mLOAD_METHOD[0m(14, bmm) 
373: [33mLOAD_FAST[0m(18, attn_probs) 
374: [33mLOAD_FAST[0m(13, value_states) 
375: [33mCALL_METHOD[0m(2, 2) 
376: [33mSTORE_FAST[0m(19, attn_output) 
377: [33mLOAD_FAST[0m(19, attn_output) 
378: [33mLOAD_METHOD[0m(0, size) 
379: [33mCALL_METHOD[0m(0, 0) 
380: [33mLOAD_FAST[0m(8, bsz) 
381: [33mLOAD_FAST[0m(0, self) 
382: [33mLOAD_ATTR[0m(10, num_heads) 
383: [33mBINARY_MULTIPLY[0m(None, None) 
384: [33mLOAD_FAST[0m(9, tgt_len) 
385: [33mLOAD_FAST[0m(0, self) 
386: [33mLOAD_ATTR[0m(11, head_dim) 
387: [33mBUILD_TUPLE[0m(3, 3) 
388: [33mCOMPARE_OP[0m(3, !=) 
389: [33mEXTENDED_ARG[0m(3, 3) 
390: [33mPOP_JUMP_IF_FALSE[0m(820, 820)  -> inst 410
391: [33mLOAD_GLOBAL[0m(16, ValueError) 
392: [33mLOAD_CONST[0m(12, `attn_output` should be of size ) 
393: [33mLOAD_FAST[0m(8, bsz) 
394: [33mLOAD_FAST[0m(0, self) 
395: [33mLOAD_ATTR[0m(10, num_heads) 
396: [33mBINARY_MULTIPLY[0m(None, None) 
397: [33mLOAD_FAST[0m(9, tgt_len) 
398: [33mLOAD_FAST[0m(0, self) 
399: [33mLOAD_ATTR[0m(11, head_dim) 
400: [33mBUILD_TUPLE[0m(3, 3) 
401: [33mFORMAT_VALUE[0m(0, (None, False)) 
402: [33mLOAD_CONST[0m(8, , but is ) 
403: [33mLOAD_FAST[0m(19, attn_output) 
404: [33mLOAD_METHOD[0m(0, size) 
405: [33mCALL_METHOD[0m(0, 0) 
406: [33mFORMAT_VALUE[0m(0, (None, False)) 
407: [33mBUILD_STRING[0m(4, 4) 
408: [33mCALL_FUNCTION[0m(1, 1) 
409: [33mRAISE_VARARGS[0m(1, 1) 
410: [33mLOAD_FAST[0m(19, attn_output) 
411: [33mLOAD_METHOD[0m(12, view) 
412: [33mLOAD_FAST[0m(8, bsz) 
413: [33mLOAD_FAST[0m(0, self) 
414: [33mLOAD_ATTR[0m(10, num_heads) 
415: [33mLOAD_FAST[0m(9, tgt_len) 
416: [33mLOAD_FAST[0m(0, self) 
417: [33mLOAD_ATTR[0m(11, head_dim) 
418: [33mCALL_METHOD[0m(4, 4) 
419: [33mSTORE_FAST[0m(19, attn_output) 
420: [33mLOAD_FAST[0m(19, attn_output) 
421: [33mLOAD_METHOD[0m(15, transpose) 
422: [33mLOAD_CONST[0m(4, 1) 
423: [33mLOAD_CONST[0m(3, 2) 
424: [33mCALL_METHOD[0m(2, 2) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(13, reshape) 
428: [33mLOAD_FAST[0m(8, bsz) 
429: [33mLOAD_FAST[0m(9, tgt_len) 
430: [33mLOAD_FAST[0m(0, self) 
431: [33mLOAD_ATTR[0m(22, embed_dim) 
432: [33mCALL_METHOD[0m(3, 3) 
433: [33mSTORE_FAST[0m(19, attn_output) 
434: [33mLOAD_FAST[0m(0, self) 
435: [33mLOAD_METHOD[0m(23, out_proj) 
436: [33mLOAD_FAST[0m(19, attn_output) 
437: [33mCALL_METHOD[0m(1, 1) 
438: [33mSTORE_FAST[0m(19, attn_output) 
439: [33mLOAD_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
441: [33mLOAD_FAST[0m(3, past_key_value) 
442: [33mBUILD_TUPLE[0m(3, 3) 
443: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('dim',)), (<class 'int'>, 2), (<class 'int'>, -1), (<class 'str'>, '`attn_output` should be of size '), (<class 'str'>, 'Input shape: Batch x Time x Channel'), (<class 'int'>, 1), (<class 'str'>, 'Head mask for a single layer should be of size '), (<class 'int'>, 0), (<class 'str'>, ', but is '), (<class 'str'>, 'Attention mask should be of size '), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, 'Attention weights should be of size '), (<class 'NoneType'>, None), (<class 'int'>, 6)]
guarded code
0: [32mLOAD_GLOBAL[0m(28, disable_trace) 
1: [32mLOAD_CONST[0m(13, 6) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(3, 3) 
5: [32mJUMP_ABSOLUTE[0m(902, 902)  -> inst 451
6: [33mLOAD_FAST[0m(2, key_value_states) 
7: [33mLOAD_CONST[0m(12, None) 
8: [33mIS_OP[0m(1, 1) 
9: [33mSTORE_FAST[0m(7, is_cross_attention) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_METHOD[0m(0, size) 
12: [33mCALL_METHOD[0m(0, 0) 
13: [33mUNPACK_SEQUENCE[0m(3, 3) 
14: [33mSTORE_FAST[0m(8, bsz) 
15: [33mSTORE_FAST[0m(9, tgt_len) 
16: [33mSTORE_FAST[0m(10, _) 
17: [33mLOAD_FAST[0m(0, self) 
18: [33mLOAD_METHOD[0m(1, q_proj) 
19: [33mLOAD_FAST[0m(1, hidden_states) 
20: [33mCALL_METHOD[0m(1, 1) 
21: [33mLOAD_FAST[0m(0, self) 
22: [33mLOAD_ATTR[0m(2, scaling) 
23: [33mBINARY_MULTIPLY[0m(None, None) 
24: [33mSTORE_FAST[0m(11, query_states) 
25: [33mLOAD_FAST[0m(7, is_cross_attention) 
26: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
27: [33mLOAD_FAST[0m(3, past_key_value) 
28: [33mLOAD_CONST[0m(12, None) 
29: [33mIS_OP[0m(1, 1) 
30: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
31: [33mLOAD_FAST[0m(3, past_key_value) 
32: [33mLOAD_CONST[0m(7, 0) 
33: [33mBINARY_SUBSCR[0m(None, None) 
34: [33mLOAD_ATTR[0m(3, shape) 
35: [33mLOAD_CONST[0m(1, 2) 
36: [33mBINARY_SUBSCR[0m(None, None) 
37: [33mLOAD_FAST[0m(2, key_value_states) 
38: [33mLOAD_ATTR[0m(3, shape) 
39: [33mLOAD_CONST[0m(5, 1) 
40: [33mBINARY_SUBSCR[0m(None, None) 
41: [33mCOMPARE_OP[0m(2, ==) 
42: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
43: [33mLOAD_FAST[0m(3, past_key_value) 
44: [33mLOAD_CONST[0m(7, 0) 
45: [33mBINARY_SUBSCR[0m(None, None) 
46: [33mSTORE_FAST[0m(12, key_states) 
47: [33mLOAD_FAST[0m(3, past_key_value) 
48: [33mLOAD_CONST[0m(5, 1) 
49: [33mBINARY_SUBSCR[0m(None, None) 
50: [33mSTORE_FAST[0m(13, value_states) 
51: [33mJUMP_FORWARD[0m(180, 284)  -> inst 142
52: [33mLOAD_FAST[0m(7, is_cross_attention) 
53: [33mPOP_JUMP_IF_FALSE[0m(150, 150)  -> inst 75
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_METHOD[0m(4, _shape) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_METHOD[0m(5, k_proj) 
58: [33mLOAD_FAST[0m(2, key_value_states) 
59: [33mCALL_METHOD[0m(1, 1) 
60: [33mLOAD_CONST[0m(2, -1) 
61: [33mLOAD_FAST[0m(8, bsz) 
62: [33mCALL_METHOD[0m(3, 3) 
63: [33mSTORE_FAST[0m(12, key_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_METHOD[0m(4, _shape) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_METHOD[0m(6, v_proj) 
68: [33mLOAD_FAST[0m(2, key_value_states) 
69: [33mCALL_METHOD[0m(1, 1) 
70: [33mLOAD_CONST[0m(2, -1) 
71: [33mLOAD_FAST[0m(8, bsz) 
72: [33mCALL_METHOD[0m(3, 3) 
73: [33mSTORE_FAST[0m(13, value_states) 
74: [33mJUMP_FORWARD[0m(134, 284)  -> inst 142
75: [33mLOAD_FAST[0m(3, past_key_value) 
76: [33mLOAD_CONST[0m(12, None) 
77: [33mIS_OP[0m(1, 1) 
78: [33mPOP_JUMP_IF_FALSE[0m(244, 244)  -> inst 122
79: [33mLOAD_FAST[0m(0, self) 
80: [33mLOAD_METHOD[0m(4, _shape) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(5, k_proj) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mLOAD_CONST[0m(2, -1) 
86: [33mLOAD_FAST[0m(8, bsz) 
87: [33mCALL_METHOD[0m(3, 3) 
88: [33mSTORE_FAST[0m(12, key_states) 
89: [33mLOAD_FAST[0m(0, self) 
90: [33mLOAD_METHOD[0m(4, _shape) 
91: [33mLOAD_FAST[0m(0, self) 
92: [33mLOAD_METHOD[0m(6, v_proj) 
93: [33mLOAD_FAST[0m(1, hidden_states) 
94: [33mCALL_METHOD[0m(1, 1) 
95: [33mLOAD_CONST[0m(2, -1) 
96: [33mLOAD_FAST[0m(8, bsz) 
97: [33mCALL_METHOD[0m(3, 3) 
98: [33mSTORE_FAST[0m(13, value_states) 
99: [33mLOAD_GLOBAL[0m(7, torch) 
100: [33mLOAD_ATTR[0m(8, cat) 
101: [33mLOAD_FAST[0m(3, past_key_value) 
102: [33mLOAD_CONST[0m(7, 0) 
103: [33mBINARY_SUBSCR[0m(None, None) 
104: [33mLOAD_FAST[0m(12, key_states) 
105: [33mBUILD_LIST[0m(2, 2) 
106: [33mLOAD_CONST[0m(1, 2) 
107: [33mLOAD_CONST[0m(0, ('dim',)) 
108: [33mCALL_FUNCTION_KW[0m(2, 2) 
109: [33mSTORE_FAST[0m(12, key_states) 
110: [33mLOAD_GLOBAL[0m(7, torch) 
111: [33mLOAD_ATTR[0m(8, cat) 
112: [33mLOAD_FAST[0m(3, past_key_value) 
113: [33mLOAD_CONST[0m(5, 1) 
114: [33mBINARY_SUBSCR[0m(None, None) 
115: [33mLOAD_FAST[0m(13, value_states) 
116: [33mBUILD_LIST[0m(2, 2) 
117: [33mLOAD_CONST[0m(1, 2) 
118: [33mLOAD_CONST[0m(0, ('dim',)) 
119: [33mCALL_FUNCTION_KW[0m(2, 2) 
120: [33mSTORE_FAST[0m(13, value_states) 
121: [33mJUMP_FORWARD[0m(40, 284)  -> inst 142
122: [33mLOAD_FAST[0m(0, self) 
123: [33mLOAD_METHOD[0m(4, _shape) 
124: [33mLOAD_FAST[0m(0, self) 
125: [33mLOAD_METHOD[0m(5, k_proj) 
126: [33mLOAD_FAST[0m(1, hidden_states) 
127: [33mCALL_METHOD[0m(1, 1) 
128: [33mLOAD_CONST[0m(2, -1) 
129: [33mLOAD_FAST[0m(8, bsz) 
130: [33mCALL_METHOD[0m(3, 3) 
131: [33mSTORE_FAST[0m(12, key_states) 
132: [33mLOAD_FAST[0m(0, self) 
133: [33mLOAD_METHOD[0m(4, _shape) 
134: [33mLOAD_FAST[0m(0, self) 
135: [33mLOAD_METHOD[0m(6, v_proj) 
136: [33mLOAD_FAST[0m(1, hidden_states) 
137: [33mCALL_METHOD[0m(1, 1) 
138: [33mLOAD_CONST[0m(2, -1) 
139: [33mLOAD_FAST[0m(8, bsz) 
140: [33mCALL_METHOD[0m(3, 3) 
141: [33mSTORE_FAST[0m(13, value_states) 
142: [33mLOAD_FAST[0m(0, self) 
143: [33mLOAD_ATTR[0m(9, is_decoder) 
144: [32mEXTENDED_ARG[0m(1, 1) 
145: [33mPOP_JUMP_IF_FALSE[0m(300, 300)  -> inst 150
146: [33mLOAD_FAST[0m(12, key_states) 
147: [33mLOAD_FAST[0m(13, value_states) 
148: [33mBUILD_TUPLE[0m(2, 2) 
149: [33mSTORE_FAST[0m(3, past_key_value) 
150: [33mLOAD_FAST[0m(8, bsz) 
151: [33mLOAD_FAST[0m(0, self) 
152: [33mLOAD_ATTR[0m(10, num_heads) 
153: [33mBINARY_MULTIPLY[0m(None, None) 
154: [33mLOAD_CONST[0m(2, -1) 
155: [33mLOAD_FAST[0m(0, self) 
156: [33mLOAD_ATTR[0m(11, head_dim) 
157: [33mBUILD_TUPLE[0m(3, 3) 
158: [33mSTORE_FAST[0m(14, proj_shape) 
159: [33mLOAD_FAST[0m(0, self) 
160: [33mLOAD_METHOD[0m(4, _shape) 
161: [33mLOAD_FAST[0m(11, query_states) 
162: [33mLOAD_FAST[0m(9, tgt_len) 
163: [33mLOAD_FAST[0m(8, bsz) 
164: [33mCALL_METHOD[0m(3, 3) 
165: [33mLOAD_ATTR[0m(12, view) 
166: [33mLOAD_FAST[0m(14, proj_shape) 
167: [33mCALL_FUNCTION_EX[0m(0, 0) 
168: [33mSTORE_FAST[0m(11, query_states) 
169: [33mLOAD_FAST[0m(12, key_states) 
170: [33mLOAD_ATTR[0m(13, reshape) 
171: [33mLOAD_FAST[0m(14, proj_shape) 
172: [33mCALL_FUNCTION_EX[0m(0, 0) 
173: [33mSTORE_FAST[0m(12, key_states) 
174: [33mLOAD_FAST[0m(13, value_states) 
175: [33mLOAD_ATTR[0m(13, reshape) 
176: [33mLOAD_FAST[0m(14, proj_shape) 
177: [33mCALL_FUNCTION_EX[0m(0, 0) 
178: [33mSTORE_FAST[0m(13, value_states) 
179: [33mLOAD_FAST[0m(12, key_states) 
180: [33mLOAD_METHOD[0m(0, size) 
181: [33mLOAD_CONST[0m(5, 1) 
182: [33mCALL_METHOD[0m(1, 1) 
183: [33mSTORE_FAST[0m(15, src_len) 
184: [33mLOAD_GLOBAL[0m(7, torch) 
185: [33mLOAD_METHOD[0m(14, bmm) 
186: [33mLOAD_FAST[0m(11, query_states) 
187: [33mLOAD_FAST[0m(12, key_states) 
188: [33mLOAD_METHOD[0m(15, transpose) 
189: [33mLOAD_CONST[0m(5, 1) 
190: [33mLOAD_CONST[0m(1, 2) 
191: [33mCALL_METHOD[0m(2, 2) 
192: [33mCALL_METHOD[0m(2, 2) 
193: [33mSTORE_FAST[0m(16, attn_weights) 
194: [33mLOAD_FAST[0m(16, attn_weights) 
195: [33mLOAD_METHOD[0m(0, size) 
196: [33mCALL_METHOD[0m(0, 0) 
197: [33mLOAD_FAST[0m(8, bsz) 
198: [33mLOAD_FAST[0m(0, self) 
199: [33mLOAD_ATTR[0m(10, num_heads) 
200: [33mBINARY_MULTIPLY[0m(None, None) 
201: [33mLOAD_FAST[0m(9, tgt_len) 
202: [33mLOAD_FAST[0m(15, src_len) 
203: [33mBUILD_TUPLE[0m(3, 3) 
204: [33mCOMPARE_OP[0m(3, !=) 
205: [32mEXTENDED_ARG[0m(1, 1) 
206: [33mPOP_JUMP_IF_FALSE[0m(450, 450)  -> inst 225
207: [33mLOAD_GLOBAL[0m(16, ValueError) 
208: [33mLOAD_CONST[0m(11, Attention weights should be of size ) 
209: [33mLOAD_FAST[0m(8, bsz) 
210: [33mLOAD_FAST[0m(0, self) 
211: [33mLOAD_ATTR[0m(10, num_heads) 
212: [33mBINARY_MULTIPLY[0m(None, None) 
213: [33mLOAD_FAST[0m(9, tgt_len) 
214: [33mLOAD_FAST[0m(15, src_len) 
215: [33mBUILD_TUPLE[0m(3, 3) 
216: [33mFORMAT_VALUE[0m(0, (None, False)) 
217: [33mLOAD_CONST[0m(8, , but is ) 
218: [33mLOAD_FAST[0m(16, attn_weights) 
219: [33mLOAD_METHOD[0m(0, size) 
220: [33mCALL_METHOD[0m(0, 0) 
221: [33mFORMAT_VALUE[0m(0, (None, False)) 
222: [33mBUILD_STRING[0m(4, 4) 
223: [33mCALL_FUNCTION[0m(1, 1) 
224: [33mRAISE_VARARGS[0m(1, 1) 
225: [33mLOAD_FAST[0m(4, attention_mask) 
226: [33mLOAD_CONST[0m(12, None) 
227: [33mIS_OP[0m(1, 1) 
228: [32mEXTENDED_ARG[0m(2, 2) 
229: [33mPOP_JUMP_IF_FALSE[0m(556, 556)  -> inst 278
230: [33mLOAD_FAST[0m(4, attention_mask) 
231: [33mLOAD_METHOD[0m(0, size) 
232: [33mCALL_METHOD[0m(0, 0) 
233: [33mLOAD_FAST[0m(8, bsz) 
234: [33mLOAD_CONST[0m(5, 1) 
235: [33mLOAD_FAST[0m(9, tgt_len) 
236: [33mLOAD_FAST[0m(15, src_len) 
237: [33mBUILD_TUPLE[0m(4, 4) 
238: [33mCOMPARE_OP[0m(3, !=) 
239: [32mEXTENDED_ARG[0m(2, 2) 
240: [33mPOP_JUMP_IF_FALSE[0m(514, 514)  -> inst 257
241: [33mLOAD_GLOBAL[0m(16, ValueError) 
242: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
243: [33mLOAD_FAST[0m(8, bsz) 
244: [33mLOAD_CONST[0m(5, 1) 
245: [33mLOAD_FAST[0m(9, tgt_len) 
246: [33mLOAD_FAST[0m(15, src_len) 
247: [33mBUILD_TUPLE[0m(4, 4) 
248: [33mFORMAT_VALUE[0m(0, (None, False)) 
249: [33mLOAD_CONST[0m(8, , but is ) 
250: [33mLOAD_FAST[0m(4, attention_mask) 
251: [33mLOAD_METHOD[0m(0, size) 
252: [33mCALL_METHOD[0m(0, 0) 
253: [33mFORMAT_VALUE[0m(0, (None, False)) 
254: [33mBUILD_STRING[0m(4, 4) 
255: [33mCALL_FUNCTION[0m(1, 1) 
256: [33mRAISE_VARARGS[0m(1, 1) 
257: [33mLOAD_FAST[0m(16, attn_weights) 
258: [33mLOAD_METHOD[0m(12, view) 
259: [33mLOAD_FAST[0m(8, bsz) 
260: [33mLOAD_FAST[0m(0, self) 
261: [33mLOAD_ATTR[0m(10, num_heads) 
262: [33mLOAD_FAST[0m(9, tgt_len) 
263: [33mLOAD_FAST[0m(15, src_len) 
264: [33mCALL_METHOD[0m(4, 4) 
265: [33mLOAD_FAST[0m(4, attention_mask) 
266: [33mBINARY_ADD[0m(None, None) 
267: [33mSTORE_FAST[0m(16, attn_weights) 
268: [33mLOAD_FAST[0m(16, attn_weights) 
269: [33mLOAD_METHOD[0m(12, view) 
270: [33mLOAD_FAST[0m(8, bsz) 
271: [33mLOAD_FAST[0m(0, self) 
272: [33mLOAD_ATTR[0m(10, num_heads) 
273: [33mBINARY_MULTIPLY[0m(None, None) 
274: [33mLOAD_FAST[0m(9, tgt_len) 
275: [33mLOAD_FAST[0m(15, src_len) 
276: [33mCALL_METHOD[0m(3, 3) 
277: [33mSTORE_FAST[0m(16, attn_weights) 
278: [33mLOAD_GLOBAL[0m(17, nn) 
279: [33mLOAD_ATTR[0m(18, functional) 
280: [33mLOAD_ATTR[0m(19, softmax) 
281: [33mLOAD_FAST[0m(16, attn_weights) 
282: [33mLOAD_CONST[0m(2, -1) 
283: [33mLOAD_CONST[0m(0, ('dim',)) 
284: [33mCALL_FUNCTION_KW[0m(2, 2) 
285: [33mSTORE_FAST[0m(16, attn_weights) 
286: [33mLOAD_FAST[0m(5, layer_head_mask) 
287: [33mLOAD_CONST[0m(12, None) 
288: [33mIS_OP[0m(1, 1) 
289: [32mEXTENDED_ARG[0m(2, 2) 
290: [33mPOP_JUMP_IF_FALSE[0m(682, 682)  -> inst 341
291: [33mLOAD_FAST[0m(5, layer_head_mask) 
292: [33mLOAD_METHOD[0m(0, size) 
293: [33mCALL_METHOD[0m(0, 0) 
294: [33mLOAD_FAST[0m(0, self) 
295: [33mLOAD_ATTR[0m(10, num_heads) 
296: [33mBUILD_TUPLE[0m(1, 1) 
297: [33mCOMPARE_OP[0m(3, !=) 
298: [32mEXTENDED_ARG[0m(2, 2) 
299: [33mPOP_JUMP_IF_FALSE[0m(628, 628)  -> inst 314
300: [33mLOAD_GLOBAL[0m(16, ValueError) 
301: [33mLOAD_CONST[0m(6, Head mask for a single layer should be of size ) 
302: [33mLOAD_FAST[0m(0, self) 
303: [33mLOAD_ATTR[0m(10, num_heads) 
304: [33mBUILD_TUPLE[0m(1, 1) 
305: [33mFORMAT_VALUE[0m(0, (None, False)) 
306: [33mLOAD_CONST[0m(8, , but is ) 
307: [33mLOAD_FAST[0m(5, layer_head_mask) 
308: [33mLOAD_METHOD[0m(0, size) 
309: [33mCALL_METHOD[0m(0, 0) 
310: [33mFORMAT_VALUE[0m(0, (None, False)) 
311: [33mBUILD_STRING[0m(4, 4) 
312: [33mCALL_FUNCTION[0m(1, 1) 
313: [33mRAISE_VARARGS[0m(1, 1) 
314: [33mLOAD_FAST[0m(5, layer_head_mask) 
315: [33mLOAD_METHOD[0m(12, view) 
316: [33mLOAD_CONST[0m(5, 1) 
317: [33mLOAD_CONST[0m(2, -1) 
318: [33mLOAD_CONST[0m(5, 1) 
319: [33mLOAD_CONST[0m(5, 1) 
320: [33mCALL_METHOD[0m(4, 4) 
321: [33mLOAD_FAST[0m(16, attn_weights) 
322: [33mLOAD_METHOD[0m(12, view) 
323: [33mLOAD_FAST[0m(8, bsz) 
324: [33mLOAD_FAST[0m(0, self) 
325: [33mLOAD_ATTR[0m(10, num_heads) 
326: [33mLOAD_FAST[0m(9, tgt_len) 
327: [33mLOAD_FAST[0m(15, src_len) 
328: [33mCALL_METHOD[0m(4, 4) 
329: [33mBINARY_MULTIPLY[0m(None, None) 
330: [33mSTORE_FAST[0m(16, attn_weights) 
331: [33mLOAD_FAST[0m(16, attn_weights) 
332: [33mLOAD_METHOD[0m(12, view) 
333: [33mLOAD_FAST[0m(8, bsz) 
334: [33mLOAD_FAST[0m(0, self) 
335: [33mLOAD_ATTR[0m(10, num_heads) 
336: [33mBINARY_MULTIPLY[0m(None, None) 
337: [33mLOAD_FAST[0m(9, tgt_len) 
338: [33mLOAD_FAST[0m(15, src_len) 
339: [33mCALL_METHOD[0m(3, 3) 
340: [33mSTORE_FAST[0m(16, attn_weights) 
341: [33mLOAD_FAST[0m(6, output_attentions) 
342: [32mEXTENDED_ARG[0m(2, 2) 
343: [33mPOP_JUMP_IF_FALSE[0m(728, 728)  -> inst 364
344: [33mLOAD_FAST[0m(16, attn_weights) 
345: [33mLOAD_METHOD[0m(12, view) 
346: [33mLOAD_FAST[0m(8, bsz) 
347: [33mLOAD_FAST[0m(0, self) 
348: [33mLOAD_ATTR[0m(10, num_heads) 
349: [33mLOAD_FAST[0m(9, tgt_len) 
350: [33mLOAD_FAST[0m(15, src_len) 
351: [33mCALL_METHOD[0m(4, 4) 
352: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
353: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
354: [33mLOAD_METHOD[0m(12, view) 
355: [33mLOAD_FAST[0m(8, bsz) 
356: [33mLOAD_FAST[0m(0, self) 
357: [33mLOAD_ATTR[0m(10, num_heads) 
358: [33mBINARY_MULTIPLY[0m(None, None) 
359: [33mLOAD_FAST[0m(9, tgt_len) 
360: [33mLOAD_FAST[0m(15, src_len) 
361: [33mCALL_METHOD[0m(3, 3) 
362: [33mSTORE_FAST[0m(16, attn_weights) 
363: [33mJUMP_FORWARD[0m(4, 732)  -> inst 366
364: [33mLOAD_CONST[0m(12, None) 
365: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
366: [33mLOAD_GLOBAL[0m(17, nn) 
367: [33mLOAD_ATTR[0m(18, functional) 
368: [33mLOAD_ATTR[0m(20, dropout) 
369: [33mLOAD_FAST[0m(16, attn_weights) 
370: [33mLOAD_FAST[0m(0, self) 
371: [33mLOAD_ATTR[0m(20, dropout) 
372: [33mLOAD_FAST[0m(0, self) 
373: [33mLOAD_ATTR[0m(21, training) 
374: [33mLOAD_CONST[0m(10, ('p', 'training')) 
375: [33mCALL_FUNCTION_KW[0m(3, 3) 
376: [33mSTORE_FAST[0m(18, attn_probs) 
377: [33mLOAD_GLOBAL[0m(7, torch) 
378: [33mLOAD_METHOD[0m(14, bmm) 
379: [33mLOAD_FAST[0m(18, attn_probs) 
380: [33mLOAD_FAST[0m(13, value_states) 
381: [33mCALL_METHOD[0m(2, 2) 
382: [33mSTORE_FAST[0m(19, attn_output) 
383: [33mLOAD_FAST[0m(19, attn_output) 
384: [33mLOAD_METHOD[0m(0, size) 
385: [33mCALL_METHOD[0m(0, 0) 
386: [33mLOAD_FAST[0m(8, bsz) 
387: [33mLOAD_FAST[0m(0, self) 
388: [33mLOAD_ATTR[0m(10, num_heads) 
389: [33mBINARY_MULTIPLY[0m(None, None) 
390: [33mLOAD_FAST[0m(9, tgt_len) 
391: [33mLOAD_FAST[0m(0, self) 
392: [33mLOAD_ATTR[0m(11, head_dim) 
393: [33mBUILD_TUPLE[0m(3, 3) 
394: [33mCOMPARE_OP[0m(3, !=) 
395: [32mEXTENDED_ARG[0m(3, 3) 
396: [33mPOP_JUMP_IF_FALSE[0m(832, 832)  -> inst 416
397: [33mLOAD_GLOBAL[0m(16, ValueError) 
398: [33mLOAD_CONST[0m(3, `attn_output` should be of size ) 
399: [33mLOAD_FAST[0m(8, bsz) 
400: [33mLOAD_FAST[0m(0, self) 
401: [33mLOAD_ATTR[0m(10, num_heads) 
402: [33mBINARY_MULTIPLY[0m(None, None) 
403: [33mLOAD_FAST[0m(9, tgt_len) 
404: [33mLOAD_FAST[0m(0, self) 
405: [33mLOAD_ATTR[0m(11, head_dim) 
406: [33mBUILD_TUPLE[0m(3, 3) 
407: [33mFORMAT_VALUE[0m(0, (None, False)) 
408: [33mLOAD_CONST[0m(8, , but is ) 
409: [33mLOAD_FAST[0m(19, attn_output) 
410: [33mLOAD_METHOD[0m(0, size) 
411: [33mCALL_METHOD[0m(0, 0) 
412: [33mFORMAT_VALUE[0m(0, (None, False)) 
413: [33mBUILD_STRING[0m(4, 4) 
414: [33mCALL_FUNCTION[0m(1, 1) 
415: [33mRAISE_VARARGS[0m(1, 1) 
416: [33mLOAD_FAST[0m(19, attn_output) 
417: [33mLOAD_METHOD[0m(12, view) 
418: [33mLOAD_FAST[0m(8, bsz) 
419: [33mLOAD_FAST[0m(0, self) 
420: [33mLOAD_ATTR[0m(10, num_heads) 
421: [33mLOAD_FAST[0m(9, tgt_len) 
422: [33mLOAD_FAST[0m(0, self) 
423: [33mLOAD_ATTR[0m(11, head_dim) 
424: [33mCALL_METHOD[0m(4, 4) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(15, transpose) 
428: [33mLOAD_CONST[0m(5, 1) 
429: [33mLOAD_CONST[0m(1, 2) 
430: [33mCALL_METHOD[0m(2, 2) 
431: [33mSTORE_FAST[0m(19, attn_output) 
432: [33mLOAD_FAST[0m(19, attn_output) 
433: [33mLOAD_METHOD[0m(13, reshape) 
434: [33mLOAD_FAST[0m(8, bsz) 
435: [33mLOAD_FAST[0m(9, tgt_len) 
436: [33mLOAD_FAST[0m(0, self) 
437: [33mLOAD_ATTR[0m(22, embed_dim) 
438: [33mCALL_METHOD[0m(3, 3) 
439: [33mSTORE_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(0, self) 
441: [33mLOAD_METHOD[0m(23, out_proj) 
442: [33mLOAD_FAST[0m(19, attn_output) 
443: [33mCALL_METHOD[0m(1, 1) 
444: [33mSTORE_FAST[0m(19, attn_output) 
445: [33mLOAD_FAST[0m(19, attn_output) 
446: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
447: [33mLOAD_FAST[0m(3, past_key_value) 
448: [33mBUILD_TUPLE[0m(3, 3) 
449: [32mEXTENDED_ARG[0m(3, 3) 
450: [32mJUMP_ABSOLUTE[0m(930, 930)  -> inst 465
451: [32mLOAD_GLOBAL[0m(25, guard_match) 
452: [32mLOAD_CONST[0m(13, 6) 
453: [32mLOAD_CONST[0m(7, 0) 
454: [32mLOAD_GLOBAL[0m(24, locals) 
455: [32mCALL_FUNCTION[0m(0, 0) 
456: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
457: [32mUNPACK_SEQUENCE[0m(2, 2) 
458: [32mSTORE_FAST[0m(21, __case_idx) 
459: [32mSTORE_FAST[0m(20, __graph_fn) 
460: [32mLOAD_GLOBAL[0m(26, enable_trace) 
461: [32mLOAD_CONST[0m(13, 6) 
462: [32mCALL_FUNCTION[0m(1, 1) 
463: [32mPOP_TOP[0m(None, None) 
464: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
465: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=6(0x6856de0)
push tracker due to record
push tracker 6 frame 0x6856de0 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=6(0x6856de0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=6(0x6856de0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6] frame_id 6
enable_trace
push tracker 6 frame 0x6856de0 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
tracing opcode POP_TOP None pc=926 frame=6(0x6856de0)
process last instruction done
restart: running injected code (f_lasti=926)
tracing opcode JUMP_ABSOLUTE None pc=928 frame=6(0x6856de0)
process last instruction done
restart: running injected code (f_lasti=928)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=6(0x6856de0)
process last instruction done
tracing opcode IS_OP None pc=16 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=18 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=22 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=24 frame=6(0x6856de0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=26 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=28 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=30 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=32 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=34 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=38 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=40 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=42 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=6(0x6856de0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=46 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=48 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=50 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode POP_JUMP_IF_FALSE None pc=52 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=104 frame=6(0x6856de0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=106 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=150 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=152 frame=6(0x6856de0)
process last instruction done
tracing opcode IS_OP None pc=154 frame=6(0x6856de0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=156 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=244 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=246 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=248 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=250 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=252 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=254 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=256 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=258 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=260 frame=6(0x6856de0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x68beab0)
push tracker due to record
push tracker 7 frame 0x68beab0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x68beab0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x68beab0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x68beab0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x68beab0)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x68beab0)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x68beab0)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x68beab0)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x68beab0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x68beab0)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x68beab0)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x68beab0)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_15 : [#users=1] = placeholder[target=tensor_15]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_15, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_15 : [#users=1] = placeholder[target=tensor_15]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_15, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x68beab0)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=262 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=264 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=266 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=268 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=270 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=272 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=274 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=276 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=278 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=280 frame=6(0x6856de0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x68ca730)
push tracker due to record
push tracker 7 frame 0x68ca730 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x68ca730)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x68ca730)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x68ca730 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x68ca730)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x68ca730)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x68ca730)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x68ca730)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x68ca730)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x68ca730)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x68ca730)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x68ca730)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_17 : [#users=1] = placeholder[target=tensor_17]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_17, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_17 : [#users=1] = placeholder[target=tensor_17]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_17, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x68ca730)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=282 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=284 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=286 frame=6(0x6856de0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=288 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=300 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=302 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=304 frame=6(0x6856de0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=306 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=308 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=310 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=312 frame=6(0x6856de0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=314 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=316 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=318 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=320 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=322 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=324 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=326 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=328 frame=6(0x6856de0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x150abc160040)
push tracker due to record
push tracker 7 frame 0x150abc160040 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x150abc160040)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x150abc160040)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x150abc160040 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x150abc160040)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x150abc160040)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x150abc160040)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x150abc160040)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x150abc160040)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x150abc160040)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x150abc160040)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x150abc160040)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_19 : [#users=1] = placeholder[target=tensor_19]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_19, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_19 : [#users=1] = placeholder[target=tensor_19]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_19, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x150abc160040)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode LOAD_ATTR None pc=330 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=332 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=334 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=336 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=338 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=340 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=342 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=344 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=346 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=348 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=350 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=352 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=354 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=356 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=358 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=360 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=362 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=364 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=366 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=368 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=370 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=372 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=374 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=376 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=378 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=380 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=382 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=384 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=386 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=388 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=390 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=392 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=394 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=396 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=398 frame=6(0x6856de0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=400 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=402 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=404 frame=6(0x6856de0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=406 frame=6(0x6856de0)
process last instruction done
tracing opcode COMPARE_OP None pc=408 frame=6(0x6856de0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=410 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=450 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=452 frame=6(0x6856de0)
process last instruction done
tracing opcode IS_OP None pc=454 frame=6(0x6856de0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=456 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=460 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=462 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=464 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=466 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=468 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=470 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=472 frame=6(0x6856de0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=474 frame=6(0x6856de0)
process last instruction done
tracing opcode COMPARE_OP None pc=476 frame=6(0x6856de0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=478 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=514 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=516 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=518 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=520 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=522 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=524 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=526 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=528 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=530 frame=6(0x6856de0)
process last instruction done
tracing opcode BINARY_ADD None pc=532 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=534 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=536 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=538 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=540 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=542 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=544 frame=6(0x6856de0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=546 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=548 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=550 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=552 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=554 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=556 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=558 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=560 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=562 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=564 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=566 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=568 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=570 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=572 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=574 frame=6(0x6856de0)
process last instruction done
tracing opcode IS_OP None pc=576 frame=6(0x6856de0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=578 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=682 frame=6(0x6856de0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=684 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=728 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=730 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=732 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=734 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=736 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=738 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=740 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=742 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=744 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=746 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=748 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=750 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=752 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=754 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=756 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=758 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=760 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=762 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=764 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=766 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=768 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=770 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=772 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=774 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=776 frame=6(0x6856de0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=778 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=780 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=782 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=784 frame=6(0x6856de0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=786 frame=6(0x6856de0)
process last instruction done
tracing opcode COMPARE_OP None pc=788 frame=6(0x6856de0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=790 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=832 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=834 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=836 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=838 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=840 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=842 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=844 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=846 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=848 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=850 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=852 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=854 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=856 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_CONST None pc=858 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=860 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=862 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=864 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=866 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=868 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=870 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=872 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_ATTR None pc=874 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=876 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=878 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=880 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_METHOD None pc=882 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=884 frame=6(0x6856de0)
process last instruction done
tracing opcode CALL_METHOD None pc=886 frame=6(0x6856de0)
process last instruction done
tracing opcode STORE_FAST None pc=888 frame=6(0x6856de0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=890 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=892 frame=6(0x6856de0)
process last instruction done
tracing opcode LOAD_FAST None pc=894 frame=6(0x6856de0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=896 frame=6(0x6856de0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=898 frame=6(0x6856de0)
process last instruction done
restart: running injected code (f_lasti=898)
commiting 0 443 [32mRETURN_VALUE[0m(None, None)  898
graph graph():
    %tensor_14 : [#users=3] = placeholder[target=tensor_14]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_14,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_14,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_14,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_21 : [#users=1] = placeholder[target=tensor_21]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_21), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
callee is full graph, merge to caller
to merge graph():
    %tensor_14 : [#users=3] = placeholder[target=tensor_14]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_14,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_14,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_14,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_21 : [#users=1] = placeholder[target=tensor_21]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_21), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
tracing opcode RETURN_VALUE None pc=930 frame=6(0x6856de0)
process last instruction done
restart: running injected code (f_lasti=930)
before pop_tracker [0, 2, 5, 6] frame_id 6
tracing return in /home/drc/frontend/test/simple.py
tracing opcode UNPACK_SEQUENCE None pc=32 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=34 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=36 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=38 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=40 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=42 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=46 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=48 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=50 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=52 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=54 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_CONST None pc=56 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=58 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=60 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=62 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=64 frame=5(0x6895f00)
process last instruction done
tracing opcode BINARY_ADD None pc=66 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=68 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=70 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_METHOD None pc=72 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=74 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_METHOD None pc=76 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=78 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=80 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=82 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=84 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_METHOD None pc=86 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=88 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_METHOD None pc=90 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=92 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_METHOD None pc=94 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_METHOD None pc=96 frame=5(0x6895f00)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py 8 0x6825ce0 forward
0: [33mLOAD_FAST[0m(0, self) 
1: [33mLOAD_METHOD[0m(0, act) 
2: [33mLOAD_FAST[0m(1, input) 
3: [33mCALL_METHOD[0m(1, 1) 
4: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'NoneType'>, None), (<class 'int'>, 8), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(5, disable_trace) 
1: [32mLOAD_CONST[0m(1, 8) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(20, 20)  -> inst 10
5: [33mLOAD_FAST[0m(0, self) 
6: [33mLOAD_METHOD[0m(0, act) 
7: [33mLOAD_FAST[0m(1, input) 
8: [33mCALL_METHOD[0m(1, 1) 
9: [32mJUMP_ABSOLUTE[0m(48, 48)  -> inst 24
10: [32mLOAD_GLOBAL[0m(2, guard_match) 
11: [32mLOAD_CONST[0m(1, 8) 
12: [32mLOAD_CONST[0m(2, 0) 
13: [32mLOAD_GLOBAL[0m(1, locals) 
14: [32mCALL_FUNCTION[0m(0, 0) 
15: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
16: [32mUNPACK_SEQUENCE[0m(2, 2) 
17: [32mSTORE_FAST[0m(3, __case_idx) 
18: [32mSTORE_FAST[0m(2, __graph_fn) 
19: [32mLOAD_GLOBAL[0m(3, enable_trace) 
20: [32mLOAD_CONST[0m(1, 8) 
21: [32mCALL_FUNCTION[0m(1, 1) 
22: [32mPOP_TOP[0m(None, None) 
23: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
24: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_GLOBAL None pc=0 frame=8(0x150abc1d1230)
push tracker due to record
push tracker 8 frame 0x150abc1d1230 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=8(0x150abc1d1230)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=8(0x150abc1d1230)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 8] frame_id 8
enable_trace
push tracker 8 frame 0x150abc1d1230 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
tracing opcode POP_TOP None pc=44 frame=8(0x150abc1d1230)
process last instruction done
restart: running injected code (f_lasti=44)
tracing opcode JUMP_ABSOLUTE None pc=46 frame=8(0x150abc1d1230)
process last instruction done
restart: running injected code (f_lasti=46)
tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_FAST None pc=10 frame=8(0x150abc1d1230)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=8(0x150abc1d1230)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=8(0x150abc1d1230)
process last instruction done
tracing opcode CALL_METHOD None pc=16 frame=8(0x150abc1d1230)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=18 frame=8(0x150abc1d1230)
process last instruction done
restart: running injected code (f_lasti=18)
commiting 0 4 [32mRETURN_VALUE[0m(None, None)  18
graph graph():
    %tensor_24 : [#users=1] = placeholder[target=tensor_24]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_24,), kwargs = {})
    return (gelu,)
callee is full graph, merge to caller
to merge graph():
    %tensor_24 : [#users=1] = placeholder[target=tensor_24]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_24,), kwargs = {})
    return (gelu,)
tracing opcode RETURN_VALUE None pc=48 frame=8(0x150abc1d1230)
process last instruction done
restart: running injected code (f_lasti=48)
before pop_tracker [0, 2, 5, 8] frame_id 8
tracing return in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode STORE_FAST None pc=98 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=100 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=102 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=104 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=106 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=108 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=110 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=112 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=114 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_CONST None pc=116 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=118 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=120 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=122 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_METHOD None pc=124 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=126 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_METHOD None pc=128 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=130 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=132 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=134 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=136 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=138 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=140 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=142 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=144 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=146 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_CONST None pc=148 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=150 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=152 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=154 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=156 frame=5(0x6895f00)
process last instruction done
tracing opcode BINARY_ADD None pc=158 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=160 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=162 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_METHOD None pc=164 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_FAST None pc=166 frame=5(0x6895f00)
process last instruction done
tracing opcode CALL_METHOD None pc=168 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=170 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=172 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=174 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=176 frame=5(0x6895f00)
process last instruction done
tracing opcode LOAD_ATTR None pc=178 frame=5(0x6895f00)
process last instruction done
tracing opcode COMPARE_OP None pc=180 frame=5(0x6895f00)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=182 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=248 frame=5(0x6895f00)
process last instruction done
tracing opcode BUILD_TUPLE None pc=250 frame=5(0x6895f00)
process last instruction done
tracing opcode STORE_FAST None pc=252 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=254 frame=5(0x6895f00)
process last instruction done
tracing opcode EXTENDED_ARG None pc=256 frame=5(0x6895f00)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=270 frame=5(0x6895f00)
process last instruction done
tracing opcode EXTENDED_ARG None pc=272 frame=5(0x6895f00)
process last instruction done
restart: running injected code (f_lasti=272)
commiting 0 130 [32mRETURN_VALUE[0m(None, None)  272
graph graph():
    %tensor_12 : [#users=4] = placeholder[target=tensor_12]
    %tensor_13 : [#users=1] = placeholder[target=tensor_13]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_12,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_12,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_12,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_13), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_12, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
callee is full graph, merge to caller
to merge graph():
    %tensor_12 : [#users=4] = placeholder[target=tensor_12]
    %tensor_13 : [#users=1] = placeholder[target=tensor_13]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_12,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_12,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_12,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_13), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_12, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
tracing opcode RETURN_VALUE None pc=304 frame=5(0x6895f00)
process last instruction done
restart: running injected code (f_lasti=304)
before pop_tracker [0, 2, 5] frame_id 5
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=552 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=554 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=556 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=558 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=560 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=562 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=564 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode FOR_ITER None pc=386 frame=2(0x688b4d0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=388 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=390 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=392 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=394 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=396 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=410 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=412 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=414 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=416 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=418 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=420 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=422 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=424 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=426 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=430 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=432 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=434 frame=2(0x688b4d0)
process last instruction done
tracing opcode COMPARE_OP None pc=436 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=438 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=448 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=450 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=452 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=520 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=522 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=524 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=526 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=528 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=530 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=532 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=544 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=546 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=548 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=550 frame=2(0x688b4d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 5 0x150b33c83640 forward
0: [33mLOAD_FAST[0m(1, hidden_states) 
1: [33mSTORE_FAST[0m(5, residual) 
2: [33mLOAD_FAST[0m(0, self) 
3: [33mLOAD_ATTR[0m(0, self_attn) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_FAST[0m(2, attention_mask) 
6: [33mLOAD_FAST[0m(3, layer_head_mask) 
7: [33mLOAD_FAST[0m(4, output_attentions) 
8: [33mLOAD_CONST[0m(1, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
9: [33mCALL_FUNCTION_KW[0m(4, 4) 
10: [33mUNPACK_SEQUENCE[0m(3, 3) 
11: [33mSTORE_FAST[0m(1, hidden_states) 
12: [33mSTORE_FAST[0m(6, attn_weights) 
13: [33mSTORE_FAST[0m(7, _) 
14: [33mLOAD_GLOBAL[0m(1, nn) 
15: [33mLOAD_ATTR[0m(2, functional) 
16: [33mLOAD_ATTR[0m(3, dropout) 
17: [33mLOAD_FAST[0m(1, hidden_states) 
18: [33mLOAD_FAST[0m(0, self) 
19: [33mLOAD_ATTR[0m(3, dropout) 
20: [33mLOAD_FAST[0m(0, self) 
21: [33mLOAD_ATTR[0m(4, training) 
22: [33mLOAD_CONST[0m(2, ('p', 'training')) 
23: [33mCALL_FUNCTION_KW[0m(3, 3) 
24: [33mSTORE_FAST[0m(1, hidden_states) 
25: [33mLOAD_FAST[0m(5, residual) 
26: [33mLOAD_FAST[0m(1, hidden_states) 
27: [33mBINARY_ADD[0m(None, None) 
28: [33mSTORE_FAST[0m(1, hidden_states) 
29: [33mLOAD_FAST[0m(0, self) 
30: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
31: [33mLOAD_FAST[0m(1, hidden_states) 
32: [33mCALL_METHOD[0m(1, 1) 
33: [33mSTORE_FAST[0m(1, hidden_states) 
34: [33mLOAD_FAST[0m(1, hidden_states) 
35: [33mSTORE_FAST[0m(5, residual) 
36: [33mLOAD_FAST[0m(0, self) 
37: [33mLOAD_METHOD[0m(6, activation_fn) 
38: [33mLOAD_FAST[0m(0, self) 
39: [33mLOAD_METHOD[0m(7, fc1) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mCALL_METHOD[0m(1, 1) 
42: [33mCALL_METHOD[0m(1, 1) 
43: [33mSTORE_FAST[0m(1, hidden_states) 
44: [33mLOAD_GLOBAL[0m(1, nn) 
45: [33mLOAD_ATTR[0m(2, functional) 
46: [33mLOAD_ATTR[0m(3, dropout) 
47: [33mLOAD_FAST[0m(1, hidden_states) 
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_ATTR[0m(8, activation_dropout) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_ATTR[0m(4, training) 
52: [33mLOAD_CONST[0m(2, ('p', 'training')) 
53: [33mCALL_FUNCTION_KW[0m(3, 3) 
54: [33mSTORE_FAST[0m(1, hidden_states) 
55: [33mLOAD_FAST[0m(0, self) 
56: [33mLOAD_METHOD[0m(9, fc2) 
57: [33mLOAD_FAST[0m(1, hidden_states) 
58: [33mCALL_METHOD[0m(1, 1) 
59: [33mSTORE_FAST[0m(1, hidden_states) 
60: [33mLOAD_GLOBAL[0m(1, nn) 
61: [33mLOAD_ATTR[0m(2, functional) 
62: [33mLOAD_ATTR[0m(3, dropout) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_ATTR[0m(3, dropout) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_ATTR[0m(4, training) 
68: [33mLOAD_CONST[0m(2, ('p', 'training')) 
69: [33mCALL_FUNCTION_KW[0m(3, 3) 
70: [33mSTORE_FAST[0m(1, hidden_states) 
71: [33mLOAD_FAST[0m(5, residual) 
72: [33mLOAD_FAST[0m(1, hidden_states) 
73: [33mBINARY_ADD[0m(None, None) 
74: [33mSTORE_FAST[0m(1, hidden_states) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(10, final_layer_norm) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mSTORE_FAST[0m(1, hidden_states) 
80: [33mLOAD_FAST[0m(1, hidden_states) 
81: [33mLOAD_ATTR[0m(11, dtype) 
82: [33mLOAD_GLOBAL[0m(12, torch) 
83: [33mLOAD_ATTR[0m(13, float16) 
84: [33mCOMPARE_OP[0m(2, ==) 
85: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
86: [33mLOAD_GLOBAL[0m(12, torch) 
87: [33mLOAD_METHOD[0m(14, isinf) 
88: [33mLOAD_FAST[0m(1, hidden_states) 
89: [33mCALL_METHOD[0m(1, 1) 
90: [33mLOAD_METHOD[0m(15, any) 
91: [33mCALL_METHOD[0m(0, 0) 
92: [33mPOP_JUMP_IF_TRUE[0m(200, 200)  -> inst 100
93: [33mLOAD_GLOBAL[0m(12, torch) 
94: [33mLOAD_METHOD[0m(16, isnan) 
95: [33mLOAD_FAST[0m(1, hidden_states) 
96: [33mCALL_METHOD[0m(1, 1) 
97: [33mLOAD_METHOD[0m(15, any) 
98: [33mCALL_METHOD[0m(0, 0) 
99: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
100: [33mLOAD_GLOBAL[0m(12, torch) 
101: [33mLOAD_METHOD[0m(17, finfo) 
102: [33mLOAD_FAST[0m(1, hidden_states) 
103: [33mLOAD_ATTR[0m(11, dtype) 
104: [33mCALL_METHOD[0m(1, 1) 
105: [33mLOAD_ATTR[0m(18, max) 
106: [33mLOAD_CONST[0m(3, 1000) 
107: [33mBINARY_SUBTRACT[0m(None, None) 
108: [33mSTORE_FAST[0m(8, clamp_value) 
109: [33mLOAD_GLOBAL[0m(12, torch) 
110: [33mLOAD_ATTR[0m(19, clamp) 
111: [33mLOAD_FAST[0m(1, hidden_states) 
112: [33mLOAD_FAST[0m(8, clamp_value) 
113: [33mUNARY_NEGATIVE[0m(None, None) 
114: [33mLOAD_FAST[0m(8, clamp_value) 
115: [33mLOAD_CONST[0m(4, ('min', 'max')) 
116: [33mCALL_FUNCTION_KW[0m(3, 3) 
117: [33mSTORE_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(1, hidden_states) 
119: [33mBUILD_TUPLE[0m(1, 1) 
120: [33mSTORE_FAST[0m(9, outputs) 
121: [33mLOAD_FAST[0m(4, output_attentions) 
122: [33mEXTENDED_ARG[0m(1, 1) 
123: [33mPOP_JUMP_IF_FALSE[0m(258, 258)  -> inst 129
124: [33mLOAD_FAST[0m(9, outputs) 
125: [33mLOAD_FAST[0m(6, attn_weights) 
126: [33mBUILD_TUPLE[0m(1, 1) 
127: [33mINPLACE_ADD[0m(None, None) 
128: [33mSTORE_FAST[0m(9, outputs) 
129: [33mLOAD_FAST[0m(9, outputs) 
130: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')), (<class 'int'>, 1000), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, '\n        Args:\n            hidden_states (`torch.FloatTensor`): input to the layer of shape `(seq_len, batch, embed_dim)`\n            attention_mask (`torch.FloatTensor`): attention mask of size\n                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.\n            layer_head_mask (`torch.FloatTensor`): mask for attention heads in a given layer of size\n                `(encoder_attention_heads,)`.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n        '), (<class 'tuple'>, ('min', 'max')), (<class 'int'>, 5), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(24, disable_trace) 
1: [32mLOAD_CONST[0m(5, 5) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(1, 1) 
5: [32mJUMP_ABSOLUTE[0m(276, 276)  -> inst 138
6: [33mLOAD_FAST[0m(1, hidden_states) 
7: [33mSTORE_FAST[0m(5, residual) 
8: [33mLOAD_FAST[0m(0, self) 
9: [33mLOAD_ATTR[0m(0, self_attn) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_FAST[0m(2, attention_mask) 
12: [33mLOAD_FAST[0m(3, layer_head_mask) 
13: [33mLOAD_FAST[0m(4, output_attentions) 
14: [33mLOAD_CONST[0m(0, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
15: [33mCALL_FUNCTION_KW[0m(4, 4) 
16: [33mUNPACK_SEQUENCE[0m(3, 3) 
17: [33mSTORE_FAST[0m(1, hidden_states) 
18: [33mSTORE_FAST[0m(6, attn_weights) 
19: [33mSTORE_FAST[0m(7, _) 
20: [33mLOAD_GLOBAL[0m(1, nn) 
21: [33mLOAD_ATTR[0m(2, functional) 
22: [33mLOAD_ATTR[0m(3, dropout) 
23: [33mLOAD_FAST[0m(1, hidden_states) 
24: [33mLOAD_FAST[0m(0, self) 
25: [33mLOAD_ATTR[0m(3, dropout) 
26: [33mLOAD_FAST[0m(0, self) 
27: [33mLOAD_ATTR[0m(4, training) 
28: [33mLOAD_CONST[0m(2, ('p', 'training')) 
29: [33mCALL_FUNCTION_KW[0m(3, 3) 
30: [33mSTORE_FAST[0m(1, hidden_states) 
31: [33mLOAD_FAST[0m(5, residual) 
32: [33mLOAD_FAST[0m(1, hidden_states) 
33: [33mBINARY_ADD[0m(None, None) 
34: [33mSTORE_FAST[0m(1, hidden_states) 
35: [33mLOAD_FAST[0m(0, self) 
36: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
37: [33mLOAD_FAST[0m(1, hidden_states) 
38: [33mCALL_METHOD[0m(1, 1) 
39: [33mSTORE_FAST[0m(1, hidden_states) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mSTORE_FAST[0m(5, residual) 
42: [33mLOAD_FAST[0m(0, self) 
43: [33mLOAD_METHOD[0m(6, activation_fn) 
44: [33mLOAD_FAST[0m(0, self) 
45: [33mLOAD_METHOD[0m(7, fc1) 
46: [33mLOAD_FAST[0m(1, hidden_states) 
47: [33mCALL_METHOD[0m(1, 1) 
48: [33mCALL_METHOD[0m(1, 1) 
49: [33mSTORE_FAST[0m(1, hidden_states) 
50: [33mLOAD_GLOBAL[0m(1, nn) 
51: [33mLOAD_ATTR[0m(2, functional) 
52: [33mLOAD_ATTR[0m(3, dropout) 
53: [33mLOAD_FAST[0m(1, hidden_states) 
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_ATTR[0m(8, activation_dropout) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_ATTR[0m(4, training) 
58: [33mLOAD_CONST[0m(2, ('p', 'training')) 
59: [33mCALL_FUNCTION_KW[0m(3, 3) 
60: [33mSTORE_FAST[0m(1, hidden_states) 
61: [33mLOAD_FAST[0m(0, self) 
62: [33mLOAD_METHOD[0m(9, fc2) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mCALL_METHOD[0m(1, 1) 
65: [33mSTORE_FAST[0m(1, hidden_states) 
66: [33mLOAD_GLOBAL[0m(1, nn) 
67: [33mLOAD_ATTR[0m(2, functional) 
68: [33mLOAD_ATTR[0m(3, dropout) 
69: [33mLOAD_FAST[0m(1, hidden_states) 
70: [33mLOAD_FAST[0m(0, self) 
71: [33mLOAD_ATTR[0m(3, dropout) 
72: [33mLOAD_FAST[0m(0, self) 
73: [33mLOAD_ATTR[0m(4, training) 
74: [33mLOAD_CONST[0m(2, ('p', 'training')) 
75: [33mCALL_FUNCTION_KW[0m(3, 3) 
76: [33mSTORE_FAST[0m(1, hidden_states) 
77: [33mLOAD_FAST[0m(5, residual) 
78: [33mLOAD_FAST[0m(1, hidden_states) 
79: [33mBINARY_ADD[0m(None, None) 
80: [33mSTORE_FAST[0m(1, hidden_states) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(10, final_layer_norm) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mSTORE_FAST[0m(1, hidden_states) 
86: [33mLOAD_FAST[0m(1, hidden_states) 
87: [33mLOAD_ATTR[0m(11, dtype) 
88: [33mLOAD_GLOBAL[0m(12, torch) 
89: [33mLOAD_ATTR[0m(13, float16) 
90: [33mCOMPARE_OP[0m(2, ==) 
91: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
92: [33mLOAD_GLOBAL[0m(12, torch) 
93: [33mLOAD_METHOD[0m(14, isinf) 
94: [33mLOAD_FAST[0m(1, hidden_states) 
95: [33mCALL_METHOD[0m(1, 1) 
96: [33mLOAD_METHOD[0m(15, any) 
97: [33mCALL_METHOD[0m(0, 0) 
98: [33mPOP_JUMP_IF_TRUE[0m(212, 212)  -> inst 106
99: [33mLOAD_GLOBAL[0m(12, torch) 
100: [33mLOAD_METHOD[0m(16, isnan) 
101: [33mLOAD_FAST[0m(1, hidden_states) 
102: [33mCALL_METHOD[0m(1, 1) 
103: [33mLOAD_METHOD[0m(15, any) 
104: [33mCALL_METHOD[0m(0, 0) 
105: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
106: [33mLOAD_GLOBAL[0m(12, torch) 
107: [33mLOAD_METHOD[0m(17, finfo) 
108: [33mLOAD_FAST[0m(1, hidden_states) 
109: [33mLOAD_ATTR[0m(11, dtype) 
110: [33mCALL_METHOD[0m(1, 1) 
111: [33mLOAD_ATTR[0m(18, max) 
112: [33mLOAD_CONST[0m(1, 1000) 
113: [33mBINARY_SUBTRACT[0m(None, None) 
114: [33mSTORE_FAST[0m(8, clamp_value) 
115: [33mLOAD_GLOBAL[0m(12, torch) 
116: [33mLOAD_ATTR[0m(19, clamp) 
117: [33mLOAD_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(8, clamp_value) 
119: [33mUNARY_NEGATIVE[0m(None, None) 
120: [33mLOAD_FAST[0m(8, clamp_value) 
121: [33mLOAD_CONST[0m(4, ('min', 'max')) 
122: [33mCALL_FUNCTION_KW[0m(3, 3) 
123: [33mSTORE_FAST[0m(1, hidden_states) 
124: [33mLOAD_FAST[0m(1, hidden_states) 
125: [33mBUILD_TUPLE[0m(1, 1) 
126: [33mSTORE_FAST[0m(9, outputs) 
127: [33mLOAD_FAST[0m(4, output_attentions) 
128: [32mEXTENDED_ARG[0m(1, 1) 
129: [33mPOP_JUMP_IF_FALSE[0m(270, 270)  -> inst 135
130: [33mLOAD_FAST[0m(9, outputs) 
131: [33mLOAD_FAST[0m(6, attn_weights) 
132: [33mBUILD_TUPLE[0m(1, 1) 
133: [33mINPLACE_ADD[0m(None, None) 
134: [33mSTORE_FAST[0m(9, outputs) 
135: [33mLOAD_FAST[0m(9, outputs) 
136: [32mEXTENDED_ARG[0m(1, 1) 
137: [32mJUMP_ABSOLUTE[0m(304, 304)  -> inst 152
138: [32mLOAD_GLOBAL[0m(21, guard_match) 
139: [32mLOAD_CONST[0m(5, 5) 
140: [32mLOAD_CONST[0m(6, 0) 
141: [32mLOAD_GLOBAL[0m(20, locals) 
142: [32mCALL_FUNCTION[0m(0, 0) 
143: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
144: [32mUNPACK_SEQUENCE[0m(2, 2) 
145: [32mSTORE_FAST[0m(11, __case_idx) 
146: [32mSTORE_FAST[0m(10, __graph_fn) 
147: [32mLOAD_GLOBAL[0m(22, enable_trace) 
148: [32mLOAD_CONST[0m(5, 5) 
149: [32mCALL_FUNCTION[0m(1, 1) 
150: [32mPOP_TOP[0m(None, None) 
151: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
152: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=5(0x6891e60)
push tracker due to record
push tracker 5 frame 0x6891e60 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=5(0x6891e60)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=5(0x6891e60)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5] frame_id 5
enable_trace
push tracker 5 frame 0x6891e60 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
tracing opcode POP_TOP None pc=300 frame=5(0x6891e60)
process last instruction done
restart: running injected code (f_lasti=300)
tracing opcode JUMP_ABSOLUTE None pc=302 frame=5(0x6891e60)
process last instruction done
restart: running injected code (f_lasti=302)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=14 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=16 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=18 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=22 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=24 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=26 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=28 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=30 frame=5(0x6891e60)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 6 0x6825f10 forward
0: [33mLOAD_FAST[0m(2, key_value_states) 
1: [33mLOAD_CONST[0m(1, None) 
2: [33mIS_OP[0m(1, 1) 
3: [33mSTORE_FAST[0m(7, is_cross_attention) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_METHOD[0m(0, size) 
6: [33mCALL_METHOD[0m(0, 0) 
7: [33mUNPACK_SEQUENCE[0m(3, 3) 
8: [33mSTORE_FAST[0m(8, bsz) 
9: [33mSTORE_FAST[0m(9, tgt_len) 
10: [33mSTORE_FAST[0m(10, _) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_METHOD[0m(1, q_proj) 
13: [33mLOAD_FAST[0m(1, hidden_states) 
14: [33mCALL_METHOD[0m(1, 1) 
15: [33mLOAD_FAST[0m(0, self) 
16: [33mLOAD_ATTR[0m(2, scaling) 
17: [33mBINARY_MULTIPLY[0m(None, None) 
18: [33mSTORE_FAST[0m(11, query_states) 
19: [33mLOAD_FAST[0m(7, is_cross_attention) 
20: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
21: [33mLOAD_FAST[0m(3, past_key_value) 
22: [33mLOAD_CONST[0m(1, None) 
23: [33mIS_OP[0m(1, 1) 
24: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
25: [33mLOAD_FAST[0m(3, past_key_value) 
26: [33mLOAD_CONST[0m(2, 0) 
27: [33mBINARY_SUBSCR[0m(None, None) 
28: [33mLOAD_ATTR[0m(3, shape) 
29: [33mLOAD_CONST[0m(3, 2) 
30: [33mBINARY_SUBSCR[0m(None, None) 
31: [33mLOAD_FAST[0m(2, key_value_states) 
32: [33mLOAD_ATTR[0m(3, shape) 
33: [33mLOAD_CONST[0m(4, 1) 
34: [33mBINARY_SUBSCR[0m(None, None) 
35: [33mCOMPARE_OP[0m(2, ==) 
36: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
37: [33mLOAD_FAST[0m(3, past_key_value) 
38: [33mLOAD_CONST[0m(2, 0) 
39: [33mBINARY_SUBSCR[0m(None, None) 
40: [33mSTORE_FAST[0m(12, key_states) 
41: [33mLOAD_FAST[0m(3, past_key_value) 
42: [33mLOAD_CONST[0m(4, 1) 
43: [33mBINARY_SUBSCR[0m(None, None) 
44: [33mSTORE_FAST[0m(13, value_states) 
45: [33mJUMP_FORWARD[0m(180, 272)  -> inst 136
46: [33mLOAD_FAST[0m(7, is_cross_attention) 
47: [33mPOP_JUMP_IF_FALSE[0m(138, 138)  -> inst 69
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_METHOD[0m(4, _shape) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_METHOD[0m(5, k_proj) 
52: [33mLOAD_FAST[0m(2, key_value_states) 
53: [33mCALL_METHOD[0m(1, 1) 
54: [33mLOAD_CONST[0m(5, -1) 
55: [33mLOAD_FAST[0m(8, bsz) 
56: [33mCALL_METHOD[0m(3, 3) 
57: [33mSTORE_FAST[0m(12, key_states) 
58: [33mLOAD_FAST[0m(0, self) 
59: [33mLOAD_METHOD[0m(4, _shape) 
60: [33mLOAD_FAST[0m(0, self) 
61: [33mLOAD_METHOD[0m(6, v_proj) 
62: [33mLOAD_FAST[0m(2, key_value_states) 
63: [33mCALL_METHOD[0m(1, 1) 
64: [33mLOAD_CONST[0m(5, -1) 
65: [33mLOAD_FAST[0m(8, bsz) 
66: [33mCALL_METHOD[0m(3, 3) 
67: [33mSTORE_FAST[0m(13, value_states) 
68: [33mJUMP_FORWARD[0m(134, 272)  -> inst 136
69: [33mLOAD_FAST[0m(3, past_key_value) 
70: [33mLOAD_CONST[0m(1, None) 
71: [33mIS_OP[0m(1, 1) 
72: [33mPOP_JUMP_IF_FALSE[0m(232, 232)  -> inst 116
73: [33mLOAD_FAST[0m(0, self) 
74: [33mLOAD_METHOD[0m(4, _shape) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(5, k_proj) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mLOAD_CONST[0m(5, -1) 
80: [33mLOAD_FAST[0m(8, bsz) 
81: [33mCALL_METHOD[0m(3, 3) 
82: [33mSTORE_FAST[0m(12, key_states) 
83: [33mLOAD_FAST[0m(0, self) 
84: [33mLOAD_METHOD[0m(4, _shape) 
85: [33mLOAD_FAST[0m(0, self) 
86: [33mLOAD_METHOD[0m(6, v_proj) 
87: [33mLOAD_FAST[0m(1, hidden_states) 
88: [33mCALL_METHOD[0m(1, 1) 
89: [33mLOAD_CONST[0m(5, -1) 
90: [33mLOAD_FAST[0m(8, bsz) 
91: [33mCALL_METHOD[0m(3, 3) 
92: [33mSTORE_FAST[0m(13, value_states) 
93: [33mLOAD_GLOBAL[0m(7, torch) 
94: [33mLOAD_ATTR[0m(8, cat) 
95: [33mLOAD_FAST[0m(3, past_key_value) 
96: [33mLOAD_CONST[0m(2, 0) 
97: [33mBINARY_SUBSCR[0m(None, None) 
98: [33mLOAD_FAST[0m(12, key_states) 
99: [33mBUILD_LIST[0m(2, 2) 
100: [33mLOAD_CONST[0m(3, 2) 
101: [33mLOAD_CONST[0m(6, ('dim',)) 
102: [33mCALL_FUNCTION_KW[0m(2, 2) 
103: [33mSTORE_FAST[0m(12, key_states) 
104: [33mLOAD_GLOBAL[0m(7, torch) 
105: [33mLOAD_ATTR[0m(8, cat) 
106: [33mLOAD_FAST[0m(3, past_key_value) 
107: [33mLOAD_CONST[0m(4, 1) 
108: [33mBINARY_SUBSCR[0m(None, None) 
109: [33mLOAD_FAST[0m(13, value_states) 
110: [33mBUILD_LIST[0m(2, 2) 
111: [33mLOAD_CONST[0m(3, 2) 
112: [33mLOAD_CONST[0m(6, ('dim',)) 
113: [33mCALL_FUNCTION_KW[0m(2, 2) 
114: [33mSTORE_FAST[0m(13, value_states) 
115: [33mJUMP_FORWARD[0m(40, 272)  -> inst 136
116: [33mLOAD_FAST[0m(0, self) 
117: [33mLOAD_METHOD[0m(4, _shape) 
118: [33mLOAD_FAST[0m(0, self) 
119: [33mLOAD_METHOD[0m(5, k_proj) 
120: [33mLOAD_FAST[0m(1, hidden_states) 
121: [33mCALL_METHOD[0m(1, 1) 
122: [33mLOAD_CONST[0m(5, -1) 
123: [33mLOAD_FAST[0m(8, bsz) 
124: [33mCALL_METHOD[0m(3, 3) 
125: [33mSTORE_FAST[0m(12, key_states) 
126: [33mLOAD_FAST[0m(0, self) 
127: [33mLOAD_METHOD[0m(4, _shape) 
128: [33mLOAD_FAST[0m(0, self) 
129: [33mLOAD_METHOD[0m(6, v_proj) 
130: [33mLOAD_FAST[0m(1, hidden_states) 
131: [33mCALL_METHOD[0m(1, 1) 
132: [33mLOAD_CONST[0m(5, -1) 
133: [33mLOAD_FAST[0m(8, bsz) 
134: [33mCALL_METHOD[0m(3, 3) 
135: [33mSTORE_FAST[0m(13, value_states) 
136: [33mLOAD_FAST[0m(0, self) 
137: [33mLOAD_ATTR[0m(9, is_decoder) 
138: [33mEXTENDED_ARG[0m(1, 1) 
139: [33mPOP_JUMP_IF_FALSE[0m(288, 288)  -> inst 144
140: [33mLOAD_FAST[0m(12, key_states) 
141: [33mLOAD_FAST[0m(13, value_states) 
142: [33mBUILD_TUPLE[0m(2, 2) 
143: [33mSTORE_FAST[0m(3, past_key_value) 
144: [33mLOAD_FAST[0m(8, bsz) 
145: [33mLOAD_FAST[0m(0, self) 
146: [33mLOAD_ATTR[0m(10, num_heads) 
147: [33mBINARY_MULTIPLY[0m(None, None) 
148: [33mLOAD_CONST[0m(5, -1) 
149: [33mLOAD_FAST[0m(0, self) 
150: [33mLOAD_ATTR[0m(11, head_dim) 
151: [33mBUILD_TUPLE[0m(3, 3) 
152: [33mSTORE_FAST[0m(14, proj_shape) 
153: [33mLOAD_FAST[0m(0, self) 
154: [33mLOAD_METHOD[0m(4, _shape) 
155: [33mLOAD_FAST[0m(11, query_states) 
156: [33mLOAD_FAST[0m(9, tgt_len) 
157: [33mLOAD_FAST[0m(8, bsz) 
158: [33mCALL_METHOD[0m(3, 3) 
159: [33mLOAD_ATTR[0m(12, view) 
160: [33mLOAD_FAST[0m(14, proj_shape) 
161: [33mCALL_FUNCTION_EX[0m(0, 0) 
162: [33mSTORE_FAST[0m(11, query_states) 
163: [33mLOAD_FAST[0m(12, key_states) 
164: [33mLOAD_ATTR[0m(13, reshape) 
165: [33mLOAD_FAST[0m(14, proj_shape) 
166: [33mCALL_FUNCTION_EX[0m(0, 0) 
167: [33mSTORE_FAST[0m(12, key_states) 
168: [33mLOAD_FAST[0m(13, value_states) 
169: [33mLOAD_ATTR[0m(13, reshape) 
170: [33mLOAD_FAST[0m(14, proj_shape) 
171: [33mCALL_FUNCTION_EX[0m(0, 0) 
172: [33mSTORE_FAST[0m(13, value_states) 
173: [33mLOAD_FAST[0m(12, key_states) 
174: [33mLOAD_METHOD[0m(0, size) 
175: [33mLOAD_CONST[0m(4, 1) 
176: [33mCALL_METHOD[0m(1, 1) 
177: [33mSTORE_FAST[0m(15, src_len) 
178: [33mLOAD_GLOBAL[0m(7, torch) 
179: [33mLOAD_METHOD[0m(14, bmm) 
180: [33mLOAD_FAST[0m(11, query_states) 
181: [33mLOAD_FAST[0m(12, key_states) 
182: [33mLOAD_METHOD[0m(15, transpose) 
183: [33mLOAD_CONST[0m(4, 1) 
184: [33mLOAD_CONST[0m(3, 2) 
185: [33mCALL_METHOD[0m(2, 2) 
186: [33mCALL_METHOD[0m(2, 2) 
187: [33mSTORE_FAST[0m(16, attn_weights) 
188: [33mLOAD_FAST[0m(16, attn_weights) 
189: [33mLOAD_METHOD[0m(0, size) 
190: [33mCALL_METHOD[0m(0, 0) 
191: [33mLOAD_FAST[0m(8, bsz) 
192: [33mLOAD_FAST[0m(0, self) 
193: [33mLOAD_ATTR[0m(10, num_heads) 
194: [33mBINARY_MULTIPLY[0m(None, None) 
195: [33mLOAD_FAST[0m(9, tgt_len) 
196: [33mLOAD_FAST[0m(15, src_len) 
197: [33mBUILD_TUPLE[0m(3, 3) 
198: [33mCOMPARE_OP[0m(3, !=) 
199: [33mEXTENDED_ARG[0m(1, 1) 
200: [33mPOP_JUMP_IF_FALSE[0m(438, 438)  -> inst 219
201: [33mLOAD_GLOBAL[0m(16, ValueError) 
202: [33mLOAD_CONST[0m(7, Attention weights should be of size ) 
203: [33mLOAD_FAST[0m(8, bsz) 
204: [33mLOAD_FAST[0m(0, self) 
205: [33mLOAD_ATTR[0m(10, num_heads) 
206: [33mBINARY_MULTIPLY[0m(None, None) 
207: [33mLOAD_FAST[0m(9, tgt_len) 
208: [33mLOAD_FAST[0m(15, src_len) 
209: [33mBUILD_TUPLE[0m(3, 3) 
210: [33mFORMAT_VALUE[0m(0, (None, False)) 
211: [33mLOAD_CONST[0m(8, , but is ) 
212: [33mLOAD_FAST[0m(16, attn_weights) 
213: [33mLOAD_METHOD[0m(0, size) 
214: [33mCALL_METHOD[0m(0, 0) 
215: [33mFORMAT_VALUE[0m(0, (None, False)) 
216: [33mBUILD_STRING[0m(4, 4) 
217: [33mCALL_FUNCTION[0m(1, 1) 
218: [33mRAISE_VARARGS[0m(1, 1) 
219: [33mLOAD_FAST[0m(4, attention_mask) 
220: [33mLOAD_CONST[0m(1, None) 
221: [33mIS_OP[0m(1, 1) 
222: [33mEXTENDED_ARG[0m(2, 2) 
223: [33mPOP_JUMP_IF_FALSE[0m(544, 544)  -> inst 272
224: [33mLOAD_FAST[0m(4, attention_mask) 
225: [33mLOAD_METHOD[0m(0, size) 
226: [33mCALL_METHOD[0m(0, 0) 
227: [33mLOAD_FAST[0m(8, bsz) 
228: [33mLOAD_CONST[0m(4, 1) 
229: [33mLOAD_FAST[0m(9, tgt_len) 
230: [33mLOAD_FAST[0m(15, src_len) 
231: [33mBUILD_TUPLE[0m(4, 4) 
232: [33mCOMPARE_OP[0m(3, !=) 
233: [33mEXTENDED_ARG[0m(1, 1) 
234: [33mPOP_JUMP_IF_FALSE[0m(502, 502)  -> inst 251
235: [33mLOAD_GLOBAL[0m(16, ValueError) 
236: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
237: [33mLOAD_FAST[0m(8, bsz) 
238: [33mLOAD_CONST[0m(4, 1) 
239: [33mLOAD_FAST[0m(9, tgt_len) 
240: [33mLOAD_FAST[0m(15, src_len) 
241: [33mBUILD_TUPLE[0m(4, 4) 
242: [33mFORMAT_VALUE[0m(0, (None, False)) 
243: [33mLOAD_CONST[0m(8, , but is ) 
244: [33mLOAD_FAST[0m(4, attention_mask) 
245: [33mLOAD_METHOD[0m(0, size) 
246: [33mCALL_METHOD[0m(0, 0) 
247: [33mFORMAT_VALUE[0m(0, (None, False)) 
248: [33mBUILD_STRING[0m(4, 4) 
249: [33mCALL_FUNCTION[0m(1, 1) 
250: [33mRAISE_VARARGS[0m(1, 1) 
251: [33mLOAD_FAST[0m(16, attn_weights) 
252: [33mLOAD_METHOD[0m(12, view) 
253: [33mLOAD_FAST[0m(8, bsz) 
254: [33mLOAD_FAST[0m(0, self) 
255: [33mLOAD_ATTR[0m(10, num_heads) 
256: [33mLOAD_FAST[0m(9, tgt_len) 
257: [33mLOAD_FAST[0m(15, src_len) 
258: [33mCALL_METHOD[0m(4, 4) 
259: [33mLOAD_FAST[0m(4, attention_mask) 
260: [33mBINARY_ADD[0m(None, None) 
261: [33mSTORE_FAST[0m(16, attn_weights) 
262: [33mLOAD_FAST[0m(16, attn_weights) 
263: [33mLOAD_METHOD[0m(12, view) 
264: [33mLOAD_FAST[0m(8, bsz) 
265: [33mLOAD_FAST[0m(0, self) 
266: [33mLOAD_ATTR[0m(10, num_heads) 
267: [33mBINARY_MULTIPLY[0m(None, None) 
268: [33mLOAD_FAST[0m(9, tgt_len) 
269: [33mLOAD_FAST[0m(15, src_len) 
270: [33mCALL_METHOD[0m(3, 3) 
271: [33mSTORE_FAST[0m(16, attn_weights) 
272: [33mLOAD_GLOBAL[0m(17, nn) 
273: [33mLOAD_ATTR[0m(18, functional) 
274: [33mLOAD_ATTR[0m(19, softmax) 
275: [33mLOAD_FAST[0m(16, attn_weights) 
276: [33mLOAD_CONST[0m(5, -1) 
277: [33mLOAD_CONST[0m(6, ('dim',)) 
278: [33mCALL_FUNCTION_KW[0m(2, 2) 
279: [33mSTORE_FAST[0m(16, attn_weights) 
280: [33mLOAD_FAST[0m(5, layer_head_mask) 
281: [33mLOAD_CONST[0m(1, None) 
282: [33mIS_OP[0m(1, 1) 
283: [33mEXTENDED_ARG[0m(2, 2) 
284: [33mPOP_JUMP_IF_FALSE[0m(670, 670)  -> inst 335
285: [33mLOAD_FAST[0m(5, layer_head_mask) 
286: [33mLOAD_METHOD[0m(0, size) 
287: [33mCALL_METHOD[0m(0, 0) 
288: [33mLOAD_FAST[0m(0, self) 
289: [33mLOAD_ATTR[0m(10, num_heads) 
290: [33mBUILD_TUPLE[0m(1, 1) 
291: [33mCOMPARE_OP[0m(3, !=) 
292: [33mEXTENDED_ARG[0m(2, 2) 
293: [33mPOP_JUMP_IF_FALSE[0m(616, 616)  -> inst 308
294: [33mLOAD_GLOBAL[0m(16, ValueError) 
295: [33mLOAD_CONST[0m(10, Head mask for a single layer should be of size ) 
296: [33mLOAD_FAST[0m(0, self) 
297: [33mLOAD_ATTR[0m(10, num_heads) 
298: [33mBUILD_TUPLE[0m(1, 1) 
299: [33mFORMAT_VALUE[0m(0, (None, False)) 
300: [33mLOAD_CONST[0m(8, , but is ) 
301: [33mLOAD_FAST[0m(5, layer_head_mask) 
302: [33mLOAD_METHOD[0m(0, size) 
303: [33mCALL_METHOD[0m(0, 0) 
304: [33mFORMAT_VALUE[0m(0, (None, False)) 
305: [33mBUILD_STRING[0m(4, 4) 
306: [33mCALL_FUNCTION[0m(1, 1) 
307: [33mRAISE_VARARGS[0m(1, 1) 
308: [33mLOAD_FAST[0m(5, layer_head_mask) 
309: [33mLOAD_METHOD[0m(12, view) 
310: [33mLOAD_CONST[0m(4, 1) 
311: [33mLOAD_CONST[0m(5, -1) 
312: [33mLOAD_CONST[0m(4, 1) 
313: [33mLOAD_CONST[0m(4, 1) 
314: [33mCALL_METHOD[0m(4, 4) 
315: [33mLOAD_FAST[0m(16, attn_weights) 
316: [33mLOAD_METHOD[0m(12, view) 
317: [33mLOAD_FAST[0m(8, bsz) 
318: [33mLOAD_FAST[0m(0, self) 
319: [33mLOAD_ATTR[0m(10, num_heads) 
320: [33mLOAD_FAST[0m(9, tgt_len) 
321: [33mLOAD_FAST[0m(15, src_len) 
322: [33mCALL_METHOD[0m(4, 4) 
323: [33mBINARY_MULTIPLY[0m(None, None) 
324: [33mSTORE_FAST[0m(16, attn_weights) 
325: [33mLOAD_FAST[0m(16, attn_weights) 
326: [33mLOAD_METHOD[0m(12, view) 
327: [33mLOAD_FAST[0m(8, bsz) 
328: [33mLOAD_FAST[0m(0, self) 
329: [33mLOAD_ATTR[0m(10, num_heads) 
330: [33mBINARY_MULTIPLY[0m(None, None) 
331: [33mLOAD_FAST[0m(9, tgt_len) 
332: [33mLOAD_FAST[0m(15, src_len) 
333: [33mCALL_METHOD[0m(3, 3) 
334: [33mSTORE_FAST[0m(16, attn_weights) 
335: [33mLOAD_FAST[0m(6, output_attentions) 
336: [33mEXTENDED_ARG[0m(2, 2) 
337: [33mPOP_JUMP_IF_FALSE[0m(716, 716)  -> inst 358
338: [33mLOAD_FAST[0m(16, attn_weights) 
339: [33mLOAD_METHOD[0m(12, view) 
340: [33mLOAD_FAST[0m(8, bsz) 
341: [33mLOAD_FAST[0m(0, self) 
342: [33mLOAD_ATTR[0m(10, num_heads) 
343: [33mLOAD_FAST[0m(9, tgt_len) 
344: [33mLOAD_FAST[0m(15, src_len) 
345: [33mCALL_METHOD[0m(4, 4) 
346: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
347: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
348: [33mLOAD_METHOD[0m(12, view) 
349: [33mLOAD_FAST[0m(8, bsz) 
350: [33mLOAD_FAST[0m(0, self) 
351: [33mLOAD_ATTR[0m(10, num_heads) 
352: [33mBINARY_MULTIPLY[0m(None, None) 
353: [33mLOAD_FAST[0m(9, tgt_len) 
354: [33mLOAD_FAST[0m(15, src_len) 
355: [33mCALL_METHOD[0m(3, 3) 
356: [33mSTORE_FAST[0m(16, attn_weights) 
357: [33mJUMP_FORWARD[0m(4, 720)  -> inst 360
358: [33mLOAD_CONST[0m(1, None) 
359: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
360: [33mLOAD_GLOBAL[0m(17, nn) 
361: [33mLOAD_ATTR[0m(18, functional) 
362: [33mLOAD_ATTR[0m(20, dropout) 
363: [33mLOAD_FAST[0m(16, attn_weights) 
364: [33mLOAD_FAST[0m(0, self) 
365: [33mLOAD_ATTR[0m(20, dropout) 
366: [33mLOAD_FAST[0m(0, self) 
367: [33mLOAD_ATTR[0m(21, training) 
368: [33mLOAD_CONST[0m(11, ('p', 'training')) 
369: [33mCALL_FUNCTION_KW[0m(3, 3) 
370: [33mSTORE_FAST[0m(18, attn_probs) 
371: [33mLOAD_GLOBAL[0m(7, torch) 
372: [33mLOAD_METHOD[0m(14, bmm) 
373: [33mLOAD_FAST[0m(18, attn_probs) 
374: [33mLOAD_FAST[0m(13, value_states) 
375: [33mCALL_METHOD[0m(2, 2) 
376: [33mSTORE_FAST[0m(19, attn_output) 
377: [33mLOAD_FAST[0m(19, attn_output) 
378: [33mLOAD_METHOD[0m(0, size) 
379: [33mCALL_METHOD[0m(0, 0) 
380: [33mLOAD_FAST[0m(8, bsz) 
381: [33mLOAD_FAST[0m(0, self) 
382: [33mLOAD_ATTR[0m(10, num_heads) 
383: [33mBINARY_MULTIPLY[0m(None, None) 
384: [33mLOAD_FAST[0m(9, tgt_len) 
385: [33mLOAD_FAST[0m(0, self) 
386: [33mLOAD_ATTR[0m(11, head_dim) 
387: [33mBUILD_TUPLE[0m(3, 3) 
388: [33mCOMPARE_OP[0m(3, !=) 
389: [33mEXTENDED_ARG[0m(3, 3) 
390: [33mPOP_JUMP_IF_FALSE[0m(820, 820)  -> inst 410
391: [33mLOAD_GLOBAL[0m(16, ValueError) 
392: [33mLOAD_CONST[0m(12, `attn_output` should be of size ) 
393: [33mLOAD_FAST[0m(8, bsz) 
394: [33mLOAD_FAST[0m(0, self) 
395: [33mLOAD_ATTR[0m(10, num_heads) 
396: [33mBINARY_MULTIPLY[0m(None, None) 
397: [33mLOAD_FAST[0m(9, tgt_len) 
398: [33mLOAD_FAST[0m(0, self) 
399: [33mLOAD_ATTR[0m(11, head_dim) 
400: [33mBUILD_TUPLE[0m(3, 3) 
401: [33mFORMAT_VALUE[0m(0, (None, False)) 
402: [33mLOAD_CONST[0m(8, , but is ) 
403: [33mLOAD_FAST[0m(19, attn_output) 
404: [33mLOAD_METHOD[0m(0, size) 
405: [33mCALL_METHOD[0m(0, 0) 
406: [33mFORMAT_VALUE[0m(0, (None, False)) 
407: [33mBUILD_STRING[0m(4, 4) 
408: [33mCALL_FUNCTION[0m(1, 1) 
409: [33mRAISE_VARARGS[0m(1, 1) 
410: [33mLOAD_FAST[0m(19, attn_output) 
411: [33mLOAD_METHOD[0m(12, view) 
412: [33mLOAD_FAST[0m(8, bsz) 
413: [33mLOAD_FAST[0m(0, self) 
414: [33mLOAD_ATTR[0m(10, num_heads) 
415: [33mLOAD_FAST[0m(9, tgt_len) 
416: [33mLOAD_FAST[0m(0, self) 
417: [33mLOAD_ATTR[0m(11, head_dim) 
418: [33mCALL_METHOD[0m(4, 4) 
419: [33mSTORE_FAST[0m(19, attn_output) 
420: [33mLOAD_FAST[0m(19, attn_output) 
421: [33mLOAD_METHOD[0m(15, transpose) 
422: [33mLOAD_CONST[0m(4, 1) 
423: [33mLOAD_CONST[0m(3, 2) 
424: [33mCALL_METHOD[0m(2, 2) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(13, reshape) 
428: [33mLOAD_FAST[0m(8, bsz) 
429: [33mLOAD_FAST[0m(9, tgt_len) 
430: [33mLOAD_FAST[0m(0, self) 
431: [33mLOAD_ATTR[0m(22, embed_dim) 
432: [33mCALL_METHOD[0m(3, 3) 
433: [33mSTORE_FAST[0m(19, attn_output) 
434: [33mLOAD_FAST[0m(0, self) 
435: [33mLOAD_METHOD[0m(23, out_proj) 
436: [33mLOAD_FAST[0m(19, attn_output) 
437: [33mCALL_METHOD[0m(1, 1) 
438: [33mSTORE_FAST[0m(19, attn_output) 
439: [33mLOAD_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
441: [33mLOAD_FAST[0m(3, past_key_value) 
442: [33mBUILD_TUPLE[0m(3, 3) 
443: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('dim',)), (<class 'int'>, 2), (<class 'int'>, -1), (<class 'str'>, '`attn_output` should be of size '), (<class 'str'>, 'Input shape: Batch x Time x Channel'), (<class 'int'>, 1), (<class 'str'>, 'Head mask for a single layer should be of size '), (<class 'int'>, 0), (<class 'str'>, ', but is '), (<class 'str'>, 'Attention mask should be of size '), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, 'Attention weights should be of size '), (<class 'NoneType'>, None), (<class 'int'>, 6)]
guarded code
0: [32mLOAD_GLOBAL[0m(28, disable_trace) 
1: [32mLOAD_CONST[0m(13, 6) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(3, 3) 
5: [32mJUMP_ABSOLUTE[0m(902, 902)  -> inst 451
6: [33mLOAD_FAST[0m(2, key_value_states) 
7: [33mLOAD_CONST[0m(12, None) 
8: [33mIS_OP[0m(1, 1) 
9: [33mSTORE_FAST[0m(7, is_cross_attention) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_METHOD[0m(0, size) 
12: [33mCALL_METHOD[0m(0, 0) 
13: [33mUNPACK_SEQUENCE[0m(3, 3) 
14: [33mSTORE_FAST[0m(8, bsz) 
15: [33mSTORE_FAST[0m(9, tgt_len) 
16: [33mSTORE_FAST[0m(10, _) 
17: [33mLOAD_FAST[0m(0, self) 
18: [33mLOAD_METHOD[0m(1, q_proj) 
19: [33mLOAD_FAST[0m(1, hidden_states) 
20: [33mCALL_METHOD[0m(1, 1) 
21: [33mLOAD_FAST[0m(0, self) 
22: [33mLOAD_ATTR[0m(2, scaling) 
23: [33mBINARY_MULTIPLY[0m(None, None) 
24: [33mSTORE_FAST[0m(11, query_states) 
25: [33mLOAD_FAST[0m(7, is_cross_attention) 
26: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
27: [33mLOAD_FAST[0m(3, past_key_value) 
28: [33mLOAD_CONST[0m(12, None) 
29: [33mIS_OP[0m(1, 1) 
30: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
31: [33mLOAD_FAST[0m(3, past_key_value) 
32: [33mLOAD_CONST[0m(7, 0) 
33: [33mBINARY_SUBSCR[0m(None, None) 
34: [33mLOAD_ATTR[0m(3, shape) 
35: [33mLOAD_CONST[0m(1, 2) 
36: [33mBINARY_SUBSCR[0m(None, None) 
37: [33mLOAD_FAST[0m(2, key_value_states) 
38: [33mLOAD_ATTR[0m(3, shape) 
39: [33mLOAD_CONST[0m(5, 1) 
40: [33mBINARY_SUBSCR[0m(None, None) 
41: [33mCOMPARE_OP[0m(2, ==) 
42: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
43: [33mLOAD_FAST[0m(3, past_key_value) 
44: [33mLOAD_CONST[0m(7, 0) 
45: [33mBINARY_SUBSCR[0m(None, None) 
46: [33mSTORE_FAST[0m(12, key_states) 
47: [33mLOAD_FAST[0m(3, past_key_value) 
48: [33mLOAD_CONST[0m(5, 1) 
49: [33mBINARY_SUBSCR[0m(None, None) 
50: [33mSTORE_FAST[0m(13, value_states) 
51: [33mJUMP_FORWARD[0m(180, 284)  -> inst 142
52: [33mLOAD_FAST[0m(7, is_cross_attention) 
53: [33mPOP_JUMP_IF_FALSE[0m(150, 150)  -> inst 75
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_METHOD[0m(4, _shape) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_METHOD[0m(5, k_proj) 
58: [33mLOAD_FAST[0m(2, key_value_states) 
59: [33mCALL_METHOD[0m(1, 1) 
60: [33mLOAD_CONST[0m(2, -1) 
61: [33mLOAD_FAST[0m(8, bsz) 
62: [33mCALL_METHOD[0m(3, 3) 
63: [33mSTORE_FAST[0m(12, key_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_METHOD[0m(4, _shape) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_METHOD[0m(6, v_proj) 
68: [33mLOAD_FAST[0m(2, key_value_states) 
69: [33mCALL_METHOD[0m(1, 1) 
70: [33mLOAD_CONST[0m(2, -1) 
71: [33mLOAD_FAST[0m(8, bsz) 
72: [33mCALL_METHOD[0m(3, 3) 
73: [33mSTORE_FAST[0m(13, value_states) 
74: [33mJUMP_FORWARD[0m(134, 284)  -> inst 142
75: [33mLOAD_FAST[0m(3, past_key_value) 
76: [33mLOAD_CONST[0m(12, None) 
77: [33mIS_OP[0m(1, 1) 
78: [33mPOP_JUMP_IF_FALSE[0m(244, 244)  -> inst 122
79: [33mLOAD_FAST[0m(0, self) 
80: [33mLOAD_METHOD[0m(4, _shape) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(5, k_proj) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mLOAD_CONST[0m(2, -1) 
86: [33mLOAD_FAST[0m(8, bsz) 
87: [33mCALL_METHOD[0m(3, 3) 
88: [33mSTORE_FAST[0m(12, key_states) 
89: [33mLOAD_FAST[0m(0, self) 
90: [33mLOAD_METHOD[0m(4, _shape) 
91: [33mLOAD_FAST[0m(0, self) 
92: [33mLOAD_METHOD[0m(6, v_proj) 
93: [33mLOAD_FAST[0m(1, hidden_states) 
94: [33mCALL_METHOD[0m(1, 1) 
95: [33mLOAD_CONST[0m(2, -1) 
96: [33mLOAD_FAST[0m(8, bsz) 
97: [33mCALL_METHOD[0m(3, 3) 
98: [33mSTORE_FAST[0m(13, value_states) 
99: [33mLOAD_GLOBAL[0m(7, torch) 
100: [33mLOAD_ATTR[0m(8, cat) 
101: [33mLOAD_FAST[0m(3, past_key_value) 
102: [33mLOAD_CONST[0m(7, 0) 
103: [33mBINARY_SUBSCR[0m(None, None) 
104: [33mLOAD_FAST[0m(12, key_states) 
105: [33mBUILD_LIST[0m(2, 2) 
106: [33mLOAD_CONST[0m(1, 2) 
107: [33mLOAD_CONST[0m(0, ('dim',)) 
108: [33mCALL_FUNCTION_KW[0m(2, 2) 
109: [33mSTORE_FAST[0m(12, key_states) 
110: [33mLOAD_GLOBAL[0m(7, torch) 
111: [33mLOAD_ATTR[0m(8, cat) 
112: [33mLOAD_FAST[0m(3, past_key_value) 
113: [33mLOAD_CONST[0m(5, 1) 
114: [33mBINARY_SUBSCR[0m(None, None) 
115: [33mLOAD_FAST[0m(13, value_states) 
116: [33mBUILD_LIST[0m(2, 2) 
117: [33mLOAD_CONST[0m(1, 2) 
118: [33mLOAD_CONST[0m(0, ('dim',)) 
119: [33mCALL_FUNCTION_KW[0m(2, 2) 
120: [33mSTORE_FAST[0m(13, value_states) 
121: [33mJUMP_FORWARD[0m(40, 284)  -> inst 142
122: [33mLOAD_FAST[0m(0, self) 
123: [33mLOAD_METHOD[0m(4, _shape) 
124: [33mLOAD_FAST[0m(0, self) 
125: [33mLOAD_METHOD[0m(5, k_proj) 
126: [33mLOAD_FAST[0m(1, hidden_states) 
127: [33mCALL_METHOD[0m(1, 1) 
128: [33mLOAD_CONST[0m(2, -1) 
129: [33mLOAD_FAST[0m(8, bsz) 
130: [33mCALL_METHOD[0m(3, 3) 
131: [33mSTORE_FAST[0m(12, key_states) 
132: [33mLOAD_FAST[0m(0, self) 
133: [33mLOAD_METHOD[0m(4, _shape) 
134: [33mLOAD_FAST[0m(0, self) 
135: [33mLOAD_METHOD[0m(6, v_proj) 
136: [33mLOAD_FAST[0m(1, hidden_states) 
137: [33mCALL_METHOD[0m(1, 1) 
138: [33mLOAD_CONST[0m(2, -1) 
139: [33mLOAD_FAST[0m(8, bsz) 
140: [33mCALL_METHOD[0m(3, 3) 
141: [33mSTORE_FAST[0m(13, value_states) 
142: [33mLOAD_FAST[0m(0, self) 
143: [33mLOAD_ATTR[0m(9, is_decoder) 
144: [32mEXTENDED_ARG[0m(1, 1) 
145: [33mPOP_JUMP_IF_FALSE[0m(300, 300)  -> inst 150
146: [33mLOAD_FAST[0m(12, key_states) 
147: [33mLOAD_FAST[0m(13, value_states) 
148: [33mBUILD_TUPLE[0m(2, 2) 
149: [33mSTORE_FAST[0m(3, past_key_value) 
150: [33mLOAD_FAST[0m(8, bsz) 
151: [33mLOAD_FAST[0m(0, self) 
152: [33mLOAD_ATTR[0m(10, num_heads) 
153: [33mBINARY_MULTIPLY[0m(None, None) 
154: [33mLOAD_CONST[0m(2, -1) 
155: [33mLOAD_FAST[0m(0, self) 
156: [33mLOAD_ATTR[0m(11, head_dim) 
157: [33mBUILD_TUPLE[0m(3, 3) 
158: [33mSTORE_FAST[0m(14, proj_shape) 
159: [33mLOAD_FAST[0m(0, self) 
160: [33mLOAD_METHOD[0m(4, _shape) 
161: [33mLOAD_FAST[0m(11, query_states) 
162: [33mLOAD_FAST[0m(9, tgt_len) 
163: [33mLOAD_FAST[0m(8, bsz) 
164: [33mCALL_METHOD[0m(3, 3) 
165: [33mLOAD_ATTR[0m(12, view) 
166: [33mLOAD_FAST[0m(14, proj_shape) 
167: [33mCALL_FUNCTION_EX[0m(0, 0) 
168: [33mSTORE_FAST[0m(11, query_states) 
169: [33mLOAD_FAST[0m(12, key_states) 
170: [33mLOAD_ATTR[0m(13, reshape) 
171: [33mLOAD_FAST[0m(14, proj_shape) 
172: [33mCALL_FUNCTION_EX[0m(0, 0) 
173: [33mSTORE_FAST[0m(12, key_states) 
174: [33mLOAD_FAST[0m(13, value_states) 
175: [33mLOAD_ATTR[0m(13, reshape) 
176: [33mLOAD_FAST[0m(14, proj_shape) 
177: [33mCALL_FUNCTION_EX[0m(0, 0) 
178: [33mSTORE_FAST[0m(13, value_states) 
179: [33mLOAD_FAST[0m(12, key_states) 
180: [33mLOAD_METHOD[0m(0, size) 
181: [33mLOAD_CONST[0m(5, 1) 
182: [33mCALL_METHOD[0m(1, 1) 
183: [33mSTORE_FAST[0m(15, src_len) 
184: [33mLOAD_GLOBAL[0m(7, torch) 
185: [33mLOAD_METHOD[0m(14, bmm) 
186: [33mLOAD_FAST[0m(11, query_states) 
187: [33mLOAD_FAST[0m(12, key_states) 
188: [33mLOAD_METHOD[0m(15, transpose) 
189: [33mLOAD_CONST[0m(5, 1) 
190: [33mLOAD_CONST[0m(1, 2) 
191: [33mCALL_METHOD[0m(2, 2) 
192: [33mCALL_METHOD[0m(2, 2) 
193: [33mSTORE_FAST[0m(16, attn_weights) 
194: [33mLOAD_FAST[0m(16, attn_weights) 
195: [33mLOAD_METHOD[0m(0, size) 
196: [33mCALL_METHOD[0m(0, 0) 
197: [33mLOAD_FAST[0m(8, bsz) 
198: [33mLOAD_FAST[0m(0, self) 
199: [33mLOAD_ATTR[0m(10, num_heads) 
200: [33mBINARY_MULTIPLY[0m(None, None) 
201: [33mLOAD_FAST[0m(9, tgt_len) 
202: [33mLOAD_FAST[0m(15, src_len) 
203: [33mBUILD_TUPLE[0m(3, 3) 
204: [33mCOMPARE_OP[0m(3, !=) 
205: [32mEXTENDED_ARG[0m(1, 1) 
206: [33mPOP_JUMP_IF_FALSE[0m(450, 450)  -> inst 225
207: [33mLOAD_GLOBAL[0m(16, ValueError) 
208: [33mLOAD_CONST[0m(11, Attention weights should be of size ) 
209: [33mLOAD_FAST[0m(8, bsz) 
210: [33mLOAD_FAST[0m(0, self) 
211: [33mLOAD_ATTR[0m(10, num_heads) 
212: [33mBINARY_MULTIPLY[0m(None, None) 
213: [33mLOAD_FAST[0m(9, tgt_len) 
214: [33mLOAD_FAST[0m(15, src_len) 
215: [33mBUILD_TUPLE[0m(3, 3) 
216: [33mFORMAT_VALUE[0m(0, (None, False)) 
217: [33mLOAD_CONST[0m(8, , but is ) 
218: [33mLOAD_FAST[0m(16, attn_weights) 
219: [33mLOAD_METHOD[0m(0, size) 
220: [33mCALL_METHOD[0m(0, 0) 
221: [33mFORMAT_VALUE[0m(0, (None, False)) 
222: [33mBUILD_STRING[0m(4, 4) 
223: [33mCALL_FUNCTION[0m(1, 1) 
224: [33mRAISE_VARARGS[0m(1, 1) 
225: [33mLOAD_FAST[0m(4, attention_mask) 
226: [33mLOAD_CONST[0m(12, None) 
227: [33mIS_OP[0m(1, 1) 
228: [32mEXTENDED_ARG[0m(2, 2) 
229: [33mPOP_JUMP_IF_FALSE[0m(556, 556)  -> inst 278
230: [33mLOAD_FAST[0m(4, attention_mask) 
231: [33mLOAD_METHOD[0m(0, size) 
232: [33mCALL_METHOD[0m(0, 0) 
233: [33mLOAD_FAST[0m(8, bsz) 
234: [33mLOAD_CONST[0m(5, 1) 
235: [33mLOAD_FAST[0m(9, tgt_len) 
236: [33mLOAD_FAST[0m(15, src_len) 
237: [33mBUILD_TUPLE[0m(4, 4) 
238: [33mCOMPARE_OP[0m(3, !=) 
239: [32mEXTENDED_ARG[0m(2, 2) 
240: [33mPOP_JUMP_IF_FALSE[0m(514, 514)  -> inst 257
241: [33mLOAD_GLOBAL[0m(16, ValueError) 
242: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
243: [33mLOAD_FAST[0m(8, bsz) 
244: [33mLOAD_CONST[0m(5, 1) 
245: [33mLOAD_FAST[0m(9, tgt_len) 
246: [33mLOAD_FAST[0m(15, src_len) 
247: [33mBUILD_TUPLE[0m(4, 4) 
248: [33mFORMAT_VALUE[0m(0, (None, False)) 
249: [33mLOAD_CONST[0m(8, , but is ) 
250: [33mLOAD_FAST[0m(4, attention_mask) 
251: [33mLOAD_METHOD[0m(0, size) 
252: [33mCALL_METHOD[0m(0, 0) 
253: [33mFORMAT_VALUE[0m(0, (None, False)) 
254: [33mBUILD_STRING[0m(4, 4) 
255: [33mCALL_FUNCTION[0m(1, 1) 
256: [33mRAISE_VARARGS[0m(1, 1) 
257: [33mLOAD_FAST[0m(16, attn_weights) 
258: [33mLOAD_METHOD[0m(12, view) 
259: [33mLOAD_FAST[0m(8, bsz) 
260: [33mLOAD_FAST[0m(0, self) 
261: [33mLOAD_ATTR[0m(10, num_heads) 
262: [33mLOAD_FAST[0m(9, tgt_len) 
263: [33mLOAD_FAST[0m(15, src_len) 
264: [33mCALL_METHOD[0m(4, 4) 
265: [33mLOAD_FAST[0m(4, attention_mask) 
266: [33mBINARY_ADD[0m(None, None) 
267: [33mSTORE_FAST[0m(16, attn_weights) 
268: [33mLOAD_FAST[0m(16, attn_weights) 
269: [33mLOAD_METHOD[0m(12, view) 
270: [33mLOAD_FAST[0m(8, bsz) 
271: [33mLOAD_FAST[0m(0, self) 
272: [33mLOAD_ATTR[0m(10, num_heads) 
273: [33mBINARY_MULTIPLY[0m(None, None) 
274: [33mLOAD_FAST[0m(9, tgt_len) 
275: [33mLOAD_FAST[0m(15, src_len) 
276: [33mCALL_METHOD[0m(3, 3) 
277: [33mSTORE_FAST[0m(16, attn_weights) 
278: [33mLOAD_GLOBAL[0m(17, nn) 
279: [33mLOAD_ATTR[0m(18, functional) 
280: [33mLOAD_ATTR[0m(19, softmax) 
281: [33mLOAD_FAST[0m(16, attn_weights) 
282: [33mLOAD_CONST[0m(2, -1) 
283: [33mLOAD_CONST[0m(0, ('dim',)) 
284: [33mCALL_FUNCTION_KW[0m(2, 2) 
285: [33mSTORE_FAST[0m(16, attn_weights) 
286: [33mLOAD_FAST[0m(5, layer_head_mask) 
287: [33mLOAD_CONST[0m(12, None) 
288: [33mIS_OP[0m(1, 1) 
289: [32mEXTENDED_ARG[0m(2, 2) 
290: [33mPOP_JUMP_IF_FALSE[0m(682, 682)  -> inst 341
291: [33mLOAD_FAST[0m(5, layer_head_mask) 
292: [33mLOAD_METHOD[0m(0, size) 
293: [33mCALL_METHOD[0m(0, 0) 
294: [33mLOAD_FAST[0m(0, self) 
295: [33mLOAD_ATTR[0m(10, num_heads) 
296: [33mBUILD_TUPLE[0m(1, 1) 
297: [33mCOMPARE_OP[0m(3, !=) 
298: [32mEXTENDED_ARG[0m(2, 2) 
299: [33mPOP_JUMP_IF_FALSE[0m(628, 628)  -> inst 314
300: [33mLOAD_GLOBAL[0m(16, ValueError) 
301: [33mLOAD_CONST[0m(6, Head mask for a single layer should be of size ) 
302: [33mLOAD_FAST[0m(0, self) 
303: [33mLOAD_ATTR[0m(10, num_heads) 
304: [33mBUILD_TUPLE[0m(1, 1) 
305: [33mFORMAT_VALUE[0m(0, (None, False)) 
306: [33mLOAD_CONST[0m(8, , but is ) 
307: [33mLOAD_FAST[0m(5, layer_head_mask) 
308: [33mLOAD_METHOD[0m(0, size) 
309: [33mCALL_METHOD[0m(0, 0) 
310: [33mFORMAT_VALUE[0m(0, (None, False)) 
311: [33mBUILD_STRING[0m(4, 4) 
312: [33mCALL_FUNCTION[0m(1, 1) 
313: [33mRAISE_VARARGS[0m(1, 1) 
314: [33mLOAD_FAST[0m(5, layer_head_mask) 
315: [33mLOAD_METHOD[0m(12, view) 
316: [33mLOAD_CONST[0m(5, 1) 
317: [33mLOAD_CONST[0m(2, -1) 
318: [33mLOAD_CONST[0m(5, 1) 
319: [33mLOAD_CONST[0m(5, 1) 
320: [33mCALL_METHOD[0m(4, 4) 
321: [33mLOAD_FAST[0m(16, attn_weights) 
322: [33mLOAD_METHOD[0m(12, view) 
323: [33mLOAD_FAST[0m(8, bsz) 
324: [33mLOAD_FAST[0m(0, self) 
325: [33mLOAD_ATTR[0m(10, num_heads) 
326: [33mLOAD_FAST[0m(9, tgt_len) 
327: [33mLOAD_FAST[0m(15, src_len) 
328: [33mCALL_METHOD[0m(4, 4) 
329: [33mBINARY_MULTIPLY[0m(None, None) 
330: [33mSTORE_FAST[0m(16, attn_weights) 
331: [33mLOAD_FAST[0m(16, attn_weights) 
332: [33mLOAD_METHOD[0m(12, view) 
333: [33mLOAD_FAST[0m(8, bsz) 
334: [33mLOAD_FAST[0m(0, self) 
335: [33mLOAD_ATTR[0m(10, num_heads) 
336: [33mBINARY_MULTIPLY[0m(None, None) 
337: [33mLOAD_FAST[0m(9, tgt_len) 
338: [33mLOAD_FAST[0m(15, src_len) 
339: [33mCALL_METHOD[0m(3, 3) 
340: [33mSTORE_FAST[0m(16, attn_weights) 
341: [33mLOAD_FAST[0m(6, output_attentions) 
342: [32mEXTENDED_ARG[0m(2, 2) 
343: [33mPOP_JUMP_IF_FALSE[0m(728, 728)  -> inst 364
344: [33mLOAD_FAST[0m(16, attn_weights) 
345: [33mLOAD_METHOD[0m(12, view) 
346: [33mLOAD_FAST[0m(8, bsz) 
347: [33mLOAD_FAST[0m(0, self) 
348: [33mLOAD_ATTR[0m(10, num_heads) 
349: [33mLOAD_FAST[0m(9, tgt_len) 
350: [33mLOAD_FAST[0m(15, src_len) 
351: [33mCALL_METHOD[0m(4, 4) 
352: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
353: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
354: [33mLOAD_METHOD[0m(12, view) 
355: [33mLOAD_FAST[0m(8, bsz) 
356: [33mLOAD_FAST[0m(0, self) 
357: [33mLOAD_ATTR[0m(10, num_heads) 
358: [33mBINARY_MULTIPLY[0m(None, None) 
359: [33mLOAD_FAST[0m(9, tgt_len) 
360: [33mLOAD_FAST[0m(15, src_len) 
361: [33mCALL_METHOD[0m(3, 3) 
362: [33mSTORE_FAST[0m(16, attn_weights) 
363: [33mJUMP_FORWARD[0m(4, 732)  -> inst 366
364: [33mLOAD_CONST[0m(12, None) 
365: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
366: [33mLOAD_GLOBAL[0m(17, nn) 
367: [33mLOAD_ATTR[0m(18, functional) 
368: [33mLOAD_ATTR[0m(20, dropout) 
369: [33mLOAD_FAST[0m(16, attn_weights) 
370: [33mLOAD_FAST[0m(0, self) 
371: [33mLOAD_ATTR[0m(20, dropout) 
372: [33mLOAD_FAST[0m(0, self) 
373: [33mLOAD_ATTR[0m(21, training) 
374: [33mLOAD_CONST[0m(10, ('p', 'training')) 
375: [33mCALL_FUNCTION_KW[0m(3, 3) 
376: [33mSTORE_FAST[0m(18, attn_probs) 
377: [33mLOAD_GLOBAL[0m(7, torch) 
378: [33mLOAD_METHOD[0m(14, bmm) 
379: [33mLOAD_FAST[0m(18, attn_probs) 
380: [33mLOAD_FAST[0m(13, value_states) 
381: [33mCALL_METHOD[0m(2, 2) 
382: [33mSTORE_FAST[0m(19, attn_output) 
383: [33mLOAD_FAST[0m(19, attn_output) 
384: [33mLOAD_METHOD[0m(0, size) 
385: [33mCALL_METHOD[0m(0, 0) 
386: [33mLOAD_FAST[0m(8, bsz) 
387: [33mLOAD_FAST[0m(0, self) 
388: [33mLOAD_ATTR[0m(10, num_heads) 
389: [33mBINARY_MULTIPLY[0m(None, None) 
390: [33mLOAD_FAST[0m(9, tgt_len) 
391: [33mLOAD_FAST[0m(0, self) 
392: [33mLOAD_ATTR[0m(11, head_dim) 
393: [33mBUILD_TUPLE[0m(3, 3) 
394: [33mCOMPARE_OP[0m(3, !=) 
395: [32mEXTENDED_ARG[0m(3, 3) 
396: [33mPOP_JUMP_IF_FALSE[0m(832, 832)  -> inst 416
397: [33mLOAD_GLOBAL[0m(16, ValueError) 
398: [33mLOAD_CONST[0m(3, `attn_output` should be of size ) 
399: [33mLOAD_FAST[0m(8, bsz) 
400: [33mLOAD_FAST[0m(0, self) 
401: [33mLOAD_ATTR[0m(10, num_heads) 
402: [33mBINARY_MULTIPLY[0m(None, None) 
403: [33mLOAD_FAST[0m(9, tgt_len) 
404: [33mLOAD_FAST[0m(0, self) 
405: [33mLOAD_ATTR[0m(11, head_dim) 
406: [33mBUILD_TUPLE[0m(3, 3) 
407: [33mFORMAT_VALUE[0m(0, (None, False)) 
408: [33mLOAD_CONST[0m(8, , but is ) 
409: [33mLOAD_FAST[0m(19, attn_output) 
410: [33mLOAD_METHOD[0m(0, size) 
411: [33mCALL_METHOD[0m(0, 0) 
412: [33mFORMAT_VALUE[0m(0, (None, False)) 
413: [33mBUILD_STRING[0m(4, 4) 
414: [33mCALL_FUNCTION[0m(1, 1) 
415: [33mRAISE_VARARGS[0m(1, 1) 
416: [33mLOAD_FAST[0m(19, attn_output) 
417: [33mLOAD_METHOD[0m(12, view) 
418: [33mLOAD_FAST[0m(8, bsz) 
419: [33mLOAD_FAST[0m(0, self) 
420: [33mLOAD_ATTR[0m(10, num_heads) 
421: [33mLOAD_FAST[0m(9, tgt_len) 
422: [33mLOAD_FAST[0m(0, self) 
423: [33mLOAD_ATTR[0m(11, head_dim) 
424: [33mCALL_METHOD[0m(4, 4) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(15, transpose) 
428: [33mLOAD_CONST[0m(5, 1) 
429: [33mLOAD_CONST[0m(1, 2) 
430: [33mCALL_METHOD[0m(2, 2) 
431: [33mSTORE_FAST[0m(19, attn_output) 
432: [33mLOAD_FAST[0m(19, attn_output) 
433: [33mLOAD_METHOD[0m(13, reshape) 
434: [33mLOAD_FAST[0m(8, bsz) 
435: [33mLOAD_FAST[0m(9, tgt_len) 
436: [33mLOAD_FAST[0m(0, self) 
437: [33mLOAD_ATTR[0m(22, embed_dim) 
438: [33mCALL_METHOD[0m(3, 3) 
439: [33mSTORE_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(0, self) 
441: [33mLOAD_METHOD[0m(23, out_proj) 
442: [33mLOAD_FAST[0m(19, attn_output) 
443: [33mCALL_METHOD[0m(1, 1) 
444: [33mSTORE_FAST[0m(19, attn_output) 
445: [33mLOAD_FAST[0m(19, attn_output) 
446: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
447: [33mLOAD_FAST[0m(3, past_key_value) 
448: [33mBUILD_TUPLE[0m(3, 3) 
449: [32mEXTENDED_ARG[0m(3, 3) 
450: [32mJUMP_ABSOLUTE[0m(930, 930)  -> inst 465
451: [32mLOAD_GLOBAL[0m(25, guard_match) 
452: [32mLOAD_CONST[0m(13, 6) 
453: [32mLOAD_CONST[0m(7, 0) 
454: [32mLOAD_GLOBAL[0m(24, locals) 
455: [32mCALL_FUNCTION[0m(0, 0) 
456: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
457: [32mUNPACK_SEQUENCE[0m(2, 2) 
458: [32mSTORE_FAST[0m(21, __case_idx) 
459: [32mSTORE_FAST[0m(20, __graph_fn) 
460: [32mLOAD_GLOBAL[0m(26, enable_trace) 
461: [32mLOAD_CONST[0m(13, 6) 
462: [32mCALL_FUNCTION[0m(1, 1) 
463: [32mPOP_TOP[0m(None, None) 
464: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
465: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=6(0x68fd160)
push tracker due to record
push tracker 6 frame 0x68fd160 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=6(0x68fd160)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=6(0x68fd160)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6] frame_id 6
enable_trace
push tracker 6 frame 0x68fd160 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
tracing opcode POP_TOP None pc=926 frame=6(0x68fd160)
process last instruction done
restart: running injected code (f_lasti=926)
tracing opcode JUMP_ABSOLUTE None pc=928 frame=6(0x68fd160)
process last instruction done
restart: running injected code (f_lasti=928)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=6(0x68fd160)
process last instruction done
tracing opcode IS_OP None pc=16 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=18 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=22 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=24 frame=6(0x68fd160)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=26 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=28 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=30 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=32 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=34 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=38 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=40 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=42 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=6(0x68fd160)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=46 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=48 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=50 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode POP_JUMP_IF_FALSE None pc=52 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=104 frame=6(0x68fd160)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=106 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=150 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=152 frame=6(0x68fd160)
process last instruction done
tracing opcode IS_OP None pc=154 frame=6(0x68fd160)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=156 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=244 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=246 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=248 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=250 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=252 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=254 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=256 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=258 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=260 frame=6(0x68fd160)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x691b490)
push tracker due to record
push tracker 7 frame 0x691b490 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x691b490)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x691b490)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x691b490 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x691b490)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x691b490)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x691b490)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x691b490)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x691b490)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x691b490)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x691b490)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x691b490)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_31 : [#users=1] = placeholder[target=tensor_31]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_31, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_31 : [#users=1] = placeholder[target=tensor_31]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_31, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x691b490)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=262 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=264 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=266 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=268 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=270 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=272 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=274 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=276 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=278 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=280 frame=6(0x68fd160)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x691ea70)
push tracker due to record
push tracker 7 frame 0x691ea70 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x691ea70)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x691ea70)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x691ea70 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x691ea70)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x691ea70)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x691ea70)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x691ea70)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x691ea70)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x691ea70)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x691ea70)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x691ea70)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_33 : [#users=1] = placeholder[target=tensor_33]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_33, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_33 : [#users=1] = placeholder[target=tensor_33]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_33, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x691ea70)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=282 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=284 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=286 frame=6(0x68fd160)
process last instruction done
tracing opcode EXTENDED_ARG None pc=288 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=300 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=302 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=304 frame=6(0x68fd160)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=306 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=308 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=310 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=312 frame=6(0x68fd160)
process last instruction done
tracing opcode BUILD_TUPLE None pc=314 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=316 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=318 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=320 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=322 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=324 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=326 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=328 frame=6(0x68fd160)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x150b33d48dd0)
push tracker due to record
push tracker 7 frame 0x150b33d48dd0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x150b33d48dd0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x150b33d48dd0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x150b33d48dd0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x150b33d48dd0)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x150b33d48dd0)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x150b33d48dd0)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x150b33d48dd0)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_35 : [#users=1] = placeholder[target=tensor_35]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_35, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_35 : [#users=1] = placeholder[target=tensor_35]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_35, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x150b33d48dd0)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode LOAD_ATTR None pc=330 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=332 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=334 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=336 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=338 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=340 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=342 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=344 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=346 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=348 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=350 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=352 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=354 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=356 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=358 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=360 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=362 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=364 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=366 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=368 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=370 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=372 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=374 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=376 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=378 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=380 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=382 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=384 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=386 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=388 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=390 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=392 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=394 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=396 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=398 frame=6(0x68fd160)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=400 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=402 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=404 frame=6(0x68fd160)
process last instruction done
tracing opcode BUILD_TUPLE None pc=406 frame=6(0x68fd160)
process last instruction done
tracing opcode COMPARE_OP None pc=408 frame=6(0x68fd160)
process last instruction done
tracing opcode EXTENDED_ARG None pc=410 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=450 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=452 frame=6(0x68fd160)
process last instruction done
tracing opcode IS_OP None pc=454 frame=6(0x68fd160)
process last instruction done
tracing opcode EXTENDED_ARG None pc=456 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=460 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=462 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=464 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=466 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=468 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=470 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=472 frame=6(0x68fd160)
process last instruction done
tracing opcode BUILD_TUPLE None pc=474 frame=6(0x68fd160)
process last instruction done
tracing opcode COMPARE_OP None pc=476 frame=6(0x68fd160)
process last instruction done
tracing opcode EXTENDED_ARG None pc=478 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=514 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=516 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=518 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=520 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=522 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=524 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=526 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=528 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=530 frame=6(0x68fd160)
process last instruction done
tracing opcode BINARY_ADD None pc=532 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=534 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=536 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=538 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=540 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=542 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=544 frame=6(0x68fd160)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=546 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=548 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=550 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=552 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=554 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=556 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=558 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=560 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=562 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=564 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=566 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=568 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=570 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=572 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=574 frame=6(0x68fd160)
process last instruction done
tracing opcode IS_OP None pc=576 frame=6(0x68fd160)
process last instruction done
tracing opcode EXTENDED_ARG None pc=578 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=682 frame=6(0x68fd160)
process last instruction done
tracing opcode EXTENDED_ARG None pc=684 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=728 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=730 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=732 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=734 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=736 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=738 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=740 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=742 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=744 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=746 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=748 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=750 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=752 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=754 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=756 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=758 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=760 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=762 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=764 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=766 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=768 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=770 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=772 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=774 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=776 frame=6(0x68fd160)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=778 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=780 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=782 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=784 frame=6(0x68fd160)
process last instruction done
tracing opcode BUILD_TUPLE None pc=786 frame=6(0x68fd160)
process last instruction done
tracing opcode COMPARE_OP None pc=788 frame=6(0x68fd160)
process last instruction done
tracing opcode EXTENDED_ARG None pc=790 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=832 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=834 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=836 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=838 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=840 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=842 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=844 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=846 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=848 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=850 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=852 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=854 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=856 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_CONST None pc=858 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=860 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=862 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=864 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=866 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=868 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=870 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=872 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_ATTR None pc=874 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=876 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=878 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=880 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_METHOD None pc=882 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=884 frame=6(0x68fd160)
process last instruction done
tracing opcode CALL_METHOD None pc=886 frame=6(0x68fd160)
process last instruction done
tracing opcode STORE_FAST None pc=888 frame=6(0x68fd160)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=890 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=892 frame=6(0x68fd160)
process last instruction done
tracing opcode LOAD_FAST None pc=894 frame=6(0x68fd160)
process last instruction done
tracing opcode BUILD_TUPLE None pc=896 frame=6(0x68fd160)
process last instruction done
tracing opcode EXTENDED_ARG None pc=898 frame=6(0x68fd160)
process last instruction done
restart: running injected code (f_lasti=898)
commiting 0 443 [32mRETURN_VALUE[0m(None, None)  898
graph graph():
    %tensor_30 : [#users=3] = placeholder[target=tensor_30]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_30,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_30,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_30,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_37 : [#users=1] = placeholder[target=tensor_37]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_37), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
callee is full graph, merge to caller
to merge graph():
    %tensor_30 : [#users=3] = placeholder[target=tensor_30]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_30,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_30,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_30,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_37 : [#users=1] = placeholder[target=tensor_37]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_37), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
tracing opcode RETURN_VALUE None pc=930 frame=6(0x68fd160)
process last instruction done
restart: running injected code (f_lasti=930)
before pop_tracker [0, 2, 5, 6] frame_id 6
tracing return in /home/drc/frontend/test/simple.py
tracing opcode UNPACK_SEQUENCE None pc=32 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=34 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=36 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=38 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=40 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=42 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=46 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=48 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=50 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=52 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=54 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_CONST None pc=56 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=58 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=60 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=62 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=64 frame=5(0x6891e60)
process last instruction done
tracing opcode BINARY_ADD None pc=66 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=68 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=70 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_METHOD None pc=72 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=74 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_METHOD None pc=76 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=78 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=80 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=82 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=84 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_METHOD None pc=86 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=88 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_METHOD None pc=90 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=92 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_METHOD None pc=94 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_METHOD None pc=96 frame=5(0x6891e60)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py 8 0x6825ce0 forward
0: [33mLOAD_FAST[0m(0, self) 
1: [33mLOAD_METHOD[0m(0, act) 
2: [33mLOAD_FAST[0m(1, input) 
3: [33mCALL_METHOD[0m(1, 1) 
4: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'NoneType'>, None), (<class 'int'>, 8), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(5, disable_trace) 
1: [32mLOAD_CONST[0m(1, 8) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(20, 20)  -> inst 10
5: [33mLOAD_FAST[0m(0, self) 
6: [33mLOAD_METHOD[0m(0, act) 
7: [33mLOAD_FAST[0m(1, input) 
8: [33mCALL_METHOD[0m(1, 1) 
9: [32mJUMP_ABSOLUTE[0m(48, 48)  -> inst 24
10: [32mLOAD_GLOBAL[0m(2, guard_match) 
11: [32mLOAD_CONST[0m(1, 8) 
12: [32mLOAD_CONST[0m(2, 0) 
13: [32mLOAD_GLOBAL[0m(1, locals) 
14: [32mCALL_FUNCTION[0m(0, 0) 
15: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
16: [32mUNPACK_SEQUENCE[0m(2, 2) 
17: [32mSTORE_FAST[0m(3, __case_idx) 
18: [32mSTORE_FAST[0m(2, __graph_fn) 
19: [32mLOAD_GLOBAL[0m(3, enable_trace) 
20: [32mLOAD_CONST[0m(1, 8) 
21: [32mCALL_FUNCTION[0m(1, 1) 
22: [32mPOP_TOP[0m(None, None) 
23: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
24: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_GLOBAL None pc=0 frame=8(0x150abc0ef840)
push tracker due to record
push tracker 8 frame 0x150abc0ef840 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=8(0x150abc0ef840)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=8(0x150abc0ef840)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 8] frame_id 8
enable_trace
push tracker 8 frame 0x150abc0ef840 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
tracing opcode POP_TOP None pc=44 frame=8(0x150abc0ef840)
process last instruction done
restart: running injected code (f_lasti=44)
tracing opcode JUMP_ABSOLUTE None pc=46 frame=8(0x150abc0ef840)
process last instruction done
restart: running injected code (f_lasti=46)
tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_FAST None pc=10 frame=8(0x150abc0ef840)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=8(0x150abc0ef840)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=8(0x150abc0ef840)
process last instruction done
tracing opcode CALL_METHOD None pc=16 frame=8(0x150abc0ef840)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=18 frame=8(0x150abc0ef840)
process last instruction done
restart: running injected code (f_lasti=18)
commiting 0 4 [32mRETURN_VALUE[0m(None, None)  18
graph graph():
    %tensor_40 : [#users=1] = placeholder[target=tensor_40]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_40,), kwargs = {})
    return (gelu,)
callee is full graph, merge to caller
to merge graph():
    %tensor_40 : [#users=1] = placeholder[target=tensor_40]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_40,), kwargs = {})
    return (gelu,)
tracing opcode RETURN_VALUE None pc=48 frame=8(0x150abc0ef840)
process last instruction done
restart: running injected code (f_lasti=48)
before pop_tracker [0, 2, 5, 8] frame_id 8
tracing return in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode STORE_FAST None pc=98 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=100 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=102 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=104 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=106 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=108 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=110 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=112 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=114 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_CONST None pc=116 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=118 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=120 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=122 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_METHOD None pc=124 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=126 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_METHOD None pc=128 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=130 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=132 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=134 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=136 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=138 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=140 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=142 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=144 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=146 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_CONST None pc=148 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=150 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=152 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=154 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=156 frame=5(0x6891e60)
process last instruction done
tracing opcode BINARY_ADD None pc=158 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=160 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=162 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_METHOD None pc=164 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_FAST None pc=166 frame=5(0x6891e60)
process last instruction done
tracing opcode CALL_METHOD None pc=168 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=170 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=172 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=174 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=176 frame=5(0x6891e60)
process last instruction done
tracing opcode LOAD_ATTR None pc=178 frame=5(0x6891e60)
process last instruction done
tracing opcode COMPARE_OP None pc=180 frame=5(0x6891e60)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=182 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=248 frame=5(0x6891e60)
process last instruction done
tracing opcode BUILD_TUPLE None pc=250 frame=5(0x6891e60)
process last instruction done
tracing opcode STORE_FAST None pc=252 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=254 frame=5(0x6891e60)
process last instruction done
tracing opcode EXTENDED_ARG None pc=256 frame=5(0x6891e60)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=270 frame=5(0x6891e60)
process last instruction done
tracing opcode EXTENDED_ARG None pc=272 frame=5(0x6891e60)
process last instruction done
restart: running injected code (f_lasti=272)
commiting 0 130 [32mRETURN_VALUE[0m(None, None)  272
graph graph():
    %tensor_28 : [#users=4] = placeholder[target=tensor_28]
    %tensor_29 : [#users=1] = placeholder[target=tensor_29]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_28,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_28,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_28,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_29), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_28, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
callee is full graph, merge to caller
to merge graph():
    %tensor_28 : [#users=4] = placeholder[target=tensor_28]
    %tensor_29 : [#users=1] = placeholder[target=tensor_29]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_28,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_28,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_28,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_29), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_28, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
tracing opcode RETURN_VALUE None pc=304 frame=5(0x6891e60)
process last instruction done
restart: running injected code (f_lasti=304)
before pop_tracker [0, 2, 5] frame_id 5
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=552 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=554 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=556 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=558 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=560 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=562 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=564 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode FOR_ITER None pc=386 frame=2(0x688b4d0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=388 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=390 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=392 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=394 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=396 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=410 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=412 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=414 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=416 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=418 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=420 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=422 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=424 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=426 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=430 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=432 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=434 frame=2(0x688b4d0)
process last instruction done
tracing opcode COMPARE_OP None pc=436 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=438 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=448 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=450 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=452 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=520 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=522 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=524 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=526 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=528 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=530 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=532 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=544 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=546 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=548 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=550 frame=2(0x688b4d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 5 0x150b33c83640 forward
0: [33mLOAD_FAST[0m(1, hidden_states) 
1: [33mSTORE_FAST[0m(5, residual) 
2: [33mLOAD_FAST[0m(0, self) 
3: [33mLOAD_ATTR[0m(0, self_attn) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_FAST[0m(2, attention_mask) 
6: [33mLOAD_FAST[0m(3, layer_head_mask) 
7: [33mLOAD_FAST[0m(4, output_attentions) 
8: [33mLOAD_CONST[0m(1, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
9: [33mCALL_FUNCTION_KW[0m(4, 4) 
10: [33mUNPACK_SEQUENCE[0m(3, 3) 
11: [33mSTORE_FAST[0m(1, hidden_states) 
12: [33mSTORE_FAST[0m(6, attn_weights) 
13: [33mSTORE_FAST[0m(7, _) 
14: [33mLOAD_GLOBAL[0m(1, nn) 
15: [33mLOAD_ATTR[0m(2, functional) 
16: [33mLOAD_ATTR[0m(3, dropout) 
17: [33mLOAD_FAST[0m(1, hidden_states) 
18: [33mLOAD_FAST[0m(0, self) 
19: [33mLOAD_ATTR[0m(3, dropout) 
20: [33mLOAD_FAST[0m(0, self) 
21: [33mLOAD_ATTR[0m(4, training) 
22: [33mLOAD_CONST[0m(2, ('p', 'training')) 
23: [33mCALL_FUNCTION_KW[0m(3, 3) 
24: [33mSTORE_FAST[0m(1, hidden_states) 
25: [33mLOAD_FAST[0m(5, residual) 
26: [33mLOAD_FAST[0m(1, hidden_states) 
27: [33mBINARY_ADD[0m(None, None) 
28: [33mSTORE_FAST[0m(1, hidden_states) 
29: [33mLOAD_FAST[0m(0, self) 
30: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
31: [33mLOAD_FAST[0m(1, hidden_states) 
32: [33mCALL_METHOD[0m(1, 1) 
33: [33mSTORE_FAST[0m(1, hidden_states) 
34: [33mLOAD_FAST[0m(1, hidden_states) 
35: [33mSTORE_FAST[0m(5, residual) 
36: [33mLOAD_FAST[0m(0, self) 
37: [33mLOAD_METHOD[0m(6, activation_fn) 
38: [33mLOAD_FAST[0m(0, self) 
39: [33mLOAD_METHOD[0m(7, fc1) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mCALL_METHOD[0m(1, 1) 
42: [33mCALL_METHOD[0m(1, 1) 
43: [33mSTORE_FAST[0m(1, hidden_states) 
44: [33mLOAD_GLOBAL[0m(1, nn) 
45: [33mLOAD_ATTR[0m(2, functional) 
46: [33mLOAD_ATTR[0m(3, dropout) 
47: [33mLOAD_FAST[0m(1, hidden_states) 
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_ATTR[0m(8, activation_dropout) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_ATTR[0m(4, training) 
52: [33mLOAD_CONST[0m(2, ('p', 'training')) 
53: [33mCALL_FUNCTION_KW[0m(3, 3) 
54: [33mSTORE_FAST[0m(1, hidden_states) 
55: [33mLOAD_FAST[0m(0, self) 
56: [33mLOAD_METHOD[0m(9, fc2) 
57: [33mLOAD_FAST[0m(1, hidden_states) 
58: [33mCALL_METHOD[0m(1, 1) 
59: [33mSTORE_FAST[0m(1, hidden_states) 
60: [33mLOAD_GLOBAL[0m(1, nn) 
61: [33mLOAD_ATTR[0m(2, functional) 
62: [33mLOAD_ATTR[0m(3, dropout) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_ATTR[0m(3, dropout) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_ATTR[0m(4, training) 
68: [33mLOAD_CONST[0m(2, ('p', 'training')) 
69: [33mCALL_FUNCTION_KW[0m(3, 3) 
70: [33mSTORE_FAST[0m(1, hidden_states) 
71: [33mLOAD_FAST[0m(5, residual) 
72: [33mLOAD_FAST[0m(1, hidden_states) 
73: [33mBINARY_ADD[0m(None, None) 
74: [33mSTORE_FAST[0m(1, hidden_states) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(10, final_layer_norm) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mSTORE_FAST[0m(1, hidden_states) 
80: [33mLOAD_FAST[0m(1, hidden_states) 
81: [33mLOAD_ATTR[0m(11, dtype) 
82: [33mLOAD_GLOBAL[0m(12, torch) 
83: [33mLOAD_ATTR[0m(13, float16) 
84: [33mCOMPARE_OP[0m(2, ==) 
85: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
86: [33mLOAD_GLOBAL[0m(12, torch) 
87: [33mLOAD_METHOD[0m(14, isinf) 
88: [33mLOAD_FAST[0m(1, hidden_states) 
89: [33mCALL_METHOD[0m(1, 1) 
90: [33mLOAD_METHOD[0m(15, any) 
91: [33mCALL_METHOD[0m(0, 0) 
92: [33mPOP_JUMP_IF_TRUE[0m(200, 200)  -> inst 100
93: [33mLOAD_GLOBAL[0m(12, torch) 
94: [33mLOAD_METHOD[0m(16, isnan) 
95: [33mLOAD_FAST[0m(1, hidden_states) 
96: [33mCALL_METHOD[0m(1, 1) 
97: [33mLOAD_METHOD[0m(15, any) 
98: [33mCALL_METHOD[0m(0, 0) 
99: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
100: [33mLOAD_GLOBAL[0m(12, torch) 
101: [33mLOAD_METHOD[0m(17, finfo) 
102: [33mLOAD_FAST[0m(1, hidden_states) 
103: [33mLOAD_ATTR[0m(11, dtype) 
104: [33mCALL_METHOD[0m(1, 1) 
105: [33mLOAD_ATTR[0m(18, max) 
106: [33mLOAD_CONST[0m(3, 1000) 
107: [33mBINARY_SUBTRACT[0m(None, None) 
108: [33mSTORE_FAST[0m(8, clamp_value) 
109: [33mLOAD_GLOBAL[0m(12, torch) 
110: [33mLOAD_ATTR[0m(19, clamp) 
111: [33mLOAD_FAST[0m(1, hidden_states) 
112: [33mLOAD_FAST[0m(8, clamp_value) 
113: [33mUNARY_NEGATIVE[0m(None, None) 
114: [33mLOAD_FAST[0m(8, clamp_value) 
115: [33mLOAD_CONST[0m(4, ('min', 'max')) 
116: [33mCALL_FUNCTION_KW[0m(3, 3) 
117: [33mSTORE_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(1, hidden_states) 
119: [33mBUILD_TUPLE[0m(1, 1) 
120: [33mSTORE_FAST[0m(9, outputs) 
121: [33mLOAD_FAST[0m(4, output_attentions) 
122: [33mEXTENDED_ARG[0m(1, 1) 
123: [33mPOP_JUMP_IF_FALSE[0m(258, 258)  -> inst 129
124: [33mLOAD_FAST[0m(9, outputs) 
125: [33mLOAD_FAST[0m(6, attn_weights) 
126: [33mBUILD_TUPLE[0m(1, 1) 
127: [33mINPLACE_ADD[0m(None, None) 
128: [33mSTORE_FAST[0m(9, outputs) 
129: [33mLOAD_FAST[0m(9, outputs) 
130: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')), (<class 'int'>, 1000), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, '\n        Args:\n            hidden_states (`torch.FloatTensor`): input to the layer of shape `(seq_len, batch, embed_dim)`\n            attention_mask (`torch.FloatTensor`): attention mask of size\n                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.\n            layer_head_mask (`torch.FloatTensor`): mask for attention heads in a given layer of size\n                `(encoder_attention_heads,)`.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n        '), (<class 'tuple'>, ('min', 'max')), (<class 'int'>, 5), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(24, disable_trace) 
1: [32mLOAD_CONST[0m(5, 5) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(1, 1) 
5: [32mJUMP_ABSOLUTE[0m(276, 276)  -> inst 138
6: [33mLOAD_FAST[0m(1, hidden_states) 
7: [33mSTORE_FAST[0m(5, residual) 
8: [33mLOAD_FAST[0m(0, self) 
9: [33mLOAD_ATTR[0m(0, self_attn) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_FAST[0m(2, attention_mask) 
12: [33mLOAD_FAST[0m(3, layer_head_mask) 
13: [33mLOAD_FAST[0m(4, output_attentions) 
14: [33mLOAD_CONST[0m(0, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
15: [33mCALL_FUNCTION_KW[0m(4, 4) 
16: [33mUNPACK_SEQUENCE[0m(3, 3) 
17: [33mSTORE_FAST[0m(1, hidden_states) 
18: [33mSTORE_FAST[0m(6, attn_weights) 
19: [33mSTORE_FAST[0m(7, _) 
20: [33mLOAD_GLOBAL[0m(1, nn) 
21: [33mLOAD_ATTR[0m(2, functional) 
22: [33mLOAD_ATTR[0m(3, dropout) 
23: [33mLOAD_FAST[0m(1, hidden_states) 
24: [33mLOAD_FAST[0m(0, self) 
25: [33mLOAD_ATTR[0m(3, dropout) 
26: [33mLOAD_FAST[0m(0, self) 
27: [33mLOAD_ATTR[0m(4, training) 
28: [33mLOAD_CONST[0m(2, ('p', 'training')) 
29: [33mCALL_FUNCTION_KW[0m(3, 3) 
30: [33mSTORE_FAST[0m(1, hidden_states) 
31: [33mLOAD_FAST[0m(5, residual) 
32: [33mLOAD_FAST[0m(1, hidden_states) 
33: [33mBINARY_ADD[0m(None, None) 
34: [33mSTORE_FAST[0m(1, hidden_states) 
35: [33mLOAD_FAST[0m(0, self) 
36: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
37: [33mLOAD_FAST[0m(1, hidden_states) 
38: [33mCALL_METHOD[0m(1, 1) 
39: [33mSTORE_FAST[0m(1, hidden_states) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mSTORE_FAST[0m(5, residual) 
42: [33mLOAD_FAST[0m(0, self) 
43: [33mLOAD_METHOD[0m(6, activation_fn) 
44: [33mLOAD_FAST[0m(0, self) 
45: [33mLOAD_METHOD[0m(7, fc1) 
46: [33mLOAD_FAST[0m(1, hidden_states) 
47: [33mCALL_METHOD[0m(1, 1) 
48: [33mCALL_METHOD[0m(1, 1) 
49: [33mSTORE_FAST[0m(1, hidden_states) 
50: [33mLOAD_GLOBAL[0m(1, nn) 
51: [33mLOAD_ATTR[0m(2, functional) 
52: [33mLOAD_ATTR[0m(3, dropout) 
53: [33mLOAD_FAST[0m(1, hidden_states) 
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_ATTR[0m(8, activation_dropout) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_ATTR[0m(4, training) 
58: [33mLOAD_CONST[0m(2, ('p', 'training')) 
59: [33mCALL_FUNCTION_KW[0m(3, 3) 
60: [33mSTORE_FAST[0m(1, hidden_states) 
61: [33mLOAD_FAST[0m(0, self) 
62: [33mLOAD_METHOD[0m(9, fc2) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mCALL_METHOD[0m(1, 1) 
65: [33mSTORE_FAST[0m(1, hidden_states) 
66: [33mLOAD_GLOBAL[0m(1, nn) 
67: [33mLOAD_ATTR[0m(2, functional) 
68: [33mLOAD_ATTR[0m(3, dropout) 
69: [33mLOAD_FAST[0m(1, hidden_states) 
70: [33mLOAD_FAST[0m(0, self) 
71: [33mLOAD_ATTR[0m(3, dropout) 
72: [33mLOAD_FAST[0m(0, self) 
73: [33mLOAD_ATTR[0m(4, training) 
74: [33mLOAD_CONST[0m(2, ('p', 'training')) 
75: [33mCALL_FUNCTION_KW[0m(3, 3) 
76: [33mSTORE_FAST[0m(1, hidden_states) 
77: [33mLOAD_FAST[0m(5, residual) 
78: [33mLOAD_FAST[0m(1, hidden_states) 
79: [33mBINARY_ADD[0m(None, None) 
80: [33mSTORE_FAST[0m(1, hidden_states) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(10, final_layer_norm) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mSTORE_FAST[0m(1, hidden_states) 
86: [33mLOAD_FAST[0m(1, hidden_states) 
87: [33mLOAD_ATTR[0m(11, dtype) 
88: [33mLOAD_GLOBAL[0m(12, torch) 
89: [33mLOAD_ATTR[0m(13, float16) 
90: [33mCOMPARE_OP[0m(2, ==) 
91: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
92: [33mLOAD_GLOBAL[0m(12, torch) 
93: [33mLOAD_METHOD[0m(14, isinf) 
94: [33mLOAD_FAST[0m(1, hidden_states) 
95: [33mCALL_METHOD[0m(1, 1) 
96: [33mLOAD_METHOD[0m(15, any) 
97: [33mCALL_METHOD[0m(0, 0) 
98: [33mPOP_JUMP_IF_TRUE[0m(212, 212)  -> inst 106
99: [33mLOAD_GLOBAL[0m(12, torch) 
100: [33mLOAD_METHOD[0m(16, isnan) 
101: [33mLOAD_FAST[0m(1, hidden_states) 
102: [33mCALL_METHOD[0m(1, 1) 
103: [33mLOAD_METHOD[0m(15, any) 
104: [33mCALL_METHOD[0m(0, 0) 
105: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
106: [33mLOAD_GLOBAL[0m(12, torch) 
107: [33mLOAD_METHOD[0m(17, finfo) 
108: [33mLOAD_FAST[0m(1, hidden_states) 
109: [33mLOAD_ATTR[0m(11, dtype) 
110: [33mCALL_METHOD[0m(1, 1) 
111: [33mLOAD_ATTR[0m(18, max) 
112: [33mLOAD_CONST[0m(1, 1000) 
113: [33mBINARY_SUBTRACT[0m(None, None) 
114: [33mSTORE_FAST[0m(8, clamp_value) 
115: [33mLOAD_GLOBAL[0m(12, torch) 
116: [33mLOAD_ATTR[0m(19, clamp) 
117: [33mLOAD_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(8, clamp_value) 
119: [33mUNARY_NEGATIVE[0m(None, None) 
120: [33mLOAD_FAST[0m(8, clamp_value) 
121: [33mLOAD_CONST[0m(4, ('min', 'max')) 
122: [33mCALL_FUNCTION_KW[0m(3, 3) 
123: [33mSTORE_FAST[0m(1, hidden_states) 
124: [33mLOAD_FAST[0m(1, hidden_states) 
125: [33mBUILD_TUPLE[0m(1, 1) 
126: [33mSTORE_FAST[0m(9, outputs) 
127: [33mLOAD_FAST[0m(4, output_attentions) 
128: [32mEXTENDED_ARG[0m(1, 1) 
129: [33mPOP_JUMP_IF_FALSE[0m(270, 270)  -> inst 135
130: [33mLOAD_FAST[0m(9, outputs) 
131: [33mLOAD_FAST[0m(6, attn_weights) 
132: [33mBUILD_TUPLE[0m(1, 1) 
133: [33mINPLACE_ADD[0m(None, None) 
134: [33mSTORE_FAST[0m(9, outputs) 
135: [33mLOAD_FAST[0m(9, outputs) 
136: [32mEXTENDED_ARG[0m(1, 1) 
137: [32mJUMP_ABSOLUTE[0m(304, 304)  -> inst 152
138: [32mLOAD_GLOBAL[0m(21, guard_match) 
139: [32mLOAD_CONST[0m(5, 5) 
140: [32mLOAD_CONST[0m(6, 0) 
141: [32mLOAD_GLOBAL[0m(20, locals) 
142: [32mCALL_FUNCTION[0m(0, 0) 
143: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
144: [32mUNPACK_SEQUENCE[0m(2, 2) 
145: [32mSTORE_FAST[0m(11, __case_idx) 
146: [32mSTORE_FAST[0m(10, __graph_fn) 
147: [32mLOAD_GLOBAL[0m(22, enable_trace) 
148: [32mLOAD_CONST[0m(5, 5) 
149: [32mCALL_FUNCTION[0m(1, 1) 
150: [32mPOP_TOP[0m(None, None) 
151: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
152: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=5(0x68e94d0)
push tracker due to record
push tracker 5 frame 0x68e94d0 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=5(0x68e94d0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=5(0x68e94d0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5] frame_id 5
enable_trace
push tracker 5 frame 0x68e94d0 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
tracing opcode POP_TOP None pc=300 frame=5(0x68e94d0)
process last instruction done
restart: running injected code (f_lasti=300)
tracing opcode JUMP_ABSOLUTE None pc=302 frame=5(0x68e94d0)
process last instruction done
restart: running injected code (f_lasti=302)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=14 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=16 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=18 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=22 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=24 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=26 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=28 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=30 frame=5(0x68e94d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 6 0x6825f10 forward
0: [33mLOAD_FAST[0m(2, key_value_states) 
1: [33mLOAD_CONST[0m(1, None) 
2: [33mIS_OP[0m(1, 1) 
3: [33mSTORE_FAST[0m(7, is_cross_attention) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_METHOD[0m(0, size) 
6: [33mCALL_METHOD[0m(0, 0) 
7: [33mUNPACK_SEQUENCE[0m(3, 3) 
8: [33mSTORE_FAST[0m(8, bsz) 
9: [33mSTORE_FAST[0m(9, tgt_len) 
10: [33mSTORE_FAST[0m(10, _) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_METHOD[0m(1, q_proj) 
13: [33mLOAD_FAST[0m(1, hidden_states) 
14: [33mCALL_METHOD[0m(1, 1) 
15: [33mLOAD_FAST[0m(0, self) 
16: [33mLOAD_ATTR[0m(2, scaling) 
17: [33mBINARY_MULTIPLY[0m(None, None) 
18: [33mSTORE_FAST[0m(11, query_states) 
19: [33mLOAD_FAST[0m(7, is_cross_attention) 
20: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
21: [33mLOAD_FAST[0m(3, past_key_value) 
22: [33mLOAD_CONST[0m(1, None) 
23: [33mIS_OP[0m(1, 1) 
24: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
25: [33mLOAD_FAST[0m(3, past_key_value) 
26: [33mLOAD_CONST[0m(2, 0) 
27: [33mBINARY_SUBSCR[0m(None, None) 
28: [33mLOAD_ATTR[0m(3, shape) 
29: [33mLOAD_CONST[0m(3, 2) 
30: [33mBINARY_SUBSCR[0m(None, None) 
31: [33mLOAD_FAST[0m(2, key_value_states) 
32: [33mLOAD_ATTR[0m(3, shape) 
33: [33mLOAD_CONST[0m(4, 1) 
34: [33mBINARY_SUBSCR[0m(None, None) 
35: [33mCOMPARE_OP[0m(2, ==) 
36: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
37: [33mLOAD_FAST[0m(3, past_key_value) 
38: [33mLOAD_CONST[0m(2, 0) 
39: [33mBINARY_SUBSCR[0m(None, None) 
40: [33mSTORE_FAST[0m(12, key_states) 
41: [33mLOAD_FAST[0m(3, past_key_value) 
42: [33mLOAD_CONST[0m(4, 1) 
43: [33mBINARY_SUBSCR[0m(None, None) 
44: [33mSTORE_FAST[0m(13, value_states) 
45: [33mJUMP_FORWARD[0m(180, 272)  -> inst 136
46: [33mLOAD_FAST[0m(7, is_cross_attention) 
47: [33mPOP_JUMP_IF_FALSE[0m(138, 138)  -> inst 69
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_METHOD[0m(4, _shape) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_METHOD[0m(5, k_proj) 
52: [33mLOAD_FAST[0m(2, key_value_states) 
53: [33mCALL_METHOD[0m(1, 1) 
54: [33mLOAD_CONST[0m(5, -1) 
55: [33mLOAD_FAST[0m(8, bsz) 
56: [33mCALL_METHOD[0m(3, 3) 
57: [33mSTORE_FAST[0m(12, key_states) 
58: [33mLOAD_FAST[0m(0, self) 
59: [33mLOAD_METHOD[0m(4, _shape) 
60: [33mLOAD_FAST[0m(0, self) 
61: [33mLOAD_METHOD[0m(6, v_proj) 
62: [33mLOAD_FAST[0m(2, key_value_states) 
63: [33mCALL_METHOD[0m(1, 1) 
64: [33mLOAD_CONST[0m(5, -1) 
65: [33mLOAD_FAST[0m(8, bsz) 
66: [33mCALL_METHOD[0m(3, 3) 
67: [33mSTORE_FAST[0m(13, value_states) 
68: [33mJUMP_FORWARD[0m(134, 272)  -> inst 136
69: [33mLOAD_FAST[0m(3, past_key_value) 
70: [33mLOAD_CONST[0m(1, None) 
71: [33mIS_OP[0m(1, 1) 
72: [33mPOP_JUMP_IF_FALSE[0m(232, 232)  -> inst 116
73: [33mLOAD_FAST[0m(0, self) 
74: [33mLOAD_METHOD[0m(4, _shape) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(5, k_proj) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mLOAD_CONST[0m(5, -1) 
80: [33mLOAD_FAST[0m(8, bsz) 
81: [33mCALL_METHOD[0m(3, 3) 
82: [33mSTORE_FAST[0m(12, key_states) 
83: [33mLOAD_FAST[0m(0, self) 
84: [33mLOAD_METHOD[0m(4, _shape) 
85: [33mLOAD_FAST[0m(0, self) 
86: [33mLOAD_METHOD[0m(6, v_proj) 
87: [33mLOAD_FAST[0m(1, hidden_states) 
88: [33mCALL_METHOD[0m(1, 1) 
89: [33mLOAD_CONST[0m(5, -1) 
90: [33mLOAD_FAST[0m(8, bsz) 
91: [33mCALL_METHOD[0m(3, 3) 
92: [33mSTORE_FAST[0m(13, value_states) 
93: [33mLOAD_GLOBAL[0m(7, torch) 
94: [33mLOAD_ATTR[0m(8, cat) 
95: [33mLOAD_FAST[0m(3, past_key_value) 
96: [33mLOAD_CONST[0m(2, 0) 
97: [33mBINARY_SUBSCR[0m(None, None) 
98: [33mLOAD_FAST[0m(12, key_states) 
99: [33mBUILD_LIST[0m(2, 2) 
100: [33mLOAD_CONST[0m(3, 2) 
101: [33mLOAD_CONST[0m(6, ('dim',)) 
102: [33mCALL_FUNCTION_KW[0m(2, 2) 
103: [33mSTORE_FAST[0m(12, key_states) 
104: [33mLOAD_GLOBAL[0m(7, torch) 
105: [33mLOAD_ATTR[0m(8, cat) 
106: [33mLOAD_FAST[0m(3, past_key_value) 
107: [33mLOAD_CONST[0m(4, 1) 
108: [33mBINARY_SUBSCR[0m(None, None) 
109: [33mLOAD_FAST[0m(13, value_states) 
110: [33mBUILD_LIST[0m(2, 2) 
111: [33mLOAD_CONST[0m(3, 2) 
112: [33mLOAD_CONST[0m(6, ('dim',)) 
113: [33mCALL_FUNCTION_KW[0m(2, 2) 
114: [33mSTORE_FAST[0m(13, value_states) 
115: [33mJUMP_FORWARD[0m(40, 272)  -> inst 136
116: [33mLOAD_FAST[0m(0, self) 
117: [33mLOAD_METHOD[0m(4, _shape) 
118: [33mLOAD_FAST[0m(0, self) 
119: [33mLOAD_METHOD[0m(5, k_proj) 
120: [33mLOAD_FAST[0m(1, hidden_states) 
121: [33mCALL_METHOD[0m(1, 1) 
122: [33mLOAD_CONST[0m(5, -1) 
123: [33mLOAD_FAST[0m(8, bsz) 
124: [33mCALL_METHOD[0m(3, 3) 
125: [33mSTORE_FAST[0m(12, key_states) 
126: [33mLOAD_FAST[0m(0, self) 
127: [33mLOAD_METHOD[0m(4, _shape) 
128: [33mLOAD_FAST[0m(0, self) 
129: [33mLOAD_METHOD[0m(6, v_proj) 
130: [33mLOAD_FAST[0m(1, hidden_states) 
131: [33mCALL_METHOD[0m(1, 1) 
132: [33mLOAD_CONST[0m(5, -1) 
133: [33mLOAD_FAST[0m(8, bsz) 
134: [33mCALL_METHOD[0m(3, 3) 
135: [33mSTORE_FAST[0m(13, value_states) 
136: [33mLOAD_FAST[0m(0, self) 
137: [33mLOAD_ATTR[0m(9, is_decoder) 
138: [33mEXTENDED_ARG[0m(1, 1) 
139: [33mPOP_JUMP_IF_FALSE[0m(288, 288)  -> inst 144
140: [33mLOAD_FAST[0m(12, key_states) 
141: [33mLOAD_FAST[0m(13, value_states) 
142: [33mBUILD_TUPLE[0m(2, 2) 
143: [33mSTORE_FAST[0m(3, past_key_value) 
144: [33mLOAD_FAST[0m(8, bsz) 
145: [33mLOAD_FAST[0m(0, self) 
146: [33mLOAD_ATTR[0m(10, num_heads) 
147: [33mBINARY_MULTIPLY[0m(None, None) 
148: [33mLOAD_CONST[0m(5, -1) 
149: [33mLOAD_FAST[0m(0, self) 
150: [33mLOAD_ATTR[0m(11, head_dim) 
151: [33mBUILD_TUPLE[0m(3, 3) 
152: [33mSTORE_FAST[0m(14, proj_shape) 
153: [33mLOAD_FAST[0m(0, self) 
154: [33mLOAD_METHOD[0m(4, _shape) 
155: [33mLOAD_FAST[0m(11, query_states) 
156: [33mLOAD_FAST[0m(9, tgt_len) 
157: [33mLOAD_FAST[0m(8, bsz) 
158: [33mCALL_METHOD[0m(3, 3) 
159: [33mLOAD_ATTR[0m(12, view) 
160: [33mLOAD_FAST[0m(14, proj_shape) 
161: [33mCALL_FUNCTION_EX[0m(0, 0) 
162: [33mSTORE_FAST[0m(11, query_states) 
163: [33mLOAD_FAST[0m(12, key_states) 
164: [33mLOAD_ATTR[0m(13, reshape) 
165: [33mLOAD_FAST[0m(14, proj_shape) 
166: [33mCALL_FUNCTION_EX[0m(0, 0) 
167: [33mSTORE_FAST[0m(12, key_states) 
168: [33mLOAD_FAST[0m(13, value_states) 
169: [33mLOAD_ATTR[0m(13, reshape) 
170: [33mLOAD_FAST[0m(14, proj_shape) 
171: [33mCALL_FUNCTION_EX[0m(0, 0) 
172: [33mSTORE_FAST[0m(13, value_states) 
173: [33mLOAD_FAST[0m(12, key_states) 
174: [33mLOAD_METHOD[0m(0, size) 
175: [33mLOAD_CONST[0m(4, 1) 
176: [33mCALL_METHOD[0m(1, 1) 
177: [33mSTORE_FAST[0m(15, src_len) 
178: [33mLOAD_GLOBAL[0m(7, torch) 
179: [33mLOAD_METHOD[0m(14, bmm) 
180: [33mLOAD_FAST[0m(11, query_states) 
181: [33mLOAD_FAST[0m(12, key_states) 
182: [33mLOAD_METHOD[0m(15, transpose) 
183: [33mLOAD_CONST[0m(4, 1) 
184: [33mLOAD_CONST[0m(3, 2) 
185: [33mCALL_METHOD[0m(2, 2) 
186: [33mCALL_METHOD[0m(2, 2) 
187: [33mSTORE_FAST[0m(16, attn_weights) 
188: [33mLOAD_FAST[0m(16, attn_weights) 
189: [33mLOAD_METHOD[0m(0, size) 
190: [33mCALL_METHOD[0m(0, 0) 
191: [33mLOAD_FAST[0m(8, bsz) 
192: [33mLOAD_FAST[0m(0, self) 
193: [33mLOAD_ATTR[0m(10, num_heads) 
194: [33mBINARY_MULTIPLY[0m(None, None) 
195: [33mLOAD_FAST[0m(9, tgt_len) 
196: [33mLOAD_FAST[0m(15, src_len) 
197: [33mBUILD_TUPLE[0m(3, 3) 
198: [33mCOMPARE_OP[0m(3, !=) 
199: [33mEXTENDED_ARG[0m(1, 1) 
200: [33mPOP_JUMP_IF_FALSE[0m(438, 438)  -> inst 219
201: [33mLOAD_GLOBAL[0m(16, ValueError) 
202: [33mLOAD_CONST[0m(7, Attention weights should be of size ) 
203: [33mLOAD_FAST[0m(8, bsz) 
204: [33mLOAD_FAST[0m(0, self) 
205: [33mLOAD_ATTR[0m(10, num_heads) 
206: [33mBINARY_MULTIPLY[0m(None, None) 
207: [33mLOAD_FAST[0m(9, tgt_len) 
208: [33mLOAD_FAST[0m(15, src_len) 
209: [33mBUILD_TUPLE[0m(3, 3) 
210: [33mFORMAT_VALUE[0m(0, (None, False)) 
211: [33mLOAD_CONST[0m(8, , but is ) 
212: [33mLOAD_FAST[0m(16, attn_weights) 
213: [33mLOAD_METHOD[0m(0, size) 
214: [33mCALL_METHOD[0m(0, 0) 
215: [33mFORMAT_VALUE[0m(0, (None, False)) 
216: [33mBUILD_STRING[0m(4, 4) 
217: [33mCALL_FUNCTION[0m(1, 1) 
218: [33mRAISE_VARARGS[0m(1, 1) 
219: [33mLOAD_FAST[0m(4, attention_mask) 
220: [33mLOAD_CONST[0m(1, None) 
221: [33mIS_OP[0m(1, 1) 
222: [33mEXTENDED_ARG[0m(2, 2) 
223: [33mPOP_JUMP_IF_FALSE[0m(544, 544)  -> inst 272
224: [33mLOAD_FAST[0m(4, attention_mask) 
225: [33mLOAD_METHOD[0m(0, size) 
226: [33mCALL_METHOD[0m(0, 0) 
227: [33mLOAD_FAST[0m(8, bsz) 
228: [33mLOAD_CONST[0m(4, 1) 
229: [33mLOAD_FAST[0m(9, tgt_len) 
230: [33mLOAD_FAST[0m(15, src_len) 
231: [33mBUILD_TUPLE[0m(4, 4) 
232: [33mCOMPARE_OP[0m(3, !=) 
233: [33mEXTENDED_ARG[0m(1, 1) 
234: [33mPOP_JUMP_IF_FALSE[0m(502, 502)  -> inst 251
235: [33mLOAD_GLOBAL[0m(16, ValueError) 
236: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
237: [33mLOAD_FAST[0m(8, bsz) 
238: [33mLOAD_CONST[0m(4, 1) 
239: [33mLOAD_FAST[0m(9, tgt_len) 
240: [33mLOAD_FAST[0m(15, src_len) 
241: [33mBUILD_TUPLE[0m(4, 4) 
242: [33mFORMAT_VALUE[0m(0, (None, False)) 
243: [33mLOAD_CONST[0m(8, , but is ) 
244: [33mLOAD_FAST[0m(4, attention_mask) 
245: [33mLOAD_METHOD[0m(0, size) 
246: [33mCALL_METHOD[0m(0, 0) 
247: [33mFORMAT_VALUE[0m(0, (None, False)) 
248: [33mBUILD_STRING[0m(4, 4) 
249: [33mCALL_FUNCTION[0m(1, 1) 
250: [33mRAISE_VARARGS[0m(1, 1) 
251: [33mLOAD_FAST[0m(16, attn_weights) 
252: [33mLOAD_METHOD[0m(12, view) 
253: [33mLOAD_FAST[0m(8, bsz) 
254: [33mLOAD_FAST[0m(0, self) 
255: [33mLOAD_ATTR[0m(10, num_heads) 
256: [33mLOAD_FAST[0m(9, tgt_len) 
257: [33mLOAD_FAST[0m(15, src_len) 
258: [33mCALL_METHOD[0m(4, 4) 
259: [33mLOAD_FAST[0m(4, attention_mask) 
260: [33mBINARY_ADD[0m(None, None) 
261: [33mSTORE_FAST[0m(16, attn_weights) 
262: [33mLOAD_FAST[0m(16, attn_weights) 
263: [33mLOAD_METHOD[0m(12, view) 
264: [33mLOAD_FAST[0m(8, bsz) 
265: [33mLOAD_FAST[0m(0, self) 
266: [33mLOAD_ATTR[0m(10, num_heads) 
267: [33mBINARY_MULTIPLY[0m(None, None) 
268: [33mLOAD_FAST[0m(9, tgt_len) 
269: [33mLOAD_FAST[0m(15, src_len) 
270: [33mCALL_METHOD[0m(3, 3) 
271: [33mSTORE_FAST[0m(16, attn_weights) 
272: [33mLOAD_GLOBAL[0m(17, nn) 
273: [33mLOAD_ATTR[0m(18, functional) 
274: [33mLOAD_ATTR[0m(19, softmax) 
275: [33mLOAD_FAST[0m(16, attn_weights) 
276: [33mLOAD_CONST[0m(5, -1) 
277: [33mLOAD_CONST[0m(6, ('dim',)) 
278: [33mCALL_FUNCTION_KW[0m(2, 2) 
279: [33mSTORE_FAST[0m(16, attn_weights) 
280: [33mLOAD_FAST[0m(5, layer_head_mask) 
281: [33mLOAD_CONST[0m(1, None) 
282: [33mIS_OP[0m(1, 1) 
283: [33mEXTENDED_ARG[0m(2, 2) 
284: [33mPOP_JUMP_IF_FALSE[0m(670, 670)  -> inst 335
285: [33mLOAD_FAST[0m(5, layer_head_mask) 
286: [33mLOAD_METHOD[0m(0, size) 
287: [33mCALL_METHOD[0m(0, 0) 
288: [33mLOAD_FAST[0m(0, self) 
289: [33mLOAD_ATTR[0m(10, num_heads) 
290: [33mBUILD_TUPLE[0m(1, 1) 
291: [33mCOMPARE_OP[0m(3, !=) 
292: [33mEXTENDED_ARG[0m(2, 2) 
293: [33mPOP_JUMP_IF_FALSE[0m(616, 616)  -> inst 308
294: [33mLOAD_GLOBAL[0m(16, ValueError) 
295: [33mLOAD_CONST[0m(10, Head mask for a single layer should be of size ) 
296: [33mLOAD_FAST[0m(0, self) 
297: [33mLOAD_ATTR[0m(10, num_heads) 
298: [33mBUILD_TUPLE[0m(1, 1) 
299: [33mFORMAT_VALUE[0m(0, (None, False)) 
300: [33mLOAD_CONST[0m(8, , but is ) 
301: [33mLOAD_FAST[0m(5, layer_head_mask) 
302: [33mLOAD_METHOD[0m(0, size) 
303: [33mCALL_METHOD[0m(0, 0) 
304: [33mFORMAT_VALUE[0m(0, (None, False)) 
305: [33mBUILD_STRING[0m(4, 4) 
306: [33mCALL_FUNCTION[0m(1, 1) 
307: [33mRAISE_VARARGS[0m(1, 1) 
308: [33mLOAD_FAST[0m(5, layer_head_mask) 
309: [33mLOAD_METHOD[0m(12, view) 
310: [33mLOAD_CONST[0m(4, 1) 
311: [33mLOAD_CONST[0m(5, -1) 
312: [33mLOAD_CONST[0m(4, 1) 
313: [33mLOAD_CONST[0m(4, 1) 
314: [33mCALL_METHOD[0m(4, 4) 
315: [33mLOAD_FAST[0m(16, attn_weights) 
316: [33mLOAD_METHOD[0m(12, view) 
317: [33mLOAD_FAST[0m(8, bsz) 
318: [33mLOAD_FAST[0m(0, self) 
319: [33mLOAD_ATTR[0m(10, num_heads) 
320: [33mLOAD_FAST[0m(9, tgt_len) 
321: [33mLOAD_FAST[0m(15, src_len) 
322: [33mCALL_METHOD[0m(4, 4) 
323: [33mBINARY_MULTIPLY[0m(None, None) 
324: [33mSTORE_FAST[0m(16, attn_weights) 
325: [33mLOAD_FAST[0m(16, attn_weights) 
326: [33mLOAD_METHOD[0m(12, view) 
327: [33mLOAD_FAST[0m(8, bsz) 
328: [33mLOAD_FAST[0m(0, self) 
329: [33mLOAD_ATTR[0m(10, num_heads) 
330: [33mBINARY_MULTIPLY[0m(None, None) 
331: [33mLOAD_FAST[0m(9, tgt_len) 
332: [33mLOAD_FAST[0m(15, src_len) 
333: [33mCALL_METHOD[0m(3, 3) 
334: [33mSTORE_FAST[0m(16, attn_weights) 
335: [33mLOAD_FAST[0m(6, output_attentions) 
336: [33mEXTENDED_ARG[0m(2, 2) 
337: [33mPOP_JUMP_IF_FALSE[0m(716, 716)  -> inst 358
338: [33mLOAD_FAST[0m(16, attn_weights) 
339: [33mLOAD_METHOD[0m(12, view) 
340: [33mLOAD_FAST[0m(8, bsz) 
341: [33mLOAD_FAST[0m(0, self) 
342: [33mLOAD_ATTR[0m(10, num_heads) 
343: [33mLOAD_FAST[0m(9, tgt_len) 
344: [33mLOAD_FAST[0m(15, src_len) 
345: [33mCALL_METHOD[0m(4, 4) 
346: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
347: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
348: [33mLOAD_METHOD[0m(12, view) 
349: [33mLOAD_FAST[0m(8, bsz) 
350: [33mLOAD_FAST[0m(0, self) 
351: [33mLOAD_ATTR[0m(10, num_heads) 
352: [33mBINARY_MULTIPLY[0m(None, None) 
353: [33mLOAD_FAST[0m(9, tgt_len) 
354: [33mLOAD_FAST[0m(15, src_len) 
355: [33mCALL_METHOD[0m(3, 3) 
356: [33mSTORE_FAST[0m(16, attn_weights) 
357: [33mJUMP_FORWARD[0m(4, 720)  -> inst 360
358: [33mLOAD_CONST[0m(1, None) 
359: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
360: [33mLOAD_GLOBAL[0m(17, nn) 
361: [33mLOAD_ATTR[0m(18, functional) 
362: [33mLOAD_ATTR[0m(20, dropout) 
363: [33mLOAD_FAST[0m(16, attn_weights) 
364: [33mLOAD_FAST[0m(0, self) 
365: [33mLOAD_ATTR[0m(20, dropout) 
366: [33mLOAD_FAST[0m(0, self) 
367: [33mLOAD_ATTR[0m(21, training) 
368: [33mLOAD_CONST[0m(11, ('p', 'training')) 
369: [33mCALL_FUNCTION_KW[0m(3, 3) 
370: [33mSTORE_FAST[0m(18, attn_probs) 
371: [33mLOAD_GLOBAL[0m(7, torch) 
372: [33mLOAD_METHOD[0m(14, bmm) 
373: [33mLOAD_FAST[0m(18, attn_probs) 
374: [33mLOAD_FAST[0m(13, value_states) 
375: [33mCALL_METHOD[0m(2, 2) 
376: [33mSTORE_FAST[0m(19, attn_output) 
377: [33mLOAD_FAST[0m(19, attn_output) 
378: [33mLOAD_METHOD[0m(0, size) 
379: [33mCALL_METHOD[0m(0, 0) 
380: [33mLOAD_FAST[0m(8, bsz) 
381: [33mLOAD_FAST[0m(0, self) 
382: [33mLOAD_ATTR[0m(10, num_heads) 
383: [33mBINARY_MULTIPLY[0m(None, None) 
384: [33mLOAD_FAST[0m(9, tgt_len) 
385: [33mLOAD_FAST[0m(0, self) 
386: [33mLOAD_ATTR[0m(11, head_dim) 
387: [33mBUILD_TUPLE[0m(3, 3) 
388: [33mCOMPARE_OP[0m(3, !=) 
389: [33mEXTENDED_ARG[0m(3, 3) 
390: [33mPOP_JUMP_IF_FALSE[0m(820, 820)  -> inst 410
391: [33mLOAD_GLOBAL[0m(16, ValueError) 
392: [33mLOAD_CONST[0m(12, `attn_output` should be of size ) 
393: [33mLOAD_FAST[0m(8, bsz) 
394: [33mLOAD_FAST[0m(0, self) 
395: [33mLOAD_ATTR[0m(10, num_heads) 
396: [33mBINARY_MULTIPLY[0m(None, None) 
397: [33mLOAD_FAST[0m(9, tgt_len) 
398: [33mLOAD_FAST[0m(0, self) 
399: [33mLOAD_ATTR[0m(11, head_dim) 
400: [33mBUILD_TUPLE[0m(3, 3) 
401: [33mFORMAT_VALUE[0m(0, (None, False)) 
402: [33mLOAD_CONST[0m(8, , but is ) 
403: [33mLOAD_FAST[0m(19, attn_output) 
404: [33mLOAD_METHOD[0m(0, size) 
405: [33mCALL_METHOD[0m(0, 0) 
406: [33mFORMAT_VALUE[0m(0, (None, False)) 
407: [33mBUILD_STRING[0m(4, 4) 
408: [33mCALL_FUNCTION[0m(1, 1) 
409: [33mRAISE_VARARGS[0m(1, 1) 
410: [33mLOAD_FAST[0m(19, attn_output) 
411: [33mLOAD_METHOD[0m(12, view) 
412: [33mLOAD_FAST[0m(8, bsz) 
413: [33mLOAD_FAST[0m(0, self) 
414: [33mLOAD_ATTR[0m(10, num_heads) 
415: [33mLOAD_FAST[0m(9, tgt_len) 
416: [33mLOAD_FAST[0m(0, self) 
417: [33mLOAD_ATTR[0m(11, head_dim) 
418: [33mCALL_METHOD[0m(4, 4) 
419: [33mSTORE_FAST[0m(19, attn_output) 
420: [33mLOAD_FAST[0m(19, attn_output) 
421: [33mLOAD_METHOD[0m(15, transpose) 
422: [33mLOAD_CONST[0m(4, 1) 
423: [33mLOAD_CONST[0m(3, 2) 
424: [33mCALL_METHOD[0m(2, 2) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(13, reshape) 
428: [33mLOAD_FAST[0m(8, bsz) 
429: [33mLOAD_FAST[0m(9, tgt_len) 
430: [33mLOAD_FAST[0m(0, self) 
431: [33mLOAD_ATTR[0m(22, embed_dim) 
432: [33mCALL_METHOD[0m(3, 3) 
433: [33mSTORE_FAST[0m(19, attn_output) 
434: [33mLOAD_FAST[0m(0, self) 
435: [33mLOAD_METHOD[0m(23, out_proj) 
436: [33mLOAD_FAST[0m(19, attn_output) 
437: [33mCALL_METHOD[0m(1, 1) 
438: [33mSTORE_FAST[0m(19, attn_output) 
439: [33mLOAD_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
441: [33mLOAD_FAST[0m(3, past_key_value) 
442: [33mBUILD_TUPLE[0m(3, 3) 
443: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('dim',)), (<class 'int'>, 2), (<class 'int'>, -1), (<class 'str'>, '`attn_output` should be of size '), (<class 'str'>, 'Input shape: Batch x Time x Channel'), (<class 'int'>, 1), (<class 'str'>, 'Head mask for a single layer should be of size '), (<class 'int'>, 0), (<class 'str'>, ', but is '), (<class 'str'>, 'Attention mask should be of size '), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, 'Attention weights should be of size '), (<class 'NoneType'>, None), (<class 'int'>, 6)]
guarded code
0: [32mLOAD_GLOBAL[0m(28, disable_trace) 
1: [32mLOAD_CONST[0m(13, 6) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(3, 3) 
5: [32mJUMP_ABSOLUTE[0m(902, 902)  -> inst 451
6: [33mLOAD_FAST[0m(2, key_value_states) 
7: [33mLOAD_CONST[0m(12, None) 
8: [33mIS_OP[0m(1, 1) 
9: [33mSTORE_FAST[0m(7, is_cross_attention) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_METHOD[0m(0, size) 
12: [33mCALL_METHOD[0m(0, 0) 
13: [33mUNPACK_SEQUENCE[0m(3, 3) 
14: [33mSTORE_FAST[0m(8, bsz) 
15: [33mSTORE_FAST[0m(9, tgt_len) 
16: [33mSTORE_FAST[0m(10, _) 
17: [33mLOAD_FAST[0m(0, self) 
18: [33mLOAD_METHOD[0m(1, q_proj) 
19: [33mLOAD_FAST[0m(1, hidden_states) 
20: [33mCALL_METHOD[0m(1, 1) 
21: [33mLOAD_FAST[0m(0, self) 
22: [33mLOAD_ATTR[0m(2, scaling) 
23: [33mBINARY_MULTIPLY[0m(None, None) 
24: [33mSTORE_FAST[0m(11, query_states) 
25: [33mLOAD_FAST[0m(7, is_cross_attention) 
26: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
27: [33mLOAD_FAST[0m(3, past_key_value) 
28: [33mLOAD_CONST[0m(12, None) 
29: [33mIS_OP[0m(1, 1) 
30: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
31: [33mLOAD_FAST[0m(3, past_key_value) 
32: [33mLOAD_CONST[0m(7, 0) 
33: [33mBINARY_SUBSCR[0m(None, None) 
34: [33mLOAD_ATTR[0m(3, shape) 
35: [33mLOAD_CONST[0m(1, 2) 
36: [33mBINARY_SUBSCR[0m(None, None) 
37: [33mLOAD_FAST[0m(2, key_value_states) 
38: [33mLOAD_ATTR[0m(3, shape) 
39: [33mLOAD_CONST[0m(5, 1) 
40: [33mBINARY_SUBSCR[0m(None, None) 
41: [33mCOMPARE_OP[0m(2, ==) 
42: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
43: [33mLOAD_FAST[0m(3, past_key_value) 
44: [33mLOAD_CONST[0m(7, 0) 
45: [33mBINARY_SUBSCR[0m(None, None) 
46: [33mSTORE_FAST[0m(12, key_states) 
47: [33mLOAD_FAST[0m(3, past_key_value) 
48: [33mLOAD_CONST[0m(5, 1) 
49: [33mBINARY_SUBSCR[0m(None, None) 
50: [33mSTORE_FAST[0m(13, value_states) 
51: [33mJUMP_FORWARD[0m(180, 284)  -> inst 142
52: [33mLOAD_FAST[0m(7, is_cross_attention) 
53: [33mPOP_JUMP_IF_FALSE[0m(150, 150)  -> inst 75
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_METHOD[0m(4, _shape) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_METHOD[0m(5, k_proj) 
58: [33mLOAD_FAST[0m(2, key_value_states) 
59: [33mCALL_METHOD[0m(1, 1) 
60: [33mLOAD_CONST[0m(2, -1) 
61: [33mLOAD_FAST[0m(8, bsz) 
62: [33mCALL_METHOD[0m(3, 3) 
63: [33mSTORE_FAST[0m(12, key_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_METHOD[0m(4, _shape) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_METHOD[0m(6, v_proj) 
68: [33mLOAD_FAST[0m(2, key_value_states) 
69: [33mCALL_METHOD[0m(1, 1) 
70: [33mLOAD_CONST[0m(2, -1) 
71: [33mLOAD_FAST[0m(8, bsz) 
72: [33mCALL_METHOD[0m(3, 3) 
73: [33mSTORE_FAST[0m(13, value_states) 
74: [33mJUMP_FORWARD[0m(134, 284)  -> inst 142
75: [33mLOAD_FAST[0m(3, past_key_value) 
76: [33mLOAD_CONST[0m(12, None) 
77: [33mIS_OP[0m(1, 1) 
78: [33mPOP_JUMP_IF_FALSE[0m(244, 244)  -> inst 122
79: [33mLOAD_FAST[0m(0, self) 
80: [33mLOAD_METHOD[0m(4, _shape) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(5, k_proj) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mLOAD_CONST[0m(2, -1) 
86: [33mLOAD_FAST[0m(8, bsz) 
87: [33mCALL_METHOD[0m(3, 3) 
88: [33mSTORE_FAST[0m(12, key_states) 
89: [33mLOAD_FAST[0m(0, self) 
90: [33mLOAD_METHOD[0m(4, _shape) 
91: [33mLOAD_FAST[0m(0, self) 
92: [33mLOAD_METHOD[0m(6, v_proj) 
93: [33mLOAD_FAST[0m(1, hidden_states) 
94: [33mCALL_METHOD[0m(1, 1) 
95: [33mLOAD_CONST[0m(2, -1) 
96: [33mLOAD_FAST[0m(8, bsz) 
97: [33mCALL_METHOD[0m(3, 3) 
98: [33mSTORE_FAST[0m(13, value_states) 
99: [33mLOAD_GLOBAL[0m(7, torch) 
100: [33mLOAD_ATTR[0m(8, cat) 
101: [33mLOAD_FAST[0m(3, past_key_value) 
102: [33mLOAD_CONST[0m(7, 0) 
103: [33mBINARY_SUBSCR[0m(None, None) 
104: [33mLOAD_FAST[0m(12, key_states) 
105: [33mBUILD_LIST[0m(2, 2) 
106: [33mLOAD_CONST[0m(1, 2) 
107: [33mLOAD_CONST[0m(0, ('dim',)) 
108: [33mCALL_FUNCTION_KW[0m(2, 2) 
109: [33mSTORE_FAST[0m(12, key_states) 
110: [33mLOAD_GLOBAL[0m(7, torch) 
111: [33mLOAD_ATTR[0m(8, cat) 
112: [33mLOAD_FAST[0m(3, past_key_value) 
113: [33mLOAD_CONST[0m(5, 1) 
114: [33mBINARY_SUBSCR[0m(None, None) 
115: [33mLOAD_FAST[0m(13, value_states) 
116: [33mBUILD_LIST[0m(2, 2) 
117: [33mLOAD_CONST[0m(1, 2) 
118: [33mLOAD_CONST[0m(0, ('dim',)) 
119: [33mCALL_FUNCTION_KW[0m(2, 2) 
120: [33mSTORE_FAST[0m(13, value_states) 
121: [33mJUMP_FORWARD[0m(40, 284)  -> inst 142
122: [33mLOAD_FAST[0m(0, self) 
123: [33mLOAD_METHOD[0m(4, _shape) 
124: [33mLOAD_FAST[0m(0, self) 
125: [33mLOAD_METHOD[0m(5, k_proj) 
126: [33mLOAD_FAST[0m(1, hidden_states) 
127: [33mCALL_METHOD[0m(1, 1) 
128: [33mLOAD_CONST[0m(2, -1) 
129: [33mLOAD_FAST[0m(8, bsz) 
130: [33mCALL_METHOD[0m(3, 3) 
131: [33mSTORE_FAST[0m(12, key_states) 
132: [33mLOAD_FAST[0m(0, self) 
133: [33mLOAD_METHOD[0m(4, _shape) 
134: [33mLOAD_FAST[0m(0, self) 
135: [33mLOAD_METHOD[0m(6, v_proj) 
136: [33mLOAD_FAST[0m(1, hidden_states) 
137: [33mCALL_METHOD[0m(1, 1) 
138: [33mLOAD_CONST[0m(2, -1) 
139: [33mLOAD_FAST[0m(8, bsz) 
140: [33mCALL_METHOD[0m(3, 3) 
141: [33mSTORE_FAST[0m(13, value_states) 
142: [33mLOAD_FAST[0m(0, self) 
143: [33mLOAD_ATTR[0m(9, is_decoder) 
144: [32mEXTENDED_ARG[0m(1, 1) 
145: [33mPOP_JUMP_IF_FALSE[0m(300, 300)  -> inst 150
146: [33mLOAD_FAST[0m(12, key_states) 
147: [33mLOAD_FAST[0m(13, value_states) 
148: [33mBUILD_TUPLE[0m(2, 2) 
149: [33mSTORE_FAST[0m(3, past_key_value) 
150: [33mLOAD_FAST[0m(8, bsz) 
151: [33mLOAD_FAST[0m(0, self) 
152: [33mLOAD_ATTR[0m(10, num_heads) 
153: [33mBINARY_MULTIPLY[0m(None, None) 
154: [33mLOAD_CONST[0m(2, -1) 
155: [33mLOAD_FAST[0m(0, self) 
156: [33mLOAD_ATTR[0m(11, head_dim) 
157: [33mBUILD_TUPLE[0m(3, 3) 
158: [33mSTORE_FAST[0m(14, proj_shape) 
159: [33mLOAD_FAST[0m(0, self) 
160: [33mLOAD_METHOD[0m(4, _shape) 
161: [33mLOAD_FAST[0m(11, query_states) 
162: [33mLOAD_FAST[0m(9, tgt_len) 
163: [33mLOAD_FAST[0m(8, bsz) 
164: [33mCALL_METHOD[0m(3, 3) 
165: [33mLOAD_ATTR[0m(12, view) 
166: [33mLOAD_FAST[0m(14, proj_shape) 
167: [33mCALL_FUNCTION_EX[0m(0, 0) 
168: [33mSTORE_FAST[0m(11, query_states) 
169: [33mLOAD_FAST[0m(12, key_states) 
170: [33mLOAD_ATTR[0m(13, reshape) 
171: [33mLOAD_FAST[0m(14, proj_shape) 
172: [33mCALL_FUNCTION_EX[0m(0, 0) 
173: [33mSTORE_FAST[0m(12, key_states) 
174: [33mLOAD_FAST[0m(13, value_states) 
175: [33mLOAD_ATTR[0m(13, reshape) 
176: [33mLOAD_FAST[0m(14, proj_shape) 
177: [33mCALL_FUNCTION_EX[0m(0, 0) 
178: [33mSTORE_FAST[0m(13, value_states) 
179: [33mLOAD_FAST[0m(12, key_states) 
180: [33mLOAD_METHOD[0m(0, size) 
181: [33mLOAD_CONST[0m(5, 1) 
182: [33mCALL_METHOD[0m(1, 1) 
183: [33mSTORE_FAST[0m(15, src_len) 
184: [33mLOAD_GLOBAL[0m(7, torch) 
185: [33mLOAD_METHOD[0m(14, bmm) 
186: [33mLOAD_FAST[0m(11, query_states) 
187: [33mLOAD_FAST[0m(12, key_states) 
188: [33mLOAD_METHOD[0m(15, transpose) 
189: [33mLOAD_CONST[0m(5, 1) 
190: [33mLOAD_CONST[0m(1, 2) 
191: [33mCALL_METHOD[0m(2, 2) 
192: [33mCALL_METHOD[0m(2, 2) 
193: [33mSTORE_FAST[0m(16, attn_weights) 
194: [33mLOAD_FAST[0m(16, attn_weights) 
195: [33mLOAD_METHOD[0m(0, size) 
196: [33mCALL_METHOD[0m(0, 0) 
197: [33mLOAD_FAST[0m(8, bsz) 
198: [33mLOAD_FAST[0m(0, self) 
199: [33mLOAD_ATTR[0m(10, num_heads) 
200: [33mBINARY_MULTIPLY[0m(None, None) 
201: [33mLOAD_FAST[0m(9, tgt_len) 
202: [33mLOAD_FAST[0m(15, src_len) 
203: [33mBUILD_TUPLE[0m(3, 3) 
204: [33mCOMPARE_OP[0m(3, !=) 
205: [32mEXTENDED_ARG[0m(1, 1) 
206: [33mPOP_JUMP_IF_FALSE[0m(450, 450)  -> inst 225
207: [33mLOAD_GLOBAL[0m(16, ValueError) 
208: [33mLOAD_CONST[0m(11, Attention weights should be of size ) 
209: [33mLOAD_FAST[0m(8, bsz) 
210: [33mLOAD_FAST[0m(0, self) 
211: [33mLOAD_ATTR[0m(10, num_heads) 
212: [33mBINARY_MULTIPLY[0m(None, None) 
213: [33mLOAD_FAST[0m(9, tgt_len) 
214: [33mLOAD_FAST[0m(15, src_len) 
215: [33mBUILD_TUPLE[0m(3, 3) 
216: [33mFORMAT_VALUE[0m(0, (None, False)) 
217: [33mLOAD_CONST[0m(8, , but is ) 
218: [33mLOAD_FAST[0m(16, attn_weights) 
219: [33mLOAD_METHOD[0m(0, size) 
220: [33mCALL_METHOD[0m(0, 0) 
221: [33mFORMAT_VALUE[0m(0, (None, False)) 
222: [33mBUILD_STRING[0m(4, 4) 
223: [33mCALL_FUNCTION[0m(1, 1) 
224: [33mRAISE_VARARGS[0m(1, 1) 
225: [33mLOAD_FAST[0m(4, attention_mask) 
226: [33mLOAD_CONST[0m(12, None) 
227: [33mIS_OP[0m(1, 1) 
228: [32mEXTENDED_ARG[0m(2, 2) 
229: [33mPOP_JUMP_IF_FALSE[0m(556, 556)  -> inst 278
230: [33mLOAD_FAST[0m(4, attention_mask) 
231: [33mLOAD_METHOD[0m(0, size) 
232: [33mCALL_METHOD[0m(0, 0) 
233: [33mLOAD_FAST[0m(8, bsz) 
234: [33mLOAD_CONST[0m(5, 1) 
235: [33mLOAD_FAST[0m(9, tgt_len) 
236: [33mLOAD_FAST[0m(15, src_len) 
237: [33mBUILD_TUPLE[0m(4, 4) 
238: [33mCOMPARE_OP[0m(3, !=) 
239: [32mEXTENDED_ARG[0m(2, 2) 
240: [33mPOP_JUMP_IF_FALSE[0m(514, 514)  -> inst 257
241: [33mLOAD_GLOBAL[0m(16, ValueError) 
242: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
243: [33mLOAD_FAST[0m(8, bsz) 
244: [33mLOAD_CONST[0m(5, 1) 
245: [33mLOAD_FAST[0m(9, tgt_len) 
246: [33mLOAD_FAST[0m(15, src_len) 
247: [33mBUILD_TUPLE[0m(4, 4) 
248: [33mFORMAT_VALUE[0m(0, (None, False)) 
249: [33mLOAD_CONST[0m(8, , but is ) 
250: [33mLOAD_FAST[0m(4, attention_mask) 
251: [33mLOAD_METHOD[0m(0, size) 
252: [33mCALL_METHOD[0m(0, 0) 
253: [33mFORMAT_VALUE[0m(0, (None, False)) 
254: [33mBUILD_STRING[0m(4, 4) 
255: [33mCALL_FUNCTION[0m(1, 1) 
256: [33mRAISE_VARARGS[0m(1, 1) 
257: [33mLOAD_FAST[0m(16, attn_weights) 
258: [33mLOAD_METHOD[0m(12, view) 
259: [33mLOAD_FAST[0m(8, bsz) 
260: [33mLOAD_FAST[0m(0, self) 
261: [33mLOAD_ATTR[0m(10, num_heads) 
262: [33mLOAD_FAST[0m(9, tgt_len) 
263: [33mLOAD_FAST[0m(15, src_len) 
264: [33mCALL_METHOD[0m(4, 4) 
265: [33mLOAD_FAST[0m(4, attention_mask) 
266: [33mBINARY_ADD[0m(None, None) 
267: [33mSTORE_FAST[0m(16, attn_weights) 
268: [33mLOAD_FAST[0m(16, attn_weights) 
269: [33mLOAD_METHOD[0m(12, view) 
270: [33mLOAD_FAST[0m(8, bsz) 
271: [33mLOAD_FAST[0m(0, self) 
272: [33mLOAD_ATTR[0m(10, num_heads) 
273: [33mBINARY_MULTIPLY[0m(None, None) 
274: [33mLOAD_FAST[0m(9, tgt_len) 
275: [33mLOAD_FAST[0m(15, src_len) 
276: [33mCALL_METHOD[0m(3, 3) 
277: [33mSTORE_FAST[0m(16, attn_weights) 
278: [33mLOAD_GLOBAL[0m(17, nn) 
279: [33mLOAD_ATTR[0m(18, functional) 
280: [33mLOAD_ATTR[0m(19, softmax) 
281: [33mLOAD_FAST[0m(16, attn_weights) 
282: [33mLOAD_CONST[0m(2, -1) 
283: [33mLOAD_CONST[0m(0, ('dim',)) 
284: [33mCALL_FUNCTION_KW[0m(2, 2) 
285: [33mSTORE_FAST[0m(16, attn_weights) 
286: [33mLOAD_FAST[0m(5, layer_head_mask) 
287: [33mLOAD_CONST[0m(12, None) 
288: [33mIS_OP[0m(1, 1) 
289: [32mEXTENDED_ARG[0m(2, 2) 
290: [33mPOP_JUMP_IF_FALSE[0m(682, 682)  -> inst 341
291: [33mLOAD_FAST[0m(5, layer_head_mask) 
292: [33mLOAD_METHOD[0m(0, size) 
293: [33mCALL_METHOD[0m(0, 0) 
294: [33mLOAD_FAST[0m(0, self) 
295: [33mLOAD_ATTR[0m(10, num_heads) 
296: [33mBUILD_TUPLE[0m(1, 1) 
297: [33mCOMPARE_OP[0m(3, !=) 
298: [32mEXTENDED_ARG[0m(2, 2) 
299: [33mPOP_JUMP_IF_FALSE[0m(628, 628)  -> inst 314
300: [33mLOAD_GLOBAL[0m(16, ValueError) 
301: [33mLOAD_CONST[0m(6, Head mask for a single layer should be of size ) 
302: [33mLOAD_FAST[0m(0, self) 
303: [33mLOAD_ATTR[0m(10, num_heads) 
304: [33mBUILD_TUPLE[0m(1, 1) 
305: [33mFORMAT_VALUE[0m(0, (None, False)) 
306: [33mLOAD_CONST[0m(8, , but is ) 
307: [33mLOAD_FAST[0m(5, layer_head_mask) 
308: [33mLOAD_METHOD[0m(0, size) 
309: [33mCALL_METHOD[0m(0, 0) 
310: [33mFORMAT_VALUE[0m(0, (None, False)) 
311: [33mBUILD_STRING[0m(4, 4) 
312: [33mCALL_FUNCTION[0m(1, 1) 
313: [33mRAISE_VARARGS[0m(1, 1) 
314: [33mLOAD_FAST[0m(5, layer_head_mask) 
315: [33mLOAD_METHOD[0m(12, view) 
316: [33mLOAD_CONST[0m(5, 1) 
317: [33mLOAD_CONST[0m(2, -1) 
318: [33mLOAD_CONST[0m(5, 1) 
319: [33mLOAD_CONST[0m(5, 1) 
320: [33mCALL_METHOD[0m(4, 4) 
321: [33mLOAD_FAST[0m(16, attn_weights) 
322: [33mLOAD_METHOD[0m(12, view) 
323: [33mLOAD_FAST[0m(8, bsz) 
324: [33mLOAD_FAST[0m(0, self) 
325: [33mLOAD_ATTR[0m(10, num_heads) 
326: [33mLOAD_FAST[0m(9, tgt_len) 
327: [33mLOAD_FAST[0m(15, src_len) 
328: [33mCALL_METHOD[0m(4, 4) 
329: [33mBINARY_MULTIPLY[0m(None, None) 
330: [33mSTORE_FAST[0m(16, attn_weights) 
331: [33mLOAD_FAST[0m(16, attn_weights) 
332: [33mLOAD_METHOD[0m(12, view) 
333: [33mLOAD_FAST[0m(8, bsz) 
334: [33mLOAD_FAST[0m(0, self) 
335: [33mLOAD_ATTR[0m(10, num_heads) 
336: [33mBINARY_MULTIPLY[0m(None, None) 
337: [33mLOAD_FAST[0m(9, tgt_len) 
338: [33mLOAD_FAST[0m(15, src_len) 
339: [33mCALL_METHOD[0m(3, 3) 
340: [33mSTORE_FAST[0m(16, attn_weights) 
341: [33mLOAD_FAST[0m(6, output_attentions) 
342: [32mEXTENDED_ARG[0m(2, 2) 
343: [33mPOP_JUMP_IF_FALSE[0m(728, 728)  -> inst 364
344: [33mLOAD_FAST[0m(16, attn_weights) 
345: [33mLOAD_METHOD[0m(12, view) 
346: [33mLOAD_FAST[0m(8, bsz) 
347: [33mLOAD_FAST[0m(0, self) 
348: [33mLOAD_ATTR[0m(10, num_heads) 
349: [33mLOAD_FAST[0m(9, tgt_len) 
350: [33mLOAD_FAST[0m(15, src_len) 
351: [33mCALL_METHOD[0m(4, 4) 
352: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
353: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
354: [33mLOAD_METHOD[0m(12, view) 
355: [33mLOAD_FAST[0m(8, bsz) 
356: [33mLOAD_FAST[0m(0, self) 
357: [33mLOAD_ATTR[0m(10, num_heads) 
358: [33mBINARY_MULTIPLY[0m(None, None) 
359: [33mLOAD_FAST[0m(9, tgt_len) 
360: [33mLOAD_FAST[0m(15, src_len) 
361: [33mCALL_METHOD[0m(3, 3) 
362: [33mSTORE_FAST[0m(16, attn_weights) 
363: [33mJUMP_FORWARD[0m(4, 732)  -> inst 366
364: [33mLOAD_CONST[0m(12, None) 
365: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
366: [33mLOAD_GLOBAL[0m(17, nn) 
367: [33mLOAD_ATTR[0m(18, functional) 
368: [33mLOAD_ATTR[0m(20, dropout) 
369: [33mLOAD_FAST[0m(16, attn_weights) 
370: [33mLOAD_FAST[0m(0, self) 
371: [33mLOAD_ATTR[0m(20, dropout) 
372: [33mLOAD_FAST[0m(0, self) 
373: [33mLOAD_ATTR[0m(21, training) 
374: [33mLOAD_CONST[0m(10, ('p', 'training')) 
375: [33mCALL_FUNCTION_KW[0m(3, 3) 
376: [33mSTORE_FAST[0m(18, attn_probs) 
377: [33mLOAD_GLOBAL[0m(7, torch) 
378: [33mLOAD_METHOD[0m(14, bmm) 
379: [33mLOAD_FAST[0m(18, attn_probs) 
380: [33mLOAD_FAST[0m(13, value_states) 
381: [33mCALL_METHOD[0m(2, 2) 
382: [33mSTORE_FAST[0m(19, attn_output) 
383: [33mLOAD_FAST[0m(19, attn_output) 
384: [33mLOAD_METHOD[0m(0, size) 
385: [33mCALL_METHOD[0m(0, 0) 
386: [33mLOAD_FAST[0m(8, bsz) 
387: [33mLOAD_FAST[0m(0, self) 
388: [33mLOAD_ATTR[0m(10, num_heads) 
389: [33mBINARY_MULTIPLY[0m(None, None) 
390: [33mLOAD_FAST[0m(9, tgt_len) 
391: [33mLOAD_FAST[0m(0, self) 
392: [33mLOAD_ATTR[0m(11, head_dim) 
393: [33mBUILD_TUPLE[0m(3, 3) 
394: [33mCOMPARE_OP[0m(3, !=) 
395: [32mEXTENDED_ARG[0m(3, 3) 
396: [33mPOP_JUMP_IF_FALSE[0m(832, 832)  -> inst 416
397: [33mLOAD_GLOBAL[0m(16, ValueError) 
398: [33mLOAD_CONST[0m(3, `attn_output` should be of size ) 
399: [33mLOAD_FAST[0m(8, bsz) 
400: [33mLOAD_FAST[0m(0, self) 
401: [33mLOAD_ATTR[0m(10, num_heads) 
402: [33mBINARY_MULTIPLY[0m(None, None) 
403: [33mLOAD_FAST[0m(9, tgt_len) 
404: [33mLOAD_FAST[0m(0, self) 
405: [33mLOAD_ATTR[0m(11, head_dim) 
406: [33mBUILD_TUPLE[0m(3, 3) 
407: [33mFORMAT_VALUE[0m(0, (None, False)) 
408: [33mLOAD_CONST[0m(8, , but is ) 
409: [33mLOAD_FAST[0m(19, attn_output) 
410: [33mLOAD_METHOD[0m(0, size) 
411: [33mCALL_METHOD[0m(0, 0) 
412: [33mFORMAT_VALUE[0m(0, (None, False)) 
413: [33mBUILD_STRING[0m(4, 4) 
414: [33mCALL_FUNCTION[0m(1, 1) 
415: [33mRAISE_VARARGS[0m(1, 1) 
416: [33mLOAD_FAST[0m(19, attn_output) 
417: [33mLOAD_METHOD[0m(12, view) 
418: [33mLOAD_FAST[0m(8, bsz) 
419: [33mLOAD_FAST[0m(0, self) 
420: [33mLOAD_ATTR[0m(10, num_heads) 
421: [33mLOAD_FAST[0m(9, tgt_len) 
422: [33mLOAD_FAST[0m(0, self) 
423: [33mLOAD_ATTR[0m(11, head_dim) 
424: [33mCALL_METHOD[0m(4, 4) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(15, transpose) 
428: [33mLOAD_CONST[0m(5, 1) 
429: [33mLOAD_CONST[0m(1, 2) 
430: [33mCALL_METHOD[0m(2, 2) 
431: [33mSTORE_FAST[0m(19, attn_output) 
432: [33mLOAD_FAST[0m(19, attn_output) 
433: [33mLOAD_METHOD[0m(13, reshape) 
434: [33mLOAD_FAST[0m(8, bsz) 
435: [33mLOAD_FAST[0m(9, tgt_len) 
436: [33mLOAD_FAST[0m(0, self) 
437: [33mLOAD_ATTR[0m(22, embed_dim) 
438: [33mCALL_METHOD[0m(3, 3) 
439: [33mSTORE_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(0, self) 
441: [33mLOAD_METHOD[0m(23, out_proj) 
442: [33mLOAD_FAST[0m(19, attn_output) 
443: [33mCALL_METHOD[0m(1, 1) 
444: [33mSTORE_FAST[0m(19, attn_output) 
445: [33mLOAD_FAST[0m(19, attn_output) 
446: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
447: [33mLOAD_FAST[0m(3, past_key_value) 
448: [33mBUILD_TUPLE[0m(3, 3) 
449: [32mEXTENDED_ARG[0m(3, 3) 
450: [32mJUMP_ABSOLUTE[0m(930, 930)  -> inst 465
451: [32mLOAD_GLOBAL[0m(25, guard_match) 
452: [32mLOAD_CONST[0m(13, 6) 
453: [32mLOAD_CONST[0m(7, 0) 
454: [32mLOAD_GLOBAL[0m(24, locals) 
455: [32mCALL_FUNCTION[0m(0, 0) 
456: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
457: [32mUNPACK_SEQUENCE[0m(2, 2) 
458: [32mSTORE_FAST[0m(21, __case_idx) 
459: [32mSTORE_FAST[0m(20, __graph_fn) 
460: [32mLOAD_GLOBAL[0m(26, enable_trace) 
461: [32mLOAD_CONST[0m(13, 6) 
462: [32mCALL_FUNCTION[0m(1, 1) 
463: [32mPOP_TOP[0m(None, None) 
464: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
465: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=6(0x6957780)
push tracker due to record
push tracker 6 frame 0x6957780 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=6(0x6957780)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=6(0x6957780)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6] frame_id 6
enable_trace
push tracker 6 frame 0x6957780 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
tracing opcode POP_TOP None pc=926 frame=6(0x6957780)
process last instruction done
restart: running injected code (f_lasti=926)
tracing opcode JUMP_ABSOLUTE None pc=928 frame=6(0x6957780)
process last instruction done
restart: running injected code (f_lasti=928)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=6(0x6957780)
process last instruction done
tracing opcode IS_OP None pc=16 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=18 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=22 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=24 frame=6(0x6957780)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=26 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=28 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=30 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=32 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=34 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=38 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=40 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=42 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=6(0x6957780)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=46 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=48 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=50 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode POP_JUMP_IF_FALSE None pc=52 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=104 frame=6(0x6957780)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=106 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=150 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=152 frame=6(0x6957780)
process last instruction done
tracing opcode IS_OP None pc=154 frame=6(0x6957780)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=156 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=244 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=246 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=248 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=250 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=252 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=254 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=256 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=258 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=260 frame=6(0x6957780)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x696f5f0)
push tracker due to record
push tracker 7 frame 0x696f5f0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x696f5f0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x696f5f0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x696f5f0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x696f5f0)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x696f5f0)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x696f5f0)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x696f5f0)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x696f5f0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x696f5f0)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x696f5f0)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x696f5f0)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_47 : [#users=1] = placeholder[target=tensor_47]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_47, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_47 : [#users=1] = placeholder[target=tensor_47]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_47, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x696f5f0)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=262 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=264 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=266 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=268 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=270 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=272 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=274 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=276 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=278 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=280 frame=6(0x6957780)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x6972bd0)
push tracker due to record
push tracker 7 frame 0x6972bd0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x6972bd0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x6972bd0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x6972bd0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x6972bd0)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x6972bd0)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x6972bd0)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x6972bd0)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x6972bd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x6972bd0)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x6972bd0)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x6972bd0)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_49 : [#users=1] = placeholder[target=tensor_49]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_49, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_49 : [#users=1] = placeholder[target=tensor_49]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_49, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x6972bd0)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=282 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=284 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=286 frame=6(0x6957780)
process last instruction done
tracing opcode EXTENDED_ARG None pc=288 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=300 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=302 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=304 frame=6(0x6957780)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=306 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=308 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=310 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=312 frame=6(0x6957780)
process last instruction done
tracing opcode BUILD_TUPLE None pc=314 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=316 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=318 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=320 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=322 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=324 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=326 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=328 frame=6(0x6957780)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x68b4ee0)
push tracker due to record
push tracker 7 frame 0x68b4ee0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x68b4ee0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x68b4ee0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x68b4ee0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x68b4ee0)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x68b4ee0)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x68b4ee0)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x68b4ee0)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x68b4ee0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x68b4ee0)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x68b4ee0)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x68b4ee0)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_51 : [#users=1] = placeholder[target=tensor_51]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_51, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_51 : [#users=1] = placeholder[target=tensor_51]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_51, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x68b4ee0)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode LOAD_ATTR None pc=330 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=332 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=334 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=336 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=338 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=340 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=342 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=344 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=346 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=348 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=350 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=352 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=354 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=356 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=358 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=360 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=362 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=364 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=366 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=368 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=370 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=372 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=374 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=376 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=378 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=380 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=382 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=384 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=386 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=388 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=390 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=392 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=394 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=396 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=398 frame=6(0x6957780)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=400 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=402 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=404 frame=6(0x6957780)
process last instruction done
tracing opcode BUILD_TUPLE None pc=406 frame=6(0x6957780)
process last instruction done
tracing opcode COMPARE_OP None pc=408 frame=6(0x6957780)
process last instruction done
tracing opcode EXTENDED_ARG None pc=410 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=450 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=452 frame=6(0x6957780)
process last instruction done
tracing opcode IS_OP None pc=454 frame=6(0x6957780)
process last instruction done
tracing opcode EXTENDED_ARG None pc=456 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=460 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=462 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=464 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=466 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=468 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=470 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=472 frame=6(0x6957780)
process last instruction done
tracing opcode BUILD_TUPLE None pc=474 frame=6(0x6957780)
process last instruction done
tracing opcode COMPARE_OP None pc=476 frame=6(0x6957780)
process last instruction done
tracing opcode EXTENDED_ARG None pc=478 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=514 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=516 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=518 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=520 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=522 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=524 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=526 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=528 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=530 frame=6(0x6957780)
process last instruction done
tracing opcode BINARY_ADD None pc=532 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=534 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=536 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=538 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=540 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=542 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=544 frame=6(0x6957780)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=546 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=548 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=550 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=552 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=554 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=556 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=558 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=560 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=562 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=564 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=566 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=568 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=570 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=572 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=574 frame=6(0x6957780)
process last instruction done
tracing opcode IS_OP None pc=576 frame=6(0x6957780)
process last instruction done
tracing opcode EXTENDED_ARG None pc=578 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=682 frame=6(0x6957780)
process last instruction done
tracing opcode EXTENDED_ARG None pc=684 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=728 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=730 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=732 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=734 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=736 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=738 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=740 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=742 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=744 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=746 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=748 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=750 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=752 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=754 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=756 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=758 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=760 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=762 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=764 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=766 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=768 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=770 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=772 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=774 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=776 frame=6(0x6957780)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=778 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=780 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=782 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=784 frame=6(0x6957780)
process last instruction done
tracing opcode BUILD_TUPLE None pc=786 frame=6(0x6957780)
process last instruction done
tracing opcode COMPARE_OP None pc=788 frame=6(0x6957780)
process last instruction done
tracing opcode EXTENDED_ARG None pc=790 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=832 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=834 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=836 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=838 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=840 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=842 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=844 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=846 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=848 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=850 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=852 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=854 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=856 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_CONST None pc=858 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=860 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=862 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=864 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=866 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=868 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=870 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=872 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_ATTR None pc=874 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=876 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=878 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=880 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_METHOD None pc=882 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=884 frame=6(0x6957780)
process last instruction done
tracing opcode CALL_METHOD None pc=886 frame=6(0x6957780)
process last instruction done
tracing opcode STORE_FAST None pc=888 frame=6(0x6957780)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=890 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=892 frame=6(0x6957780)
process last instruction done
tracing opcode LOAD_FAST None pc=894 frame=6(0x6957780)
process last instruction done
tracing opcode BUILD_TUPLE None pc=896 frame=6(0x6957780)
process last instruction done
tracing opcode EXTENDED_ARG None pc=898 frame=6(0x6957780)
process last instruction done
restart: running injected code (f_lasti=898)
commiting 0 443 [32mRETURN_VALUE[0m(None, None)  898
graph graph():
    %tensor_46 : [#users=3] = placeholder[target=tensor_46]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_46,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_46,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_46,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_53 : [#users=1] = placeholder[target=tensor_53]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_53), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
callee is full graph, merge to caller
to merge graph():
    %tensor_46 : [#users=3] = placeholder[target=tensor_46]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_46,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_46,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_46,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_53 : [#users=1] = placeholder[target=tensor_53]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_53), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
tracing opcode RETURN_VALUE None pc=930 frame=6(0x6957780)
process last instruction done
restart: running injected code (f_lasti=930)
before pop_tracker [0, 2, 5, 6] frame_id 6
tracing return in /home/drc/frontend/test/simple.py
tracing opcode UNPACK_SEQUENCE None pc=32 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=34 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=36 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=38 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=40 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=42 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=46 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=48 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=50 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=52 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=54 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_CONST None pc=56 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=58 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=60 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=62 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=64 frame=5(0x68e94d0)
process last instruction done
tracing opcode BINARY_ADD None pc=66 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=68 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=70 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=72 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=74 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_METHOD None pc=76 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=78 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=80 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=82 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=84 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=86 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=88 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=90 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=92 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_METHOD None pc=94 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_METHOD None pc=96 frame=5(0x68e94d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py 8 0x6825ce0 forward
0: [33mLOAD_FAST[0m(0, self) 
1: [33mLOAD_METHOD[0m(0, act) 
2: [33mLOAD_FAST[0m(1, input) 
3: [33mCALL_METHOD[0m(1, 1) 
4: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'NoneType'>, None), (<class 'int'>, 8), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(5, disable_trace) 
1: [32mLOAD_CONST[0m(1, 8) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(20, 20)  -> inst 10
5: [33mLOAD_FAST[0m(0, self) 
6: [33mLOAD_METHOD[0m(0, act) 
7: [33mLOAD_FAST[0m(1, input) 
8: [33mCALL_METHOD[0m(1, 1) 
9: [32mJUMP_ABSOLUTE[0m(48, 48)  -> inst 24
10: [32mLOAD_GLOBAL[0m(2, guard_match) 
11: [32mLOAD_CONST[0m(1, 8) 
12: [32mLOAD_CONST[0m(2, 0) 
13: [32mLOAD_GLOBAL[0m(1, locals) 
14: [32mCALL_FUNCTION[0m(0, 0) 
15: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
16: [32mUNPACK_SEQUENCE[0m(2, 2) 
17: [32mSTORE_FAST[0m(3, __case_idx) 
18: [32mSTORE_FAST[0m(2, __graph_fn) 
19: [32mLOAD_GLOBAL[0m(3, enable_trace) 
20: [32mLOAD_CONST[0m(1, 8) 
21: [32mCALL_FUNCTION[0m(1, 1) 
22: [32mPOP_TOP[0m(None, None) 
23: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
24: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_GLOBAL None pc=0 frame=8(0x150abc0ef040)
push tracker due to record
push tracker 8 frame 0x150abc0ef040 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=8(0x150abc0ef040)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=8(0x150abc0ef040)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 8] frame_id 8
enable_trace
push tracker 8 frame 0x150abc0ef040 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
tracing opcode POP_TOP None pc=44 frame=8(0x150abc0ef040)
process last instruction done
restart: running injected code (f_lasti=44)
tracing opcode JUMP_ABSOLUTE None pc=46 frame=8(0x150abc0ef040)
process last instruction done
restart: running injected code (f_lasti=46)
tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_FAST None pc=10 frame=8(0x150abc0ef040)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=8(0x150abc0ef040)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=8(0x150abc0ef040)
process last instruction done
tracing opcode CALL_METHOD None pc=16 frame=8(0x150abc0ef040)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=18 frame=8(0x150abc0ef040)
process last instruction done
restart: running injected code (f_lasti=18)
commiting 0 4 [32mRETURN_VALUE[0m(None, None)  18
graph graph():
    %tensor_56 : [#users=1] = placeholder[target=tensor_56]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_56,), kwargs = {})
    return (gelu,)
callee is full graph, merge to caller
to merge graph():
    %tensor_56 : [#users=1] = placeholder[target=tensor_56]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_56,), kwargs = {})
    return (gelu,)
tracing opcode RETURN_VALUE None pc=48 frame=8(0x150abc0ef040)
process last instruction done
restart: running injected code (f_lasti=48)
before pop_tracker [0, 2, 5, 8] frame_id 8
tracing return in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode STORE_FAST None pc=98 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=100 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=102 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=104 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=106 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=108 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=110 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=112 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=114 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_CONST None pc=116 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=118 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=120 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=122 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=124 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=126 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_METHOD None pc=128 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=130 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=132 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=134 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=136 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=138 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=140 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=142 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=144 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=146 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_CONST None pc=148 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=150 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=152 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=154 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=156 frame=5(0x68e94d0)
process last instruction done
tracing opcode BINARY_ADD None pc=158 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=160 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=162 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=164 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_FAST None pc=166 frame=5(0x68e94d0)
process last instruction done
tracing opcode CALL_METHOD None pc=168 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=170 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=172 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=174 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=176 frame=5(0x68e94d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=178 frame=5(0x68e94d0)
process last instruction done
tracing opcode COMPARE_OP None pc=180 frame=5(0x68e94d0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=182 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=248 frame=5(0x68e94d0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=250 frame=5(0x68e94d0)
process last instruction done
tracing opcode STORE_FAST None pc=252 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=254 frame=5(0x68e94d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=256 frame=5(0x68e94d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=270 frame=5(0x68e94d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=272 frame=5(0x68e94d0)
process last instruction done
restart: running injected code (f_lasti=272)
commiting 0 130 [32mRETURN_VALUE[0m(None, None)  272
graph graph():
    %tensor_44 : [#users=4] = placeholder[target=tensor_44]
    %tensor_45 : [#users=1] = placeholder[target=tensor_45]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_44,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_44,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_44,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_45), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_44, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
callee is full graph, merge to caller
to merge graph():
    %tensor_44 : [#users=4] = placeholder[target=tensor_44]
    %tensor_45 : [#users=1] = placeholder[target=tensor_45]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_44,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_44,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_44,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_45), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_44, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
tracing opcode RETURN_VALUE None pc=304 frame=5(0x68e94d0)
process last instruction done
restart: running injected code (f_lasti=304)
before pop_tracker [0, 2, 5] frame_id 5
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=552 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=554 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=556 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=558 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=560 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=562 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=564 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode FOR_ITER None pc=386 frame=2(0x688b4d0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=388 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=390 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=392 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=394 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=396 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=410 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=412 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=414 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=416 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=418 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=420 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=422 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=424 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=426 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=430 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=432 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=434 frame=2(0x688b4d0)
process last instruction done
tracing opcode COMPARE_OP None pc=436 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=438 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=448 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=450 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=452 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=520 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=522 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=524 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=526 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=528 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=530 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=532 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=544 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=546 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=548 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=550 frame=2(0x688b4d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 5 0x150b33c83640 forward
0: [33mLOAD_FAST[0m(1, hidden_states) 
1: [33mSTORE_FAST[0m(5, residual) 
2: [33mLOAD_FAST[0m(0, self) 
3: [33mLOAD_ATTR[0m(0, self_attn) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_FAST[0m(2, attention_mask) 
6: [33mLOAD_FAST[0m(3, layer_head_mask) 
7: [33mLOAD_FAST[0m(4, output_attentions) 
8: [33mLOAD_CONST[0m(1, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
9: [33mCALL_FUNCTION_KW[0m(4, 4) 
10: [33mUNPACK_SEQUENCE[0m(3, 3) 
11: [33mSTORE_FAST[0m(1, hidden_states) 
12: [33mSTORE_FAST[0m(6, attn_weights) 
13: [33mSTORE_FAST[0m(7, _) 
14: [33mLOAD_GLOBAL[0m(1, nn) 
15: [33mLOAD_ATTR[0m(2, functional) 
16: [33mLOAD_ATTR[0m(3, dropout) 
17: [33mLOAD_FAST[0m(1, hidden_states) 
18: [33mLOAD_FAST[0m(0, self) 
19: [33mLOAD_ATTR[0m(3, dropout) 
20: [33mLOAD_FAST[0m(0, self) 
21: [33mLOAD_ATTR[0m(4, training) 
22: [33mLOAD_CONST[0m(2, ('p', 'training')) 
23: [33mCALL_FUNCTION_KW[0m(3, 3) 
24: [33mSTORE_FAST[0m(1, hidden_states) 
25: [33mLOAD_FAST[0m(5, residual) 
26: [33mLOAD_FAST[0m(1, hidden_states) 
27: [33mBINARY_ADD[0m(None, None) 
28: [33mSTORE_FAST[0m(1, hidden_states) 
29: [33mLOAD_FAST[0m(0, self) 
30: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
31: [33mLOAD_FAST[0m(1, hidden_states) 
32: [33mCALL_METHOD[0m(1, 1) 
33: [33mSTORE_FAST[0m(1, hidden_states) 
34: [33mLOAD_FAST[0m(1, hidden_states) 
35: [33mSTORE_FAST[0m(5, residual) 
36: [33mLOAD_FAST[0m(0, self) 
37: [33mLOAD_METHOD[0m(6, activation_fn) 
38: [33mLOAD_FAST[0m(0, self) 
39: [33mLOAD_METHOD[0m(7, fc1) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mCALL_METHOD[0m(1, 1) 
42: [33mCALL_METHOD[0m(1, 1) 
43: [33mSTORE_FAST[0m(1, hidden_states) 
44: [33mLOAD_GLOBAL[0m(1, nn) 
45: [33mLOAD_ATTR[0m(2, functional) 
46: [33mLOAD_ATTR[0m(3, dropout) 
47: [33mLOAD_FAST[0m(1, hidden_states) 
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_ATTR[0m(8, activation_dropout) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_ATTR[0m(4, training) 
52: [33mLOAD_CONST[0m(2, ('p', 'training')) 
53: [33mCALL_FUNCTION_KW[0m(3, 3) 
54: [33mSTORE_FAST[0m(1, hidden_states) 
55: [33mLOAD_FAST[0m(0, self) 
56: [33mLOAD_METHOD[0m(9, fc2) 
57: [33mLOAD_FAST[0m(1, hidden_states) 
58: [33mCALL_METHOD[0m(1, 1) 
59: [33mSTORE_FAST[0m(1, hidden_states) 
60: [33mLOAD_GLOBAL[0m(1, nn) 
61: [33mLOAD_ATTR[0m(2, functional) 
62: [33mLOAD_ATTR[0m(3, dropout) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_ATTR[0m(3, dropout) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_ATTR[0m(4, training) 
68: [33mLOAD_CONST[0m(2, ('p', 'training')) 
69: [33mCALL_FUNCTION_KW[0m(3, 3) 
70: [33mSTORE_FAST[0m(1, hidden_states) 
71: [33mLOAD_FAST[0m(5, residual) 
72: [33mLOAD_FAST[0m(1, hidden_states) 
73: [33mBINARY_ADD[0m(None, None) 
74: [33mSTORE_FAST[0m(1, hidden_states) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(10, final_layer_norm) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mSTORE_FAST[0m(1, hidden_states) 
80: [33mLOAD_FAST[0m(1, hidden_states) 
81: [33mLOAD_ATTR[0m(11, dtype) 
82: [33mLOAD_GLOBAL[0m(12, torch) 
83: [33mLOAD_ATTR[0m(13, float16) 
84: [33mCOMPARE_OP[0m(2, ==) 
85: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
86: [33mLOAD_GLOBAL[0m(12, torch) 
87: [33mLOAD_METHOD[0m(14, isinf) 
88: [33mLOAD_FAST[0m(1, hidden_states) 
89: [33mCALL_METHOD[0m(1, 1) 
90: [33mLOAD_METHOD[0m(15, any) 
91: [33mCALL_METHOD[0m(0, 0) 
92: [33mPOP_JUMP_IF_TRUE[0m(200, 200)  -> inst 100
93: [33mLOAD_GLOBAL[0m(12, torch) 
94: [33mLOAD_METHOD[0m(16, isnan) 
95: [33mLOAD_FAST[0m(1, hidden_states) 
96: [33mCALL_METHOD[0m(1, 1) 
97: [33mLOAD_METHOD[0m(15, any) 
98: [33mCALL_METHOD[0m(0, 0) 
99: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
100: [33mLOAD_GLOBAL[0m(12, torch) 
101: [33mLOAD_METHOD[0m(17, finfo) 
102: [33mLOAD_FAST[0m(1, hidden_states) 
103: [33mLOAD_ATTR[0m(11, dtype) 
104: [33mCALL_METHOD[0m(1, 1) 
105: [33mLOAD_ATTR[0m(18, max) 
106: [33mLOAD_CONST[0m(3, 1000) 
107: [33mBINARY_SUBTRACT[0m(None, None) 
108: [33mSTORE_FAST[0m(8, clamp_value) 
109: [33mLOAD_GLOBAL[0m(12, torch) 
110: [33mLOAD_ATTR[0m(19, clamp) 
111: [33mLOAD_FAST[0m(1, hidden_states) 
112: [33mLOAD_FAST[0m(8, clamp_value) 
113: [33mUNARY_NEGATIVE[0m(None, None) 
114: [33mLOAD_FAST[0m(8, clamp_value) 
115: [33mLOAD_CONST[0m(4, ('min', 'max')) 
116: [33mCALL_FUNCTION_KW[0m(3, 3) 
117: [33mSTORE_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(1, hidden_states) 
119: [33mBUILD_TUPLE[0m(1, 1) 
120: [33mSTORE_FAST[0m(9, outputs) 
121: [33mLOAD_FAST[0m(4, output_attentions) 
122: [33mEXTENDED_ARG[0m(1, 1) 
123: [33mPOP_JUMP_IF_FALSE[0m(258, 258)  -> inst 129
124: [33mLOAD_FAST[0m(9, outputs) 
125: [33mLOAD_FAST[0m(6, attn_weights) 
126: [33mBUILD_TUPLE[0m(1, 1) 
127: [33mINPLACE_ADD[0m(None, None) 
128: [33mSTORE_FAST[0m(9, outputs) 
129: [33mLOAD_FAST[0m(9, outputs) 
130: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')), (<class 'int'>, 1000), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, '\n        Args:\n            hidden_states (`torch.FloatTensor`): input to the layer of shape `(seq_len, batch, embed_dim)`\n            attention_mask (`torch.FloatTensor`): attention mask of size\n                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.\n            layer_head_mask (`torch.FloatTensor`): mask for attention heads in a given layer of size\n                `(encoder_attention_heads,)`.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n        '), (<class 'tuple'>, ('min', 'max')), (<class 'int'>, 5), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(24, disable_trace) 
1: [32mLOAD_CONST[0m(5, 5) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(1, 1) 
5: [32mJUMP_ABSOLUTE[0m(276, 276)  -> inst 138
6: [33mLOAD_FAST[0m(1, hidden_states) 
7: [33mSTORE_FAST[0m(5, residual) 
8: [33mLOAD_FAST[0m(0, self) 
9: [33mLOAD_ATTR[0m(0, self_attn) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_FAST[0m(2, attention_mask) 
12: [33mLOAD_FAST[0m(3, layer_head_mask) 
13: [33mLOAD_FAST[0m(4, output_attentions) 
14: [33mLOAD_CONST[0m(0, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
15: [33mCALL_FUNCTION_KW[0m(4, 4) 
16: [33mUNPACK_SEQUENCE[0m(3, 3) 
17: [33mSTORE_FAST[0m(1, hidden_states) 
18: [33mSTORE_FAST[0m(6, attn_weights) 
19: [33mSTORE_FAST[0m(7, _) 
20: [33mLOAD_GLOBAL[0m(1, nn) 
21: [33mLOAD_ATTR[0m(2, functional) 
22: [33mLOAD_ATTR[0m(3, dropout) 
23: [33mLOAD_FAST[0m(1, hidden_states) 
24: [33mLOAD_FAST[0m(0, self) 
25: [33mLOAD_ATTR[0m(3, dropout) 
26: [33mLOAD_FAST[0m(0, self) 
27: [33mLOAD_ATTR[0m(4, training) 
28: [33mLOAD_CONST[0m(2, ('p', 'training')) 
29: [33mCALL_FUNCTION_KW[0m(3, 3) 
30: [33mSTORE_FAST[0m(1, hidden_states) 
31: [33mLOAD_FAST[0m(5, residual) 
32: [33mLOAD_FAST[0m(1, hidden_states) 
33: [33mBINARY_ADD[0m(None, None) 
34: [33mSTORE_FAST[0m(1, hidden_states) 
35: [33mLOAD_FAST[0m(0, self) 
36: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
37: [33mLOAD_FAST[0m(1, hidden_states) 
38: [33mCALL_METHOD[0m(1, 1) 
39: [33mSTORE_FAST[0m(1, hidden_states) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mSTORE_FAST[0m(5, residual) 
42: [33mLOAD_FAST[0m(0, self) 
43: [33mLOAD_METHOD[0m(6, activation_fn) 
44: [33mLOAD_FAST[0m(0, self) 
45: [33mLOAD_METHOD[0m(7, fc1) 
46: [33mLOAD_FAST[0m(1, hidden_states) 
47: [33mCALL_METHOD[0m(1, 1) 
48: [33mCALL_METHOD[0m(1, 1) 
49: [33mSTORE_FAST[0m(1, hidden_states) 
50: [33mLOAD_GLOBAL[0m(1, nn) 
51: [33mLOAD_ATTR[0m(2, functional) 
52: [33mLOAD_ATTR[0m(3, dropout) 
53: [33mLOAD_FAST[0m(1, hidden_states) 
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_ATTR[0m(8, activation_dropout) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_ATTR[0m(4, training) 
58: [33mLOAD_CONST[0m(2, ('p', 'training')) 
59: [33mCALL_FUNCTION_KW[0m(3, 3) 
60: [33mSTORE_FAST[0m(1, hidden_states) 
61: [33mLOAD_FAST[0m(0, self) 
62: [33mLOAD_METHOD[0m(9, fc2) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mCALL_METHOD[0m(1, 1) 
65: [33mSTORE_FAST[0m(1, hidden_states) 
66: [33mLOAD_GLOBAL[0m(1, nn) 
67: [33mLOAD_ATTR[0m(2, functional) 
68: [33mLOAD_ATTR[0m(3, dropout) 
69: [33mLOAD_FAST[0m(1, hidden_states) 
70: [33mLOAD_FAST[0m(0, self) 
71: [33mLOAD_ATTR[0m(3, dropout) 
72: [33mLOAD_FAST[0m(0, self) 
73: [33mLOAD_ATTR[0m(4, training) 
74: [33mLOAD_CONST[0m(2, ('p', 'training')) 
75: [33mCALL_FUNCTION_KW[0m(3, 3) 
76: [33mSTORE_FAST[0m(1, hidden_states) 
77: [33mLOAD_FAST[0m(5, residual) 
78: [33mLOAD_FAST[0m(1, hidden_states) 
79: [33mBINARY_ADD[0m(None, None) 
80: [33mSTORE_FAST[0m(1, hidden_states) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(10, final_layer_norm) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mSTORE_FAST[0m(1, hidden_states) 
86: [33mLOAD_FAST[0m(1, hidden_states) 
87: [33mLOAD_ATTR[0m(11, dtype) 
88: [33mLOAD_GLOBAL[0m(12, torch) 
89: [33mLOAD_ATTR[0m(13, float16) 
90: [33mCOMPARE_OP[0m(2, ==) 
91: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
92: [33mLOAD_GLOBAL[0m(12, torch) 
93: [33mLOAD_METHOD[0m(14, isinf) 
94: [33mLOAD_FAST[0m(1, hidden_states) 
95: [33mCALL_METHOD[0m(1, 1) 
96: [33mLOAD_METHOD[0m(15, any) 
97: [33mCALL_METHOD[0m(0, 0) 
98: [33mPOP_JUMP_IF_TRUE[0m(212, 212)  -> inst 106
99: [33mLOAD_GLOBAL[0m(12, torch) 
100: [33mLOAD_METHOD[0m(16, isnan) 
101: [33mLOAD_FAST[0m(1, hidden_states) 
102: [33mCALL_METHOD[0m(1, 1) 
103: [33mLOAD_METHOD[0m(15, any) 
104: [33mCALL_METHOD[0m(0, 0) 
105: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
106: [33mLOAD_GLOBAL[0m(12, torch) 
107: [33mLOAD_METHOD[0m(17, finfo) 
108: [33mLOAD_FAST[0m(1, hidden_states) 
109: [33mLOAD_ATTR[0m(11, dtype) 
110: [33mCALL_METHOD[0m(1, 1) 
111: [33mLOAD_ATTR[0m(18, max) 
112: [33mLOAD_CONST[0m(1, 1000) 
113: [33mBINARY_SUBTRACT[0m(None, None) 
114: [33mSTORE_FAST[0m(8, clamp_value) 
115: [33mLOAD_GLOBAL[0m(12, torch) 
116: [33mLOAD_ATTR[0m(19, clamp) 
117: [33mLOAD_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(8, clamp_value) 
119: [33mUNARY_NEGATIVE[0m(None, None) 
120: [33mLOAD_FAST[0m(8, clamp_value) 
121: [33mLOAD_CONST[0m(4, ('min', 'max')) 
122: [33mCALL_FUNCTION_KW[0m(3, 3) 
123: [33mSTORE_FAST[0m(1, hidden_states) 
124: [33mLOAD_FAST[0m(1, hidden_states) 
125: [33mBUILD_TUPLE[0m(1, 1) 
126: [33mSTORE_FAST[0m(9, outputs) 
127: [33mLOAD_FAST[0m(4, output_attentions) 
128: [32mEXTENDED_ARG[0m(1, 1) 
129: [33mPOP_JUMP_IF_FALSE[0m(270, 270)  -> inst 135
130: [33mLOAD_FAST[0m(9, outputs) 
131: [33mLOAD_FAST[0m(6, attn_weights) 
132: [33mBUILD_TUPLE[0m(1, 1) 
133: [33mINPLACE_ADD[0m(None, None) 
134: [33mSTORE_FAST[0m(9, outputs) 
135: [33mLOAD_FAST[0m(9, outputs) 
136: [32mEXTENDED_ARG[0m(1, 1) 
137: [32mJUMP_ABSOLUTE[0m(304, 304)  -> inst 152
138: [32mLOAD_GLOBAL[0m(21, guard_match) 
139: [32mLOAD_CONST[0m(5, 5) 
140: [32mLOAD_CONST[0m(6, 0) 
141: [32mLOAD_GLOBAL[0m(20, locals) 
142: [32mCALL_FUNCTION[0m(0, 0) 
143: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
144: [32mUNPACK_SEQUENCE[0m(2, 2) 
145: [32mSTORE_FAST[0m(11, __case_idx) 
146: [32mSTORE_FAST[0m(10, __graph_fn) 
147: [32mLOAD_GLOBAL[0m(22, enable_trace) 
148: [32mLOAD_CONST[0m(5, 5) 
149: [32mCALL_FUNCTION[0m(1, 1) 
150: [32mPOP_TOP[0m(None, None) 
151: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
152: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=5(0x6932d10)
push tracker due to record
push tracker 5 frame 0x6932d10 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=5(0x6932d10)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=5(0x6932d10)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5] frame_id 5
enable_trace
push tracker 5 frame 0x6932d10 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
tracing opcode POP_TOP None pc=300 frame=5(0x6932d10)
process last instruction done
restart: running injected code (f_lasti=300)
tracing opcode JUMP_ABSOLUTE None pc=302 frame=5(0x6932d10)
process last instruction done
restart: running injected code (f_lasti=302)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=14 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=16 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=18 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=22 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=24 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=26 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=28 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=30 frame=5(0x6932d10)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 6 0x6825f10 forward
0: [33mLOAD_FAST[0m(2, key_value_states) 
1: [33mLOAD_CONST[0m(1, None) 
2: [33mIS_OP[0m(1, 1) 
3: [33mSTORE_FAST[0m(7, is_cross_attention) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_METHOD[0m(0, size) 
6: [33mCALL_METHOD[0m(0, 0) 
7: [33mUNPACK_SEQUENCE[0m(3, 3) 
8: [33mSTORE_FAST[0m(8, bsz) 
9: [33mSTORE_FAST[0m(9, tgt_len) 
10: [33mSTORE_FAST[0m(10, _) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_METHOD[0m(1, q_proj) 
13: [33mLOAD_FAST[0m(1, hidden_states) 
14: [33mCALL_METHOD[0m(1, 1) 
15: [33mLOAD_FAST[0m(0, self) 
16: [33mLOAD_ATTR[0m(2, scaling) 
17: [33mBINARY_MULTIPLY[0m(None, None) 
18: [33mSTORE_FAST[0m(11, query_states) 
19: [33mLOAD_FAST[0m(7, is_cross_attention) 
20: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
21: [33mLOAD_FAST[0m(3, past_key_value) 
22: [33mLOAD_CONST[0m(1, None) 
23: [33mIS_OP[0m(1, 1) 
24: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
25: [33mLOAD_FAST[0m(3, past_key_value) 
26: [33mLOAD_CONST[0m(2, 0) 
27: [33mBINARY_SUBSCR[0m(None, None) 
28: [33mLOAD_ATTR[0m(3, shape) 
29: [33mLOAD_CONST[0m(3, 2) 
30: [33mBINARY_SUBSCR[0m(None, None) 
31: [33mLOAD_FAST[0m(2, key_value_states) 
32: [33mLOAD_ATTR[0m(3, shape) 
33: [33mLOAD_CONST[0m(4, 1) 
34: [33mBINARY_SUBSCR[0m(None, None) 
35: [33mCOMPARE_OP[0m(2, ==) 
36: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
37: [33mLOAD_FAST[0m(3, past_key_value) 
38: [33mLOAD_CONST[0m(2, 0) 
39: [33mBINARY_SUBSCR[0m(None, None) 
40: [33mSTORE_FAST[0m(12, key_states) 
41: [33mLOAD_FAST[0m(3, past_key_value) 
42: [33mLOAD_CONST[0m(4, 1) 
43: [33mBINARY_SUBSCR[0m(None, None) 
44: [33mSTORE_FAST[0m(13, value_states) 
45: [33mJUMP_FORWARD[0m(180, 272)  -> inst 136
46: [33mLOAD_FAST[0m(7, is_cross_attention) 
47: [33mPOP_JUMP_IF_FALSE[0m(138, 138)  -> inst 69
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_METHOD[0m(4, _shape) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_METHOD[0m(5, k_proj) 
52: [33mLOAD_FAST[0m(2, key_value_states) 
53: [33mCALL_METHOD[0m(1, 1) 
54: [33mLOAD_CONST[0m(5, -1) 
55: [33mLOAD_FAST[0m(8, bsz) 
56: [33mCALL_METHOD[0m(3, 3) 
57: [33mSTORE_FAST[0m(12, key_states) 
58: [33mLOAD_FAST[0m(0, self) 
59: [33mLOAD_METHOD[0m(4, _shape) 
60: [33mLOAD_FAST[0m(0, self) 
61: [33mLOAD_METHOD[0m(6, v_proj) 
62: [33mLOAD_FAST[0m(2, key_value_states) 
63: [33mCALL_METHOD[0m(1, 1) 
64: [33mLOAD_CONST[0m(5, -1) 
65: [33mLOAD_FAST[0m(8, bsz) 
66: [33mCALL_METHOD[0m(3, 3) 
67: [33mSTORE_FAST[0m(13, value_states) 
68: [33mJUMP_FORWARD[0m(134, 272)  -> inst 136
69: [33mLOAD_FAST[0m(3, past_key_value) 
70: [33mLOAD_CONST[0m(1, None) 
71: [33mIS_OP[0m(1, 1) 
72: [33mPOP_JUMP_IF_FALSE[0m(232, 232)  -> inst 116
73: [33mLOAD_FAST[0m(0, self) 
74: [33mLOAD_METHOD[0m(4, _shape) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(5, k_proj) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mLOAD_CONST[0m(5, -1) 
80: [33mLOAD_FAST[0m(8, bsz) 
81: [33mCALL_METHOD[0m(3, 3) 
82: [33mSTORE_FAST[0m(12, key_states) 
83: [33mLOAD_FAST[0m(0, self) 
84: [33mLOAD_METHOD[0m(4, _shape) 
85: [33mLOAD_FAST[0m(0, self) 
86: [33mLOAD_METHOD[0m(6, v_proj) 
87: [33mLOAD_FAST[0m(1, hidden_states) 
88: [33mCALL_METHOD[0m(1, 1) 
89: [33mLOAD_CONST[0m(5, -1) 
90: [33mLOAD_FAST[0m(8, bsz) 
91: [33mCALL_METHOD[0m(3, 3) 
92: [33mSTORE_FAST[0m(13, value_states) 
93: [33mLOAD_GLOBAL[0m(7, torch) 
94: [33mLOAD_ATTR[0m(8, cat) 
95: [33mLOAD_FAST[0m(3, past_key_value) 
96: [33mLOAD_CONST[0m(2, 0) 
97: [33mBINARY_SUBSCR[0m(None, None) 
98: [33mLOAD_FAST[0m(12, key_states) 
99: [33mBUILD_LIST[0m(2, 2) 
100: [33mLOAD_CONST[0m(3, 2) 
101: [33mLOAD_CONST[0m(6, ('dim',)) 
102: [33mCALL_FUNCTION_KW[0m(2, 2) 
103: [33mSTORE_FAST[0m(12, key_states) 
104: [33mLOAD_GLOBAL[0m(7, torch) 
105: [33mLOAD_ATTR[0m(8, cat) 
106: [33mLOAD_FAST[0m(3, past_key_value) 
107: [33mLOAD_CONST[0m(4, 1) 
108: [33mBINARY_SUBSCR[0m(None, None) 
109: [33mLOAD_FAST[0m(13, value_states) 
110: [33mBUILD_LIST[0m(2, 2) 
111: [33mLOAD_CONST[0m(3, 2) 
112: [33mLOAD_CONST[0m(6, ('dim',)) 
113: [33mCALL_FUNCTION_KW[0m(2, 2) 
114: [33mSTORE_FAST[0m(13, value_states) 
115: [33mJUMP_FORWARD[0m(40, 272)  -> inst 136
116: [33mLOAD_FAST[0m(0, self) 
117: [33mLOAD_METHOD[0m(4, _shape) 
118: [33mLOAD_FAST[0m(0, self) 
119: [33mLOAD_METHOD[0m(5, k_proj) 
120: [33mLOAD_FAST[0m(1, hidden_states) 
121: [33mCALL_METHOD[0m(1, 1) 
122: [33mLOAD_CONST[0m(5, -1) 
123: [33mLOAD_FAST[0m(8, bsz) 
124: [33mCALL_METHOD[0m(3, 3) 
125: [33mSTORE_FAST[0m(12, key_states) 
126: [33mLOAD_FAST[0m(0, self) 
127: [33mLOAD_METHOD[0m(4, _shape) 
128: [33mLOAD_FAST[0m(0, self) 
129: [33mLOAD_METHOD[0m(6, v_proj) 
130: [33mLOAD_FAST[0m(1, hidden_states) 
131: [33mCALL_METHOD[0m(1, 1) 
132: [33mLOAD_CONST[0m(5, -1) 
133: [33mLOAD_FAST[0m(8, bsz) 
134: [33mCALL_METHOD[0m(3, 3) 
135: [33mSTORE_FAST[0m(13, value_states) 
136: [33mLOAD_FAST[0m(0, self) 
137: [33mLOAD_ATTR[0m(9, is_decoder) 
138: [33mEXTENDED_ARG[0m(1, 1) 
139: [33mPOP_JUMP_IF_FALSE[0m(288, 288)  -> inst 144
140: [33mLOAD_FAST[0m(12, key_states) 
141: [33mLOAD_FAST[0m(13, value_states) 
142: [33mBUILD_TUPLE[0m(2, 2) 
143: [33mSTORE_FAST[0m(3, past_key_value) 
144: [33mLOAD_FAST[0m(8, bsz) 
145: [33mLOAD_FAST[0m(0, self) 
146: [33mLOAD_ATTR[0m(10, num_heads) 
147: [33mBINARY_MULTIPLY[0m(None, None) 
148: [33mLOAD_CONST[0m(5, -1) 
149: [33mLOAD_FAST[0m(0, self) 
150: [33mLOAD_ATTR[0m(11, head_dim) 
151: [33mBUILD_TUPLE[0m(3, 3) 
152: [33mSTORE_FAST[0m(14, proj_shape) 
153: [33mLOAD_FAST[0m(0, self) 
154: [33mLOAD_METHOD[0m(4, _shape) 
155: [33mLOAD_FAST[0m(11, query_states) 
156: [33mLOAD_FAST[0m(9, tgt_len) 
157: [33mLOAD_FAST[0m(8, bsz) 
158: [33mCALL_METHOD[0m(3, 3) 
159: [33mLOAD_ATTR[0m(12, view) 
160: [33mLOAD_FAST[0m(14, proj_shape) 
161: [33mCALL_FUNCTION_EX[0m(0, 0) 
162: [33mSTORE_FAST[0m(11, query_states) 
163: [33mLOAD_FAST[0m(12, key_states) 
164: [33mLOAD_ATTR[0m(13, reshape) 
165: [33mLOAD_FAST[0m(14, proj_shape) 
166: [33mCALL_FUNCTION_EX[0m(0, 0) 
167: [33mSTORE_FAST[0m(12, key_states) 
168: [33mLOAD_FAST[0m(13, value_states) 
169: [33mLOAD_ATTR[0m(13, reshape) 
170: [33mLOAD_FAST[0m(14, proj_shape) 
171: [33mCALL_FUNCTION_EX[0m(0, 0) 
172: [33mSTORE_FAST[0m(13, value_states) 
173: [33mLOAD_FAST[0m(12, key_states) 
174: [33mLOAD_METHOD[0m(0, size) 
175: [33mLOAD_CONST[0m(4, 1) 
176: [33mCALL_METHOD[0m(1, 1) 
177: [33mSTORE_FAST[0m(15, src_len) 
178: [33mLOAD_GLOBAL[0m(7, torch) 
179: [33mLOAD_METHOD[0m(14, bmm) 
180: [33mLOAD_FAST[0m(11, query_states) 
181: [33mLOAD_FAST[0m(12, key_states) 
182: [33mLOAD_METHOD[0m(15, transpose) 
183: [33mLOAD_CONST[0m(4, 1) 
184: [33mLOAD_CONST[0m(3, 2) 
185: [33mCALL_METHOD[0m(2, 2) 
186: [33mCALL_METHOD[0m(2, 2) 
187: [33mSTORE_FAST[0m(16, attn_weights) 
188: [33mLOAD_FAST[0m(16, attn_weights) 
189: [33mLOAD_METHOD[0m(0, size) 
190: [33mCALL_METHOD[0m(0, 0) 
191: [33mLOAD_FAST[0m(8, bsz) 
192: [33mLOAD_FAST[0m(0, self) 
193: [33mLOAD_ATTR[0m(10, num_heads) 
194: [33mBINARY_MULTIPLY[0m(None, None) 
195: [33mLOAD_FAST[0m(9, tgt_len) 
196: [33mLOAD_FAST[0m(15, src_len) 
197: [33mBUILD_TUPLE[0m(3, 3) 
198: [33mCOMPARE_OP[0m(3, !=) 
199: [33mEXTENDED_ARG[0m(1, 1) 
200: [33mPOP_JUMP_IF_FALSE[0m(438, 438)  -> inst 219
201: [33mLOAD_GLOBAL[0m(16, ValueError) 
202: [33mLOAD_CONST[0m(7, Attention weights should be of size ) 
203: [33mLOAD_FAST[0m(8, bsz) 
204: [33mLOAD_FAST[0m(0, self) 
205: [33mLOAD_ATTR[0m(10, num_heads) 
206: [33mBINARY_MULTIPLY[0m(None, None) 
207: [33mLOAD_FAST[0m(9, tgt_len) 
208: [33mLOAD_FAST[0m(15, src_len) 
209: [33mBUILD_TUPLE[0m(3, 3) 
210: [33mFORMAT_VALUE[0m(0, (None, False)) 
211: [33mLOAD_CONST[0m(8, , but is ) 
212: [33mLOAD_FAST[0m(16, attn_weights) 
213: [33mLOAD_METHOD[0m(0, size) 
214: [33mCALL_METHOD[0m(0, 0) 
215: [33mFORMAT_VALUE[0m(0, (None, False)) 
216: [33mBUILD_STRING[0m(4, 4) 
217: [33mCALL_FUNCTION[0m(1, 1) 
218: [33mRAISE_VARARGS[0m(1, 1) 
219: [33mLOAD_FAST[0m(4, attention_mask) 
220: [33mLOAD_CONST[0m(1, None) 
221: [33mIS_OP[0m(1, 1) 
222: [33mEXTENDED_ARG[0m(2, 2) 
223: [33mPOP_JUMP_IF_FALSE[0m(544, 544)  -> inst 272
224: [33mLOAD_FAST[0m(4, attention_mask) 
225: [33mLOAD_METHOD[0m(0, size) 
226: [33mCALL_METHOD[0m(0, 0) 
227: [33mLOAD_FAST[0m(8, bsz) 
228: [33mLOAD_CONST[0m(4, 1) 
229: [33mLOAD_FAST[0m(9, tgt_len) 
230: [33mLOAD_FAST[0m(15, src_len) 
231: [33mBUILD_TUPLE[0m(4, 4) 
232: [33mCOMPARE_OP[0m(3, !=) 
233: [33mEXTENDED_ARG[0m(1, 1) 
234: [33mPOP_JUMP_IF_FALSE[0m(502, 502)  -> inst 251
235: [33mLOAD_GLOBAL[0m(16, ValueError) 
236: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
237: [33mLOAD_FAST[0m(8, bsz) 
238: [33mLOAD_CONST[0m(4, 1) 
239: [33mLOAD_FAST[0m(9, tgt_len) 
240: [33mLOAD_FAST[0m(15, src_len) 
241: [33mBUILD_TUPLE[0m(4, 4) 
242: [33mFORMAT_VALUE[0m(0, (None, False)) 
243: [33mLOAD_CONST[0m(8, , but is ) 
244: [33mLOAD_FAST[0m(4, attention_mask) 
245: [33mLOAD_METHOD[0m(0, size) 
246: [33mCALL_METHOD[0m(0, 0) 
247: [33mFORMAT_VALUE[0m(0, (None, False)) 
248: [33mBUILD_STRING[0m(4, 4) 
249: [33mCALL_FUNCTION[0m(1, 1) 
250: [33mRAISE_VARARGS[0m(1, 1) 
251: [33mLOAD_FAST[0m(16, attn_weights) 
252: [33mLOAD_METHOD[0m(12, view) 
253: [33mLOAD_FAST[0m(8, bsz) 
254: [33mLOAD_FAST[0m(0, self) 
255: [33mLOAD_ATTR[0m(10, num_heads) 
256: [33mLOAD_FAST[0m(9, tgt_len) 
257: [33mLOAD_FAST[0m(15, src_len) 
258: [33mCALL_METHOD[0m(4, 4) 
259: [33mLOAD_FAST[0m(4, attention_mask) 
260: [33mBINARY_ADD[0m(None, None) 
261: [33mSTORE_FAST[0m(16, attn_weights) 
262: [33mLOAD_FAST[0m(16, attn_weights) 
263: [33mLOAD_METHOD[0m(12, view) 
264: [33mLOAD_FAST[0m(8, bsz) 
265: [33mLOAD_FAST[0m(0, self) 
266: [33mLOAD_ATTR[0m(10, num_heads) 
267: [33mBINARY_MULTIPLY[0m(None, None) 
268: [33mLOAD_FAST[0m(9, tgt_len) 
269: [33mLOAD_FAST[0m(15, src_len) 
270: [33mCALL_METHOD[0m(3, 3) 
271: [33mSTORE_FAST[0m(16, attn_weights) 
272: [33mLOAD_GLOBAL[0m(17, nn) 
273: [33mLOAD_ATTR[0m(18, functional) 
274: [33mLOAD_ATTR[0m(19, softmax) 
275: [33mLOAD_FAST[0m(16, attn_weights) 
276: [33mLOAD_CONST[0m(5, -1) 
277: [33mLOAD_CONST[0m(6, ('dim',)) 
278: [33mCALL_FUNCTION_KW[0m(2, 2) 
279: [33mSTORE_FAST[0m(16, attn_weights) 
280: [33mLOAD_FAST[0m(5, layer_head_mask) 
281: [33mLOAD_CONST[0m(1, None) 
282: [33mIS_OP[0m(1, 1) 
283: [33mEXTENDED_ARG[0m(2, 2) 
284: [33mPOP_JUMP_IF_FALSE[0m(670, 670)  -> inst 335
285: [33mLOAD_FAST[0m(5, layer_head_mask) 
286: [33mLOAD_METHOD[0m(0, size) 
287: [33mCALL_METHOD[0m(0, 0) 
288: [33mLOAD_FAST[0m(0, self) 
289: [33mLOAD_ATTR[0m(10, num_heads) 
290: [33mBUILD_TUPLE[0m(1, 1) 
291: [33mCOMPARE_OP[0m(3, !=) 
292: [33mEXTENDED_ARG[0m(2, 2) 
293: [33mPOP_JUMP_IF_FALSE[0m(616, 616)  -> inst 308
294: [33mLOAD_GLOBAL[0m(16, ValueError) 
295: [33mLOAD_CONST[0m(10, Head mask for a single layer should be of size ) 
296: [33mLOAD_FAST[0m(0, self) 
297: [33mLOAD_ATTR[0m(10, num_heads) 
298: [33mBUILD_TUPLE[0m(1, 1) 
299: [33mFORMAT_VALUE[0m(0, (None, False)) 
300: [33mLOAD_CONST[0m(8, , but is ) 
301: [33mLOAD_FAST[0m(5, layer_head_mask) 
302: [33mLOAD_METHOD[0m(0, size) 
303: [33mCALL_METHOD[0m(0, 0) 
304: [33mFORMAT_VALUE[0m(0, (None, False)) 
305: [33mBUILD_STRING[0m(4, 4) 
306: [33mCALL_FUNCTION[0m(1, 1) 
307: [33mRAISE_VARARGS[0m(1, 1) 
308: [33mLOAD_FAST[0m(5, layer_head_mask) 
309: [33mLOAD_METHOD[0m(12, view) 
310: [33mLOAD_CONST[0m(4, 1) 
311: [33mLOAD_CONST[0m(5, -1) 
312: [33mLOAD_CONST[0m(4, 1) 
313: [33mLOAD_CONST[0m(4, 1) 
314: [33mCALL_METHOD[0m(4, 4) 
315: [33mLOAD_FAST[0m(16, attn_weights) 
316: [33mLOAD_METHOD[0m(12, view) 
317: [33mLOAD_FAST[0m(8, bsz) 
318: [33mLOAD_FAST[0m(0, self) 
319: [33mLOAD_ATTR[0m(10, num_heads) 
320: [33mLOAD_FAST[0m(9, tgt_len) 
321: [33mLOAD_FAST[0m(15, src_len) 
322: [33mCALL_METHOD[0m(4, 4) 
323: [33mBINARY_MULTIPLY[0m(None, None) 
324: [33mSTORE_FAST[0m(16, attn_weights) 
325: [33mLOAD_FAST[0m(16, attn_weights) 
326: [33mLOAD_METHOD[0m(12, view) 
327: [33mLOAD_FAST[0m(8, bsz) 
328: [33mLOAD_FAST[0m(0, self) 
329: [33mLOAD_ATTR[0m(10, num_heads) 
330: [33mBINARY_MULTIPLY[0m(None, None) 
331: [33mLOAD_FAST[0m(9, tgt_len) 
332: [33mLOAD_FAST[0m(15, src_len) 
333: [33mCALL_METHOD[0m(3, 3) 
334: [33mSTORE_FAST[0m(16, attn_weights) 
335: [33mLOAD_FAST[0m(6, output_attentions) 
336: [33mEXTENDED_ARG[0m(2, 2) 
337: [33mPOP_JUMP_IF_FALSE[0m(716, 716)  -> inst 358
338: [33mLOAD_FAST[0m(16, attn_weights) 
339: [33mLOAD_METHOD[0m(12, view) 
340: [33mLOAD_FAST[0m(8, bsz) 
341: [33mLOAD_FAST[0m(0, self) 
342: [33mLOAD_ATTR[0m(10, num_heads) 
343: [33mLOAD_FAST[0m(9, tgt_len) 
344: [33mLOAD_FAST[0m(15, src_len) 
345: [33mCALL_METHOD[0m(4, 4) 
346: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
347: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
348: [33mLOAD_METHOD[0m(12, view) 
349: [33mLOAD_FAST[0m(8, bsz) 
350: [33mLOAD_FAST[0m(0, self) 
351: [33mLOAD_ATTR[0m(10, num_heads) 
352: [33mBINARY_MULTIPLY[0m(None, None) 
353: [33mLOAD_FAST[0m(9, tgt_len) 
354: [33mLOAD_FAST[0m(15, src_len) 
355: [33mCALL_METHOD[0m(3, 3) 
356: [33mSTORE_FAST[0m(16, attn_weights) 
357: [33mJUMP_FORWARD[0m(4, 720)  -> inst 360
358: [33mLOAD_CONST[0m(1, None) 
359: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
360: [33mLOAD_GLOBAL[0m(17, nn) 
361: [33mLOAD_ATTR[0m(18, functional) 
362: [33mLOAD_ATTR[0m(20, dropout) 
363: [33mLOAD_FAST[0m(16, attn_weights) 
364: [33mLOAD_FAST[0m(0, self) 
365: [33mLOAD_ATTR[0m(20, dropout) 
366: [33mLOAD_FAST[0m(0, self) 
367: [33mLOAD_ATTR[0m(21, training) 
368: [33mLOAD_CONST[0m(11, ('p', 'training')) 
369: [33mCALL_FUNCTION_KW[0m(3, 3) 
370: [33mSTORE_FAST[0m(18, attn_probs) 
371: [33mLOAD_GLOBAL[0m(7, torch) 
372: [33mLOAD_METHOD[0m(14, bmm) 
373: [33mLOAD_FAST[0m(18, attn_probs) 
374: [33mLOAD_FAST[0m(13, value_states) 
375: [33mCALL_METHOD[0m(2, 2) 
376: [33mSTORE_FAST[0m(19, attn_output) 
377: [33mLOAD_FAST[0m(19, attn_output) 
378: [33mLOAD_METHOD[0m(0, size) 
379: [33mCALL_METHOD[0m(0, 0) 
380: [33mLOAD_FAST[0m(8, bsz) 
381: [33mLOAD_FAST[0m(0, self) 
382: [33mLOAD_ATTR[0m(10, num_heads) 
383: [33mBINARY_MULTIPLY[0m(None, None) 
384: [33mLOAD_FAST[0m(9, tgt_len) 
385: [33mLOAD_FAST[0m(0, self) 
386: [33mLOAD_ATTR[0m(11, head_dim) 
387: [33mBUILD_TUPLE[0m(3, 3) 
388: [33mCOMPARE_OP[0m(3, !=) 
389: [33mEXTENDED_ARG[0m(3, 3) 
390: [33mPOP_JUMP_IF_FALSE[0m(820, 820)  -> inst 410
391: [33mLOAD_GLOBAL[0m(16, ValueError) 
392: [33mLOAD_CONST[0m(12, `attn_output` should be of size ) 
393: [33mLOAD_FAST[0m(8, bsz) 
394: [33mLOAD_FAST[0m(0, self) 
395: [33mLOAD_ATTR[0m(10, num_heads) 
396: [33mBINARY_MULTIPLY[0m(None, None) 
397: [33mLOAD_FAST[0m(9, tgt_len) 
398: [33mLOAD_FAST[0m(0, self) 
399: [33mLOAD_ATTR[0m(11, head_dim) 
400: [33mBUILD_TUPLE[0m(3, 3) 
401: [33mFORMAT_VALUE[0m(0, (None, False)) 
402: [33mLOAD_CONST[0m(8, , but is ) 
403: [33mLOAD_FAST[0m(19, attn_output) 
404: [33mLOAD_METHOD[0m(0, size) 
405: [33mCALL_METHOD[0m(0, 0) 
406: [33mFORMAT_VALUE[0m(0, (None, False)) 
407: [33mBUILD_STRING[0m(4, 4) 
408: [33mCALL_FUNCTION[0m(1, 1) 
409: [33mRAISE_VARARGS[0m(1, 1) 
410: [33mLOAD_FAST[0m(19, attn_output) 
411: [33mLOAD_METHOD[0m(12, view) 
412: [33mLOAD_FAST[0m(8, bsz) 
413: [33mLOAD_FAST[0m(0, self) 
414: [33mLOAD_ATTR[0m(10, num_heads) 
415: [33mLOAD_FAST[0m(9, tgt_len) 
416: [33mLOAD_FAST[0m(0, self) 
417: [33mLOAD_ATTR[0m(11, head_dim) 
418: [33mCALL_METHOD[0m(4, 4) 
419: [33mSTORE_FAST[0m(19, attn_output) 
420: [33mLOAD_FAST[0m(19, attn_output) 
421: [33mLOAD_METHOD[0m(15, transpose) 
422: [33mLOAD_CONST[0m(4, 1) 
423: [33mLOAD_CONST[0m(3, 2) 
424: [33mCALL_METHOD[0m(2, 2) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(13, reshape) 
428: [33mLOAD_FAST[0m(8, bsz) 
429: [33mLOAD_FAST[0m(9, tgt_len) 
430: [33mLOAD_FAST[0m(0, self) 
431: [33mLOAD_ATTR[0m(22, embed_dim) 
432: [33mCALL_METHOD[0m(3, 3) 
433: [33mSTORE_FAST[0m(19, attn_output) 
434: [33mLOAD_FAST[0m(0, self) 
435: [33mLOAD_METHOD[0m(23, out_proj) 
436: [33mLOAD_FAST[0m(19, attn_output) 
437: [33mCALL_METHOD[0m(1, 1) 
438: [33mSTORE_FAST[0m(19, attn_output) 
439: [33mLOAD_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
441: [33mLOAD_FAST[0m(3, past_key_value) 
442: [33mBUILD_TUPLE[0m(3, 3) 
443: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('dim',)), (<class 'int'>, 2), (<class 'int'>, -1), (<class 'str'>, '`attn_output` should be of size '), (<class 'str'>, 'Input shape: Batch x Time x Channel'), (<class 'int'>, 1), (<class 'str'>, 'Head mask for a single layer should be of size '), (<class 'int'>, 0), (<class 'str'>, ', but is '), (<class 'str'>, 'Attention mask should be of size '), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, 'Attention weights should be of size '), (<class 'NoneType'>, None), (<class 'int'>, 6)]
guarded code
0: [32mLOAD_GLOBAL[0m(28, disable_trace) 
1: [32mLOAD_CONST[0m(13, 6) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(3, 3) 
5: [32mJUMP_ABSOLUTE[0m(902, 902)  -> inst 451
6: [33mLOAD_FAST[0m(2, key_value_states) 
7: [33mLOAD_CONST[0m(12, None) 
8: [33mIS_OP[0m(1, 1) 
9: [33mSTORE_FAST[0m(7, is_cross_attention) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_METHOD[0m(0, size) 
12: [33mCALL_METHOD[0m(0, 0) 
13: [33mUNPACK_SEQUENCE[0m(3, 3) 
14: [33mSTORE_FAST[0m(8, bsz) 
15: [33mSTORE_FAST[0m(9, tgt_len) 
16: [33mSTORE_FAST[0m(10, _) 
17: [33mLOAD_FAST[0m(0, self) 
18: [33mLOAD_METHOD[0m(1, q_proj) 
19: [33mLOAD_FAST[0m(1, hidden_states) 
20: [33mCALL_METHOD[0m(1, 1) 
21: [33mLOAD_FAST[0m(0, self) 
22: [33mLOAD_ATTR[0m(2, scaling) 
23: [33mBINARY_MULTIPLY[0m(None, None) 
24: [33mSTORE_FAST[0m(11, query_states) 
25: [33mLOAD_FAST[0m(7, is_cross_attention) 
26: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
27: [33mLOAD_FAST[0m(3, past_key_value) 
28: [33mLOAD_CONST[0m(12, None) 
29: [33mIS_OP[0m(1, 1) 
30: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
31: [33mLOAD_FAST[0m(3, past_key_value) 
32: [33mLOAD_CONST[0m(7, 0) 
33: [33mBINARY_SUBSCR[0m(None, None) 
34: [33mLOAD_ATTR[0m(3, shape) 
35: [33mLOAD_CONST[0m(1, 2) 
36: [33mBINARY_SUBSCR[0m(None, None) 
37: [33mLOAD_FAST[0m(2, key_value_states) 
38: [33mLOAD_ATTR[0m(3, shape) 
39: [33mLOAD_CONST[0m(5, 1) 
40: [33mBINARY_SUBSCR[0m(None, None) 
41: [33mCOMPARE_OP[0m(2, ==) 
42: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
43: [33mLOAD_FAST[0m(3, past_key_value) 
44: [33mLOAD_CONST[0m(7, 0) 
45: [33mBINARY_SUBSCR[0m(None, None) 
46: [33mSTORE_FAST[0m(12, key_states) 
47: [33mLOAD_FAST[0m(3, past_key_value) 
48: [33mLOAD_CONST[0m(5, 1) 
49: [33mBINARY_SUBSCR[0m(None, None) 
50: [33mSTORE_FAST[0m(13, value_states) 
51: [33mJUMP_FORWARD[0m(180, 284)  -> inst 142
52: [33mLOAD_FAST[0m(7, is_cross_attention) 
53: [33mPOP_JUMP_IF_FALSE[0m(150, 150)  -> inst 75
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_METHOD[0m(4, _shape) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_METHOD[0m(5, k_proj) 
58: [33mLOAD_FAST[0m(2, key_value_states) 
59: [33mCALL_METHOD[0m(1, 1) 
60: [33mLOAD_CONST[0m(2, -1) 
61: [33mLOAD_FAST[0m(8, bsz) 
62: [33mCALL_METHOD[0m(3, 3) 
63: [33mSTORE_FAST[0m(12, key_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_METHOD[0m(4, _shape) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_METHOD[0m(6, v_proj) 
68: [33mLOAD_FAST[0m(2, key_value_states) 
69: [33mCALL_METHOD[0m(1, 1) 
70: [33mLOAD_CONST[0m(2, -1) 
71: [33mLOAD_FAST[0m(8, bsz) 
72: [33mCALL_METHOD[0m(3, 3) 
73: [33mSTORE_FAST[0m(13, value_states) 
74: [33mJUMP_FORWARD[0m(134, 284)  -> inst 142
75: [33mLOAD_FAST[0m(3, past_key_value) 
76: [33mLOAD_CONST[0m(12, None) 
77: [33mIS_OP[0m(1, 1) 
78: [33mPOP_JUMP_IF_FALSE[0m(244, 244)  -> inst 122
79: [33mLOAD_FAST[0m(0, self) 
80: [33mLOAD_METHOD[0m(4, _shape) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(5, k_proj) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mLOAD_CONST[0m(2, -1) 
86: [33mLOAD_FAST[0m(8, bsz) 
87: [33mCALL_METHOD[0m(3, 3) 
88: [33mSTORE_FAST[0m(12, key_states) 
89: [33mLOAD_FAST[0m(0, self) 
90: [33mLOAD_METHOD[0m(4, _shape) 
91: [33mLOAD_FAST[0m(0, self) 
92: [33mLOAD_METHOD[0m(6, v_proj) 
93: [33mLOAD_FAST[0m(1, hidden_states) 
94: [33mCALL_METHOD[0m(1, 1) 
95: [33mLOAD_CONST[0m(2, -1) 
96: [33mLOAD_FAST[0m(8, bsz) 
97: [33mCALL_METHOD[0m(3, 3) 
98: [33mSTORE_FAST[0m(13, value_states) 
99: [33mLOAD_GLOBAL[0m(7, torch) 
100: [33mLOAD_ATTR[0m(8, cat) 
101: [33mLOAD_FAST[0m(3, past_key_value) 
102: [33mLOAD_CONST[0m(7, 0) 
103: [33mBINARY_SUBSCR[0m(None, None) 
104: [33mLOAD_FAST[0m(12, key_states) 
105: [33mBUILD_LIST[0m(2, 2) 
106: [33mLOAD_CONST[0m(1, 2) 
107: [33mLOAD_CONST[0m(0, ('dim',)) 
108: [33mCALL_FUNCTION_KW[0m(2, 2) 
109: [33mSTORE_FAST[0m(12, key_states) 
110: [33mLOAD_GLOBAL[0m(7, torch) 
111: [33mLOAD_ATTR[0m(8, cat) 
112: [33mLOAD_FAST[0m(3, past_key_value) 
113: [33mLOAD_CONST[0m(5, 1) 
114: [33mBINARY_SUBSCR[0m(None, None) 
115: [33mLOAD_FAST[0m(13, value_states) 
116: [33mBUILD_LIST[0m(2, 2) 
117: [33mLOAD_CONST[0m(1, 2) 
118: [33mLOAD_CONST[0m(0, ('dim',)) 
119: [33mCALL_FUNCTION_KW[0m(2, 2) 
120: [33mSTORE_FAST[0m(13, value_states) 
121: [33mJUMP_FORWARD[0m(40, 284)  -> inst 142
122: [33mLOAD_FAST[0m(0, self) 
123: [33mLOAD_METHOD[0m(4, _shape) 
124: [33mLOAD_FAST[0m(0, self) 
125: [33mLOAD_METHOD[0m(5, k_proj) 
126: [33mLOAD_FAST[0m(1, hidden_states) 
127: [33mCALL_METHOD[0m(1, 1) 
128: [33mLOAD_CONST[0m(2, -1) 
129: [33mLOAD_FAST[0m(8, bsz) 
130: [33mCALL_METHOD[0m(3, 3) 
131: [33mSTORE_FAST[0m(12, key_states) 
132: [33mLOAD_FAST[0m(0, self) 
133: [33mLOAD_METHOD[0m(4, _shape) 
134: [33mLOAD_FAST[0m(0, self) 
135: [33mLOAD_METHOD[0m(6, v_proj) 
136: [33mLOAD_FAST[0m(1, hidden_states) 
137: [33mCALL_METHOD[0m(1, 1) 
138: [33mLOAD_CONST[0m(2, -1) 
139: [33mLOAD_FAST[0m(8, bsz) 
140: [33mCALL_METHOD[0m(3, 3) 
141: [33mSTORE_FAST[0m(13, value_states) 
142: [33mLOAD_FAST[0m(0, self) 
143: [33mLOAD_ATTR[0m(9, is_decoder) 
144: [32mEXTENDED_ARG[0m(1, 1) 
145: [33mPOP_JUMP_IF_FALSE[0m(300, 300)  -> inst 150
146: [33mLOAD_FAST[0m(12, key_states) 
147: [33mLOAD_FAST[0m(13, value_states) 
148: [33mBUILD_TUPLE[0m(2, 2) 
149: [33mSTORE_FAST[0m(3, past_key_value) 
150: [33mLOAD_FAST[0m(8, bsz) 
151: [33mLOAD_FAST[0m(0, self) 
152: [33mLOAD_ATTR[0m(10, num_heads) 
153: [33mBINARY_MULTIPLY[0m(None, None) 
154: [33mLOAD_CONST[0m(2, -1) 
155: [33mLOAD_FAST[0m(0, self) 
156: [33mLOAD_ATTR[0m(11, head_dim) 
157: [33mBUILD_TUPLE[0m(3, 3) 
158: [33mSTORE_FAST[0m(14, proj_shape) 
159: [33mLOAD_FAST[0m(0, self) 
160: [33mLOAD_METHOD[0m(4, _shape) 
161: [33mLOAD_FAST[0m(11, query_states) 
162: [33mLOAD_FAST[0m(9, tgt_len) 
163: [33mLOAD_FAST[0m(8, bsz) 
164: [33mCALL_METHOD[0m(3, 3) 
165: [33mLOAD_ATTR[0m(12, view) 
166: [33mLOAD_FAST[0m(14, proj_shape) 
167: [33mCALL_FUNCTION_EX[0m(0, 0) 
168: [33mSTORE_FAST[0m(11, query_states) 
169: [33mLOAD_FAST[0m(12, key_states) 
170: [33mLOAD_ATTR[0m(13, reshape) 
171: [33mLOAD_FAST[0m(14, proj_shape) 
172: [33mCALL_FUNCTION_EX[0m(0, 0) 
173: [33mSTORE_FAST[0m(12, key_states) 
174: [33mLOAD_FAST[0m(13, value_states) 
175: [33mLOAD_ATTR[0m(13, reshape) 
176: [33mLOAD_FAST[0m(14, proj_shape) 
177: [33mCALL_FUNCTION_EX[0m(0, 0) 
178: [33mSTORE_FAST[0m(13, value_states) 
179: [33mLOAD_FAST[0m(12, key_states) 
180: [33mLOAD_METHOD[0m(0, size) 
181: [33mLOAD_CONST[0m(5, 1) 
182: [33mCALL_METHOD[0m(1, 1) 
183: [33mSTORE_FAST[0m(15, src_len) 
184: [33mLOAD_GLOBAL[0m(7, torch) 
185: [33mLOAD_METHOD[0m(14, bmm) 
186: [33mLOAD_FAST[0m(11, query_states) 
187: [33mLOAD_FAST[0m(12, key_states) 
188: [33mLOAD_METHOD[0m(15, transpose) 
189: [33mLOAD_CONST[0m(5, 1) 
190: [33mLOAD_CONST[0m(1, 2) 
191: [33mCALL_METHOD[0m(2, 2) 
192: [33mCALL_METHOD[0m(2, 2) 
193: [33mSTORE_FAST[0m(16, attn_weights) 
194: [33mLOAD_FAST[0m(16, attn_weights) 
195: [33mLOAD_METHOD[0m(0, size) 
196: [33mCALL_METHOD[0m(0, 0) 
197: [33mLOAD_FAST[0m(8, bsz) 
198: [33mLOAD_FAST[0m(0, self) 
199: [33mLOAD_ATTR[0m(10, num_heads) 
200: [33mBINARY_MULTIPLY[0m(None, None) 
201: [33mLOAD_FAST[0m(9, tgt_len) 
202: [33mLOAD_FAST[0m(15, src_len) 
203: [33mBUILD_TUPLE[0m(3, 3) 
204: [33mCOMPARE_OP[0m(3, !=) 
205: [32mEXTENDED_ARG[0m(1, 1) 
206: [33mPOP_JUMP_IF_FALSE[0m(450, 450)  -> inst 225
207: [33mLOAD_GLOBAL[0m(16, ValueError) 
208: [33mLOAD_CONST[0m(11, Attention weights should be of size ) 
209: [33mLOAD_FAST[0m(8, bsz) 
210: [33mLOAD_FAST[0m(0, self) 
211: [33mLOAD_ATTR[0m(10, num_heads) 
212: [33mBINARY_MULTIPLY[0m(None, None) 
213: [33mLOAD_FAST[0m(9, tgt_len) 
214: [33mLOAD_FAST[0m(15, src_len) 
215: [33mBUILD_TUPLE[0m(3, 3) 
216: [33mFORMAT_VALUE[0m(0, (None, False)) 
217: [33mLOAD_CONST[0m(8, , but is ) 
218: [33mLOAD_FAST[0m(16, attn_weights) 
219: [33mLOAD_METHOD[0m(0, size) 
220: [33mCALL_METHOD[0m(0, 0) 
221: [33mFORMAT_VALUE[0m(0, (None, False)) 
222: [33mBUILD_STRING[0m(4, 4) 
223: [33mCALL_FUNCTION[0m(1, 1) 
224: [33mRAISE_VARARGS[0m(1, 1) 
225: [33mLOAD_FAST[0m(4, attention_mask) 
226: [33mLOAD_CONST[0m(12, None) 
227: [33mIS_OP[0m(1, 1) 
228: [32mEXTENDED_ARG[0m(2, 2) 
229: [33mPOP_JUMP_IF_FALSE[0m(556, 556)  -> inst 278
230: [33mLOAD_FAST[0m(4, attention_mask) 
231: [33mLOAD_METHOD[0m(0, size) 
232: [33mCALL_METHOD[0m(0, 0) 
233: [33mLOAD_FAST[0m(8, bsz) 
234: [33mLOAD_CONST[0m(5, 1) 
235: [33mLOAD_FAST[0m(9, tgt_len) 
236: [33mLOAD_FAST[0m(15, src_len) 
237: [33mBUILD_TUPLE[0m(4, 4) 
238: [33mCOMPARE_OP[0m(3, !=) 
239: [32mEXTENDED_ARG[0m(2, 2) 
240: [33mPOP_JUMP_IF_FALSE[0m(514, 514)  -> inst 257
241: [33mLOAD_GLOBAL[0m(16, ValueError) 
242: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
243: [33mLOAD_FAST[0m(8, bsz) 
244: [33mLOAD_CONST[0m(5, 1) 
245: [33mLOAD_FAST[0m(9, tgt_len) 
246: [33mLOAD_FAST[0m(15, src_len) 
247: [33mBUILD_TUPLE[0m(4, 4) 
248: [33mFORMAT_VALUE[0m(0, (None, False)) 
249: [33mLOAD_CONST[0m(8, , but is ) 
250: [33mLOAD_FAST[0m(4, attention_mask) 
251: [33mLOAD_METHOD[0m(0, size) 
252: [33mCALL_METHOD[0m(0, 0) 
253: [33mFORMAT_VALUE[0m(0, (None, False)) 
254: [33mBUILD_STRING[0m(4, 4) 
255: [33mCALL_FUNCTION[0m(1, 1) 
256: [33mRAISE_VARARGS[0m(1, 1) 
257: [33mLOAD_FAST[0m(16, attn_weights) 
258: [33mLOAD_METHOD[0m(12, view) 
259: [33mLOAD_FAST[0m(8, bsz) 
260: [33mLOAD_FAST[0m(0, self) 
261: [33mLOAD_ATTR[0m(10, num_heads) 
262: [33mLOAD_FAST[0m(9, tgt_len) 
263: [33mLOAD_FAST[0m(15, src_len) 
264: [33mCALL_METHOD[0m(4, 4) 
265: [33mLOAD_FAST[0m(4, attention_mask) 
266: [33mBINARY_ADD[0m(None, None) 
267: [33mSTORE_FAST[0m(16, attn_weights) 
268: [33mLOAD_FAST[0m(16, attn_weights) 
269: [33mLOAD_METHOD[0m(12, view) 
270: [33mLOAD_FAST[0m(8, bsz) 
271: [33mLOAD_FAST[0m(0, self) 
272: [33mLOAD_ATTR[0m(10, num_heads) 
273: [33mBINARY_MULTIPLY[0m(None, None) 
274: [33mLOAD_FAST[0m(9, tgt_len) 
275: [33mLOAD_FAST[0m(15, src_len) 
276: [33mCALL_METHOD[0m(3, 3) 
277: [33mSTORE_FAST[0m(16, attn_weights) 
278: [33mLOAD_GLOBAL[0m(17, nn) 
279: [33mLOAD_ATTR[0m(18, functional) 
280: [33mLOAD_ATTR[0m(19, softmax) 
281: [33mLOAD_FAST[0m(16, attn_weights) 
282: [33mLOAD_CONST[0m(2, -1) 
283: [33mLOAD_CONST[0m(0, ('dim',)) 
284: [33mCALL_FUNCTION_KW[0m(2, 2) 
285: [33mSTORE_FAST[0m(16, attn_weights) 
286: [33mLOAD_FAST[0m(5, layer_head_mask) 
287: [33mLOAD_CONST[0m(12, None) 
288: [33mIS_OP[0m(1, 1) 
289: [32mEXTENDED_ARG[0m(2, 2) 
290: [33mPOP_JUMP_IF_FALSE[0m(682, 682)  -> inst 341
291: [33mLOAD_FAST[0m(5, layer_head_mask) 
292: [33mLOAD_METHOD[0m(0, size) 
293: [33mCALL_METHOD[0m(0, 0) 
294: [33mLOAD_FAST[0m(0, self) 
295: [33mLOAD_ATTR[0m(10, num_heads) 
296: [33mBUILD_TUPLE[0m(1, 1) 
297: [33mCOMPARE_OP[0m(3, !=) 
298: [32mEXTENDED_ARG[0m(2, 2) 
299: [33mPOP_JUMP_IF_FALSE[0m(628, 628)  -> inst 314
300: [33mLOAD_GLOBAL[0m(16, ValueError) 
301: [33mLOAD_CONST[0m(6, Head mask for a single layer should be of size ) 
302: [33mLOAD_FAST[0m(0, self) 
303: [33mLOAD_ATTR[0m(10, num_heads) 
304: [33mBUILD_TUPLE[0m(1, 1) 
305: [33mFORMAT_VALUE[0m(0, (None, False)) 
306: [33mLOAD_CONST[0m(8, , but is ) 
307: [33mLOAD_FAST[0m(5, layer_head_mask) 
308: [33mLOAD_METHOD[0m(0, size) 
309: [33mCALL_METHOD[0m(0, 0) 
310: [33mFORMAT_VALUE[0m(0, (None, False)) 
311: [33mBUILD_STRING[0m(4, 4) 
312: [33mCALL_FUNCTION[0m(1, 1) 
313: [33mRAISE_VARARGS[0m(1, 1) 
314: [33mLOAD_FAST[0m(5, layer_head_mask) 
315: [33mLOAD_METHOD[0m(12, view) 
316: [33mLOAD_CONST[0m(5, 1) 
317: [33mLOAD_CONST[0m(2, -1) 
318: [33mLOAD_CONST[0m(5, 1) 
319: [33mLOAD_CONST[0m(5, 1) 
320: [33mCALL_METHOD[0m(4, 4) 
321: [33mLOAD_FAST[0m(16, attn_weights) 
322: [33mLOAD_METHOD[0m(12, view) 
323: [33mLOAD_FAST[0m(8, bsz) 
324: [33mLOAD_FAST[0m(0, self) 
325: [33mLOAD_ATTR[0m(10, num_heads) 
326: [33mLOAD_FAST[0m(9, tgt_len) 
327: [33mLOAD_FAST[0m(15, src_len) 
328: [33mCALL_METHOD[0m(4, 4) 
329: [33mBINARY_MULTIPLY[0m(None, None) 
330: [33mSTORE_FAST[0m(16, attn_weights) 
331: [33mLOAD_FAST[0m(16, attn_weights) 
332: [33mLOAD_METHOD[0m(12, view) 
333: [33mLOAD_FAST[0m(8, bsz) 
334: [33mLOAD_FAST[0m(0, self) 
335: [33mLOAD_ATTR[0m(10, num_heads) 
336: [33mBINARY_MULTIPLY[0m(None, None) 
337: [33mLOAD_FAST[0m(9, tgt_len) 
338: [33mLOAD_FAST[0m(15, src_len) 
339: [33mCALL_METHOD[0m(3, 3) 
340: [33mSTORE_FAST[0m(16, attn_weights) 
341: [33mLOAD_FAST[0m(6, output_attentions) 
342: [32mEXTENDED_ARG[0m(2, 2) 
343: [33mPOP_JUMP_IF_FALSE[0m(728, 728)  -> inst 364
344: [33mLOAD_FAST[0m(16, attn_weights) 
345: [33mLOAD_METHOD[0m(12, view) 
346: [33mLOAD_FAST[0m(8, bsz) 
347: [33mLOAD_FAST[0m(0, self) 
348: [33mLOAD_ATTR[0m(10, num_heads) 
349: [33mLOAD_FAST[0m(9, tgt_len) 
350: [33mLOAD_FAST[0m(15, src_len) 
351: [33mCALL_METHOD[0m(4, 4) 
352: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
353: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
354: [33mLOAD_METHOD[0m(12, view) 
355: [33mLOAD_FAST[0m(8, bsz) 
356: [33mLOAD_FAST[0m(0, self) 
357: [33mLOAD_ATTR[0m(10, num_heads) 
358: [33mBINARY_MULTIPLY[0m(None, None) 
359: [33mLOAD_FAST[0m(9, tgt_len) 
360: [33mLOAD_FAST[0m(15, src_len) 
361: [33mCALL_METHOD[0m(3, 3) 
362: [33mSTORE_FAST[0m(16, attn_weights) 
363: [33mJUMP_FORWARD[0m(4, 732)  -> inst 366
364: [33mLOAD_CONST[0m(12, None) 
365: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
366: [33mLOAD_GLOBAL[0m(17, nn) 
367: [33mLOAD_ATTR[0m(18, functional) 
368: [33mLOAD_ATTR[0m(20, dropout) 
369: [33mLOAD_FAST[0m(16, attn_weights) 
370: [33mLOAD_FAST[0m(0, self) 
371: [33mLOAD_ATTR[0m(20, dropout) 
372: [33mLOAD_FAST[0m(0, self) 
373: [33mLOAD_ATTR[0m(21, training) 
374: [33mLOAD_CONST[0m(10, ('p', 'training')) 
375: [33mCALL_FUNCTION_KW[0m(3, 3) 
376: [33mSTORE_FAST[0m(18, attn_probs) 
377: [33mLOAD_GLOBAL[0m(7, torch) 
378: [33mLOAD_METHOD[0m(14, bmm) 
379: [33mLOAD_FAST[0m(18, attn_probs) 
380: [33mLOAD_FAST[0m(13, value_states) 
381: [33mCALL_METHOD[0m(2, 2) 
382: [33mSTORE_FAST[0m(19, attn_output) 
383: [33mLOAD_FAST[0m(19, attn_output) 
384: [33mLOAD_METHOD[0m(0, size) 
385: [33mCALL_METHOD[0m(0, 0) 
386: [33mLOAD_FAST[0m(8, bsz) 
387: [33mLOAD_FAST[0m(0, self) 
388: [33mLOAD_ATTR[0m(10, num_heads) 
389: [33mBINARY_MULTIPLY[0m(None, None) 
390: [33mLOAD_FAST[0m(9, tgt_len) 
391: [33mLOAD_FAST[0m(0, self) 
392: [33mLOAD_ATTR[0m(11, head_dim) 
393: [33mBUILD_TUPLE[0m(3, 3) 
394: [33mCOMPARE_OP[0m(3, !=) 
395: [32mEXTENDED_ARG[0m(3, 3) 
396: [33mPOP_JUMP_IF_FALSE[0m(832, 832)  -> inst 416
397: [33mLOAD_GLOBAL[0m(16, ValueError) 
398: [33mLOAD_CONST[0m(3, `attn_output` should be of size ) 
399: [33mLOAD_FAST[0m(8, bsz) 
400: [33mLOAD_FAST[0m(0, self) 
401: [33mLOAD_ATTR[0m(10, num_heads) 
402: [33mBINARY_MULTIPLY[0m(None, None) 
403: [33mLOAD_FAST[0m(9, tgt_len) 
404: [33mLOAD_FAST[0m(0, self) 
405: [33mLOAD_ATTR[0m(11, head_dim) 
406: [33mBUILD_TUPLE[0m(3, 3) 
407: [33mFORMAT_VALUE[0m(0, (None, False)) 
408: [33mLOAD_CONST[0m(8, , but is ) 
409: [33mLOAD_FAST[0m(19, attn_output) 
410: [33mLOAD_METHOD[0m(0, size) 
411: [33mCALL_METHOD[0m(0, 0) 
412: [33mFORMAT_VALUE[0m(0, (None, False)) 
413: [33mBUILD_STRING[0m(4, 4) 
414: [33mCALL_FUNCTION[0m(1, 1) 
415: [33mRAISE_VARARGS[0m(1, 1) 
416: [33mLOAD_FAST[0m(19, attn_output) 
417: [33mLOAD_METHOD[0m(12, view) 
418: [33mLOAD_FAST[0m(8, bsz) 
419: [33mLOAD_FAST[0m(0, self) 
420: [33mLOAD_ATTR[0m(10, num_heads) 
421: [33mLOAD_FAST[0m(9, tgt_len) 
422: [33mLOAD_FAST[0m(0, self) 
423: [33mLOAD_ATTR[0m(11, head_dim) 
424: [33mCALL_METHOD[0m(4, 4) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(15, transpose) 
428: [33mLOAD_CONST[0m(5, 1) 
429: [33mLOAD_CONST[0m(1, 2) 
430: [33mCALL_METHOD[0m(2, 2) 
431: [33mSTORE_FAST[0m(19, attn_output) 
432: [33mLOAD_FAST[0m(19, attn_output) 
433: [33mLOAD_METHOD[0m(13, reshape) 
434: [33mLOAD_FAST[0m(8, bsz) 
435: [33mLOAD_FAST[0m(9, tgt_len) 
436: [33mLOAD_FAST[0m(0, self) 
437: [33mLOAD_ATTR[0m(22, embed_dim) 
438: [33mCALL_METHOD[0m(3, 3) 
439: [33mSTORE_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(0, self) 
441: [33mLOAD_METHOD[0m(23, out_proj) 
442: [33mLOAD_FAST[0m(19, attn_output) 
443: [33mCALL_METHOD[0m(1, 1) 
444: [33mSTORE_FAST[0m(19, attn_output) 
445: [33mLOAD_FAST[0m(19, attn_output) 
446: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
447: [33mLOAD_FAST[0m(3, past_key_value) 
448: [33mBUILD_TUPLE[0m(3, 3) 
449: [32mEXTENDED_ARG[0m(3, 3) 
450: [32mJUMP_ABSOLUTE[0m(930, 930)  -> inst 465
451: [32mLOAD_GLOBAL[0m(25, guard_match) 
452: [32mLOAD_CONST[0m(13, 6) 
453: [32mLOAD_CONST[0m(7, 0) 
454: [32mLOAD_GLOBAL[0m(24, locals) 
455: [32mCALL_FUNCTION[0m(0, 0) 
456: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
457: [32mUNPACK_SEQUENCE[0m(2, 2) 
458: [32mSTORE_FAST[0m(21, __case_idx) 
459: [32mSTORE_FAST[0m(20, __graph_fn) 
460: [32mLOAD_GLOBAL[0m(26, enable_trace) 
461: [32mLOAD_CONST[0m(13, 6) 
462: [32mCALL_FUNCTION[0m(1, 1) 
463: [32mPOP_TOP[0m(None, None) 
464: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
465: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=6(0x68ad980)
push tracker due to record
push tracker 6 frame 0x68ad980 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=6(0x68ad980)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=6(0x68ad980)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6] frame_id 6
enable_trace
push tracker 6 frame 0x68ad980 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
tracing opcode POP_TOP None pc=926 frame=6(0x68ad980)
process last instruction done
restart: running injected code (f_lasti=926)
tracing opcode JUMP_ABSOLUTE None pc=928 frame=6(0x68ad980)
process last instruction done
restart: running injected code (f_lasti=928)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=6(0x68ad980)
process last instruction done
tracing opcode IS_OP None pc=16 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=18 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=22 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=24 frame=6(0x68ad980)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=26 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=28 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=30 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=32 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=34 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=38 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=40 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=42 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=6(0x68ad980)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=46 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=48 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=50 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode POP_JUMP_IF_FALSE None pc=52 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=104 frame=6(0x68ad980)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=106 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=150 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=152 frame=6(0x68ad980)
process last instruction done
tracing opcode IS_OP None pc=154 frame=6(0x68ad980)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=156 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=244 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=246 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=248 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=250 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=252 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=254 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=256 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=258 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=260 frame=6(0x68ad980)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x6980120)
push tracker due to record
push tracker 7 frame 0x6980120 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x6980120)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x6980120)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x6980120 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x6980120)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x6980120)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x6980120)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x6980120)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x6980120)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x6980120)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x6980120)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x6980120)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_63 : [#users=1] = placeholder[target=tensor_63]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_63, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_63 : [#users=1] = placeholder[target=tensor_63]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_63, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x6980120)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=262 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=264 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=266 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=268 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=270 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=272 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=274 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=276 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=278 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=280 frame=6(0x68ad980)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x68d85e0)
push tracker due to record
push tracker 7 frame 0x68d85e0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x68d85e0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x68d85e0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x68d85e0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x68d85e0)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x68d85e0)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x68d85e0)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x68d85e0)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x68d85e0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x68d85e0)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x68d85e0)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x68d85e0)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_65 : [#users=1] = placeholder[target=tensor_65]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_65, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_65 : [#users=1] = placeholder[target=tensor_65]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_65, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x68d85e0)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=282 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=284 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=286 frame=6(0x68ad980)
process last instruction done
tracing opcode EXTENDED_ARG None pc=288 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=300 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=302 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=304 frame=6(0x68ad980)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=306 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=308 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=310 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=312 frame=6(0x68ad980)
process last instruction done
tracing opcode BUILD_TUPLE None pc=314 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=316 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=318 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=320 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=322 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=324 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=326 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=328 frame=6(0x68ad980)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x68bbdd0)
push tracker due to record
push tracker 7 frame 0x68bbdd0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x68bbdd0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x68bbdd0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x68bbdd0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x68bbdd0)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x68bbdd0)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x68bbdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x68bbdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x68bbdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x68bbdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x68bbdd0)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x68bbdd0)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_67 : [#users=1] = placeholder[target=tensor_67]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_67, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_67 : [#users=1] = placeholder[target=tensor_67]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_67, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x68bbdd0)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode LOAD_ATTR None pc=330 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=332 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=334 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=336 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=338 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=340 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=342 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=344 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=346 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=348 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=350 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=352 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=354 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=356 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=358 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=360 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=362 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=364 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=366 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=368 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=370 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=372 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=374 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=376 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=378 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=380 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=382 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=384 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=386 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=388 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=390 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=392 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=394 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=396 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=398 frame=6(0x68ad980)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=400 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=402 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=404 frame=6(0x68ad980)
process last instruction done
tracing opcode BUILD_TUPLE None pc=406 frame=6(0x68ad980)
process last instruction done
tracing opcode COMPARE_OP None pc=408 frame=6(0x68ad980)
process last instruction done
tracing opcode EXTENDED_ARG None pc=410 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=450 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=452 frame=6(0x68ad980)
process last instruction done
tracing opcode IS_OP None pc=454 frame=6(0x68ad980)
process last instruction done
tracing opcode EXTENDED_ARG None pc=456 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=460 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=462 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=464 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=466 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=468 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=470 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=472 frame=6(0x68ad980)
process last instruction done
tracing opcode BUILD_TUPLE None pc=474 frame=6(0x68ad980)
process last instruction done
tracing opcode COMPARE_OP None pc=476 frame=6(0x68ad980)
process last instruction done
tracing opcode EXTENDED_ARG None pc=478 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=514 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=516 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=518 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=520 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=522 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=524 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=526 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=528 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=530 frame=6(0x68ad980)
process last instruction done
tracing opcode BINARY_ADD None pc=532 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=534 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=536 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=538 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=540 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=542 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=544 frame=6(0x68ad980)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=546 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=548 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=550 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=552 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=554 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=556 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=558 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=560 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=562 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=564 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=566 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=568 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=570 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=572 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=574 frame=6(0x68ad980)
process last instruction done
tracing opcode IS_OP None pc=576 frame=6(0x68ad980)
process last instruction done
tracing opcode EXTENDED_ARG None pc=578 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=682 frame=6(0x68ad980)
process last instruction done
tracing opcode EXTENDED_ARG None pc=684 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=728 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=730 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=732 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=734 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=736 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=738 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=740 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=742 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=744 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=746 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=748 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=750 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=752 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=754 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=756 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=758 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=760 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=762 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=764 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=766 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=768 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=770 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=772 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=774 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=776 frame=6(0x68ad980)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=778 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=780 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=782 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=784 frame=6(0x68ad980)
process last instruction done
tracing opcode BUILD_TUPLE None pc=786 frame=6(0x68ad980)
process last instruction done
tracing opcode COMPARE_OP None pc=788 frame=6(0x68ad980)
process last instruction done
tracing opcode EXTENDED_ARG None pc=790 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=832 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=834 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=836 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=838 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=840 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=842 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=844 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=846 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=848 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=850 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=852 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=854 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=856 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_CONST None pc=858 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=860 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=862 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=864 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=866 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=868 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=870 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=872 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_ATTR None pc=874 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=876 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=878 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=880 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_METHOD None pc=882 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=884 frame=6(0x68ad980)
process last instruction done
tracing opcode CALL_METHOD None pc=886 frame=6(0x68ad980)
process last instruction done
tracing opcode STORE_FAST None pc=888 frame=6(0x68ad980)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=890 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=892 frame=6(0x68ad980)
process last instruction done
tracing opcode LOAD_FAST None pc=894 frame=6(0x68ad980)
process last instruction done
tracing opcode BUILD_TUPLE None pc=896 frame=6(0x68ad980)
process last instruction done
tracing opcode EXTENDED_ARG None pc=898 frame=6(0x68ad980)
process last instruction done
restart: running injected code (f_lasti=898)
commiting 0 443 [32mRETURN_VALUE[0m(None, None)  898
graph graph():
    %tensor_62 : [#users=3] = placeholder[target=tensor_62]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_62,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_62,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_62,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_69 : [#users=1] = placeholder[target=tensor_69]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_69), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
callee is full graph, merge to caller
to merge graph():
    %tensor_62 : [#users=3] = placeholder[target=tensor_62]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_62,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_62,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_62,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_69 : [#users=1] = placeholder[target=tensor_69]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_69), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
tracing opcode RETURN_VALUE None pc=930 frame=6(0x68ad980)
process last instruction done
restart: running injected code (f_lasti=930)
before pop_tracker [0, 2, 5, 6] frame_id 6
tracing return in /home/drc/frontend/test/simple.py
tracing opcode UNPACK_SEQUENCE None pc=32 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=34 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=36 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=38 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=40 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=42 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=46 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=48 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=50 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=52 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=54 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_CONST None pc=56 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=58 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=60 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=62 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=64 frame=5(0x6932d10)
process last instruction done
tracing opcode BINARY_ADD None pc=66 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=68 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=70 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_METHOD None pc=72 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=74 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_METHOD None pc=76 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=78 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=80 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=82 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=84 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_METHOD None pc=86 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=88 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_METHOD None pc=90 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=92 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_METHOD None pc=94 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_METHOD None pc=96 frame=5(0x6932d10)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py 8 0x6825ce0 forward
0: [33mLOAD_FAST[0m(0, self) 
1: [33mLOAD_METHOD[0m(0, act) 
2: [33mLOAD_FAST[0m(1, input) 
3: [33mCALL_METHOD[0m(1, 1) 
4: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'NoneType'>, None), (<class 'int'>, 8), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(5, disable_trace) 
1: [32mLOAD_CONST[0m(1, 8) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(20, 20)  -> inst 10
5: [33mLOAD_FAST[0m(0, self) 
6: [33mLOAD_METHOD[0m(0, act) 
7: [33mLOAD_FAST[0m(1, input) 
8: [33mCALL_METHOD[0m(1, 1) 
9: [32mJUMP_ABSOLUTE[0m(48, 48)  -> inst 24
10: [32mLOAD_GLOBAL[0m(2, guard_match) 
11: [32mLOAD_CONST[0m(1, 8) 
12: [32mLOAD_CONST[0m(2, 0) 
13: [32mLOAD_GLOBAL[0m(1, locals) 
14: [32mCALL_FUNCTION[0m(0, 0) 
15: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
16: [32mUNPACK_SEQUENCE[0m(2, 2) 
17: [32mSTORE_FAST[0m(3, __case_idx) 
18: [32mSTORE_FAST[0m(2, __graph_fn) 
19: [32mLOAD_GLOBAL[0m(3, enable_trace) 
20: [32mLOAD_CONST[0m(1, 8) 
21: [32mCALL_FUNCTION[0m(1, 1) 
22: [32mPOP_TOP[0m(None, None) 
23: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
24: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_GLOBAL None pc=0 frame=8(0x150abc0fb040)
push tracker due to record
push tracker 8 frame 0x150abc0fb040 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=8(0x150abc0fb040)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=8(0x150abc0fb040)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 8] frame_id 8
enable_trace
push tracker 8 frame 0x150abc0fb040 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
tracing opcode POP_TOP None pc=44 frame=8(0x150abc0fb040)
process last instruction done
restart: running injected code (f_lasti=44)
tracing opcode JUMP_ABSOLUTE None pc=46 frame=8(0x150abc0fb040)
process last instruction done
restart: running injected code (f_lasti=46)
tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_FAST None pc=10 frame=8(0x150abc0fb040)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=8(0x150abc0fb040)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=8(0x150abc0fb040)
process last instruction done
tracing opcode CALL_METHOD None pc=16 frame=8(0x150abc0fb040)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=18 frame=8(0x150abc0fb040)
process last instruction done
restart: running injected code (f_lasti=18)
commiting 0 4 [32mRETURN_VALUE[0m(None, None)  18
graph graph():
    %tensor_72 : [#users=1] = placeholder[target=tensor_72]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_72,), kwargs = {})
    return (gelu,)
callee is full graph, merge to caller
to merge graph():
    %tensor_72 : [#users=1] = placeholder[target=tensor_72]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_72,), kwargs = {})
    return (gelu,)
tracing opcode RETURN_VALUE None pc=48 frame=8(0x150abc0fb040)
process last instruction done
restart: running injected code (f_lasti=48)
before pop_tracker [0, 2, 5, 8] frame_id 8
tracing return in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode STORE_FAST None pc=98 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=100 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=102 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=104 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=106 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=108 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=110 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=112 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=114 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_CONST None pc=116 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=118 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=120 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=122 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_METHOD None pc=124 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=126 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_METHOD None pc=128 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=130 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=132 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=134 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=136 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=138 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=140 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=142 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=144 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=146 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_CONST None pc=148 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=150 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=152 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=154 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=156 frame=5(0x6932d10)
process last instruction done
tracing opcode BINARY_ADD None pc=158 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=160 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=162 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_METHOD None pc=164 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_FAST None pc=166 frame=5(0x6932d10)
process last instruction done
tracing opcode CALL_METHOD None pc=168 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=170 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=172 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=174 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=176 frame=5(0x6932d10)
process last instruction done
tracing opcode LOAD_ATTR None pc=178 frame=5(0x6932d10)
process last instruction done
tracing opcode COMPARE_OP None pc=180 frame=5(0x6932d10)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=182 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=248 frame=5(0x6932d10)
process last instruction done
tracing opcode BUILD_TUPLE None pc=250 frame=5(0x6932d10)
process last instruction done
tracing opcode STORE_FAST None pc=252 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=254 frame=5(0x6932d10)
process last instruction done
tracing opcode EXTENDED_ARG None pc=256 frame=5(0x6932d10)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=270 frame=5(0x6932d10)
process last instruction done
tracing opcode EXTENDED_ARG None pc=272 frame=5(0x6932d10)
process last instruction done
restart: running injected code (f_lasti=272)
commiting 0 130 [32mRETURN_VALUE[0m(None, None)  272
graph graph():
    %tensor_60 : [#users=4] = placeholder[target=tensor_60]
    %tensor_61 : [#users=1] = placeholder[target=tensor_61]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_60,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_60,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_60,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_61), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_60, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
callee is full graph, merge to caller
to merge graph():
    %tensor_60 : [#users=4] = placeholder[target=tensor_60]
    %tensor_61 : [#users=1] = placeholder[target=tensor_61]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_60,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_60,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_60,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_61), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_60, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
tracing opcode RETURN_VALUE None pc=304 frame=5(0x6932d10)
process last instruction done
restart: running injected code (f_lasti=304)
before pop_tracker [0, 2, 5] frame_id 5
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=552 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=554 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=556 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=558 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=560 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=562 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=564 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode FOR_ITER None pc=386 frame=2(0x688b4d0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=388 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=390 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=392 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=394 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=396 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=410 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=412 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=414 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=416 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=418 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=420 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=422 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=424 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=426 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=430 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=432 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=434 frame=2(0x688b4d0)
process last instruction done
tracing opcode COMPARE_OP None pc=436 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=438 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=448 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=450 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=452 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=520 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=522 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=524 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=526 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=528 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=530 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=532 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=544 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=546 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=548 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=550 frame=2(0x688b4d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 5 0x150b33c83640 forward
0: [33mLOAD_FAST[0m(1, hidden_states) 
1: [33mSTORE_FAST[0m(5, residual) 
2: [33mLOAD_FAST[0m(0, self) 
3: [33mLOAD_ATTR[0m(0, self_attn) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_FAST[0m(2, attention_mask) 
6: [33mLOAD_FAST[0m(3, layer_head_mask) 
7: [33mLOAD_FAST[0m(4, output_attentions) 
8: [33mLOAD_CONST[0m(1, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
9: [33mCALL_FUNCTION_KW[0m(4, 4) 
10: [33mUNPACK_SEQUENCE[0m(3, 3) 
11: [33mSTORE_FAST[0m(1, hidden_states) 
12: [33mSTORE_FAST[0m(6, attn_weights) 
13: [33mSTORE_FAST[0m(7, _) 
14: [33mLOAD_GLOBAL[0m(1, nn) 
15: [33mLOAD_ATTR[0m(2, functional) 
16: [33mLOAD_ATTR[0m(3, dropout) 
17: [33mLOAD_FAST[0m(1, hidden_states) 
18: [33mLOAD_FAST[0m(0, self) 
19: [33mLOAD_ATTR[0m(3, dropout) 
20: [33mLOAD_FAST[0m(0, self) 
21: [33mLOAD_ATTR[0m(4, training) 
22: [33mLOAD_CONST[0m(2, ('p', 'training')) 
23: [33mCALL_FUNCTION_KW[0m(3, 3) 
24: [33mSTORE_FAST[0m(1, hidden_states) 
25: [33mLOAD_FAST[0m(5, residual) 
26: [33mLOAD_FAST[0m(1, hidden_states) 
27: [33mBINARY_ADD[0m(None, None) 
28: [33mSTORE_FAST[0m(1, hidden_states) 
29: [33mLOAD_FAST[0m(0, self) 
30: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
31: [33mLOAD_FAST[0m(1, hidden_states) 
32: [33mCALL_METHOD[0m(1, 1) 
33: [33mSTORE_FAST[0m(1, hidden_states) 
34: [33mLOAD_FAST[0m(1, hidden_states) 
35: [33mSTORE_FAST[0m(5, residual) 
36: [33mLOAD_FAST[0m(0, self) 
37: [33mLOAD_METHOD[0m(6, activation_fn) 
38: [33mLOAD_FAST[0m(0, self) 
39: [33mLOAD_METHOD[0m(7, fc1) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mCALL_METHOD[0m(1, 1) 
42: [33mCALL_METHOD[0m(1, 1) 
43: [33mSTORE_FAST[0m(1, hidden_states) 
44: [33mLOAD_GLOBAL[0m(1, nn) 
45: [33mLOAD_ATTR[0m(2, functional) 
46: [33mLOAD_ATTR[0m(3, dropout) 
47: [33mLOAD_FAST[0m(1, hidden_states) 
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_ATTR[0m(8, activation_dropout) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_ATTR[0m(4, training) 
52: [33mLOAD_CONST[0m(2, ('p', 'training')) 
53: [33mCALL_FUNCTION_KW[0m(3, 3) 
54: [33mSTORE_FAST[0m(1, hidden_states) 
55: [33mLOAD_FAST[0m(0, self) 
56: [33mLOAD_METHOD[0m(9, fc2) 
57: [33mLOAD_FAST[0m(1, hidden_states) 
58: [33mCALL_METHOD[0m(1, 1) 
59: [33mSTORE_FAST[0m(1, hidden_states) 
60: [33mLOAD_GLOBAL[0m(1, nn) 
61: [33mLOAD_ATTR[0m(2, functional) 
62: [33mLOAD_ATTR[0m(3, dropout) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_ATTR[0m(3, dropout) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_ATTR[0m(4, training) 
68: [33mLOAD_CONST[0m(2, ('p', 'training')) 
69: [33mCALL_FUNCTION_KW[0m(3, 3) 
70: [33mSTORE_FAST[0m(1, hidden_states) 
71: [33mLOAD_FAST[0m(5, residual) 
72: [33mLOAD_FAST[0m(1, hidden_states) 
73: [33mBINARY_ADD[0m(None, None) 
74: [33mSTORE_FAST[0m(1, hidden_states) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(10, final_layer_norm) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mSTORE_FAST[0m(1, hidden_states) 
80: [33mLOAD_FAST[0m(1, hidden_states) 
81: [33mLOAD_ATTR[0m(11, dtype) 
82: [33mLOAD_GLOBAL[0m(12, torch) 
83: [33mLOAD_ATTR[0m(13, float16) 
84: [33mCOMPARE_OP[0m(2, ==) 
85: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
86: [33mLOAD_GLOBAL[0m(12, torch) 
87: [33mLOAD_METHOD[0m(14, isinf) 
88: [33mLOAD_FAST[0m(1, hidden_states) 
89: [33mCALL_METHOD[0m(1, 1) 
90: [33mLOAD_METHOD[0m(15, any) 
91: [33mCALL_METHOD[0m(0, 0) 
92: [33mPOP_JUMP_IF_TRUE[0m(200, 200)  -> inst 100
93: [33mLOAD_GLOBAL[0m(12, torch) 
94: [33mLOAD_METHOD[0m(16, isnan) 
95: [33mLOAD_FAST[0m(1, hidden_states) 
96: [33mCALL_METHOD[0m(1, 1) 
97: [33mLOAD_METHOD[0m(15, any) 
98: [33mCALL_METHOD[0m(0, 0) 
99: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
100: [33mLOAD_GLOBAL[0m(12, torch) 
101: [33mLOAD_METHOD[0m(17, finfo) 
102: [33mLOAD_FAST[0m(1, hidden_states) 
103: [33mLOAD_ATTR[0m(11, dtype) 
104: [33mCALL_METHOD[0m(1, 1) 
105: [33mLOAD_ATTR[0m(18, max) 
106: [33mLOAD_CONST[0m(3, 1000) 
107: [33mBINARY_SUBTRACT[0m(None, None) 
108: [33mSTORE_FAST[0m(8, clamp_value) 
109: [33mLOAD_GLOBAL[0m(12, torch) 
110: [33mLOAD_ATTR[0m(19, clamp) 
111: [33mLOAD_FAST[0m(1, hidden_states) 
112: [33mLOAD_FAST[0m(8, clamp_value) 
113: [33mUNARY_NEGATIVE[0m(None, None) 
114: [33mLOAD_FAST[0m(8, clamp_value) 
115: [33mLOAD_CONST[0m(4, ('min', 'max')) 
116: [33mCALL_FUNCTION_KW[0m(3, 3) 
117: [33mSTORE_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(1, hidden_states) 
119: [33mBUILD_TUPLE[0m(1, 1) 
120: [33mSTORE_FAST[0m(9, outputs) 
121: [33mLOAD_FAST[0m(4, output_attentions) 
122: [33mEXTENDED_ARG[0m(1, 1) 
123: [33mPOP_JUMP_IF_FALSE[0m(258, 258)  -> inst 129
124: [33mLOAD_FAST[0m(9, outputs) 
125: [33mLOAD_FAST[0m(6, attn_weights) 
126: [33mBUILD_TUPLE[0m(1, 1) 
127: [33mINPLACE_ADD[0m(None, None) 
128: [33mSTORE_FAST[0m(9, outputs) 
129: [33mLOAD_FAST[0m(9, outputs) 
130: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')), (<class 'int'>, 1000), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, '\n        Args:\n            hidden_states (`torch.FloatTensor`): input to the layer of shape `(seq_len, batch, embed_dim)`\n            attention_mask (`torch.FloatTensor`): attention mask of size\n                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.\n            layer_head_mask (`torch.FloatTensor`): mask for attention heads in a given layer of size\n                `(encoder_attention_heads,)`.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n        '), (<class 'tuple'>, ('min', 'max')), (<class 'int'>, 5), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(24, disable_trace) 
1: [32mLOAD_CONST[0m(5, 5) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(1, 1) 
5: [32mJUMP_ABSOLUTE[0m(276, 276)  -> inst 138
6: [33mLOAD_FAST[0m(1, hidden_states) 
7: [33mSTORE_FAST[0m(5, residual) 
8: [33mLOAD_FAST[0m(0, self) 
9: [33mLOAD_ATTR[0m(0, self_attn) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_FAST[0m(2, attention_mask) 
12: [33mLOAD_FAST[0m(3, layer_head_mask) 
13: [33mLOAD_FAST[0m(4, output_attentions) 
14: [33mLOAD_CONST[0m(0, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
15: [33mCALL_FUNCTION_KW[0m(4, 4) 
16: [33mUNPACK_SEQUENCE[0m(3, 3) 
17: [33mSTORE_FAST[0m(1, hidden_states) 
18: [33mSTORE_FAST[0m(6, attn_weights) 
19: [33mSTORE_FAST[0m(7, _) 
20: [33mLOAD_GLOBAL[0m(1, nn) 
21: [33mLOAD_ATTR[0m(2, functional) 
22: [33mLOAD_ATTR[0m(3, dropout) 
23: [33mLOAD_FAST[0m(1, hidden_states) 
24: [33mLOAD_FAST[0m(0, self) 
25: [33mLOAD_ATTR[0m(3, dropout) 
26: [33mLOAD_FAST[0m(0, self) 
27: [33mLOAD_ATTR[0m(4, training) 
28: [33mLOAD_CONST[0m(2, ('p', 'training')) 
29: [33mCALL_FUNCTION_KW[0m(3, 3) 
30: [33mSTORE_FAST[0m(1, hidden_states) 
31: [33mLOAD_FAST[0m(5, residual) 
32: [33mLOAD_FAST[0m(1, hidden_states) 
33: [33mBINARY_ADD[0m(None, None) 
34: [33mSTORE_FAST[0m(1, hidden_states) 
35: [33mLOAD_FAST[0m(0, self) 
36: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
37: [33mLOAD_FAST[0m(1, hidden_states) 
38: [33mCALL_METHOD[0m(1, 1) 
39: [33mSTORE_FAST[0m(1, hidden_states) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mSTORE_FAST[0m(5, residual) 
42: [33mLOAD_FAST[0m(0, self) 
43: [33mLOAD_METHOD[0m(6, activation_fn) 
44: [33mLOAD_FAST[0m(0, self) 
45: [33mLOAD_METHOD[0m(7, fc1) 
46: [33mLOAD_FAST[0m(1, hidden_states) 
47: [33mCALL_METHOD[0m(1, 1) 
48: [33mCALL_METHOD[0m(1, 1) 
49: [33mSTORE_FAST[0m(1, hidden_states) 
50: [33mLOAD_GLOBAL[0m(1, nn) 
51: [33mLOAD_ATTR[0m(2, functional) 
52: [33mLOAD_ATTR[0m(3, dropout) 
53: [33mLOAD_FAST[0m(1, hidden_states) 
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_ATTR[0m(8, activation_dropout) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_ATTR[0m(4, training) 
58: [33mLOAD_CONST[0m(2, ('p', 'training')) 
59: [33mCALL_FUNCTION_KW[0m(3, 3) 
60: [33mSTORE_FAST[0m(1, hidden_states) 
61: [33mLOAD_FAST[0m(0, self) 
62: [33mLOAD_METHOD[0m(9, fc2) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mCALL_METHOD[0m(1, 1) 
65: [33mSTORE_FAST[0m(1, hidden_states) 
66: [33mLOAD_GLOBAL[0m(1, nn) 
67: [33mLOAD_ATTR[0m(2, functional) 
68: [33mLOAD_ATTR[0m(3, dropout) 
69: [33mLOAD_FAST[0m(1, hidden_states) 
70: [33mLOAD_FAST[0m(0, self) 
71: [33mLOAD_ATTR[0m(3, dropout) 
72: [33mLOAD_FAST[0m(0, self) 
73: [33mLOAD_ATTR[0m(4, training) 
74: [33mLOAD_CONST[0m(2, ('p', 'training')) 
75: [33mCALL_FUNCTION_KW[0m(3, 3) 
76: [33mSTORE_FAST[0m(1, hidden_states) 
77: [33mLOAD_FAST[0m(5, residual) 
78: [33mLOAD_FAST[0m(1, hidden_states) 
79: [33mBINARY_ADD[0m(None, None) 
80: [33mSTORE_FAST[0m(1, hidden_states) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(10, final_layer_norm) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mSTORE_FAST[0m(1, hidden_states) 
86: [33mLOAD_FAST[0m(1, hidden_states) 
87: [33mLOAD_ATTR[0m(11, dtype) 
88: [33mLOAD_GLOBAL[0m(12, torch) 
89: [33mLOAD_ATTR[0m(13, float16) 
90: [33mCOMPARE_OP[0m(2, ==) 
91: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
92: [33mLOAD_GLOBAL[0m(12, torch) 
93: [33mLOAD_METHOD[0m(14, isinf) 
94: [33mLOAD_FAST[0m(1, hidden_states) 
95: [33mCALL_METHOD[0m(1, 1) 
96: [33mLOAD_METHOD[0m(15, any) 
97: [33mCALL_METHOD[0m(0, 0) 
98: [33mPOP_JUMP_IF_TRUE[0m(212, 212)  -> inst 106
99: [33mLOAD_GLOBAL[0m(12, torch) 
100: [33mLOAD_METHOD[0m(16, isnan) 
101: [33mLOAD_FAST[0m(1, hidden_states) 
102: [33mCALL_METHOD[0m(1, 1) 
103: [33mLOAD_METHOD[0m(15, any) 
104: [33mCALL_METHOD[0m(0, 0) 
105: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
106: [33mLOAD_GLOBAL[0m(12, torch) 
107: [33mLOAD_METHOD[0m(17, finfo) 
108: [33mLOAD_FAST[0m(1, hidden_states) 
109: [33mLOAD_ATTR[0m(11, dtype) 
110: [33mCALL_METHOD[0m(1, 1) 
111: [33mLOAD_ATTR[0m(18, max) 
112: [33mLOAD_CONST[0m(1, 1000) 
113: [33mBINARY_SUBTRACT[0m(None, None) 
114: [33mSTORE_FAST[0m(8, clamp_value) 
115: [33mLOAD_GLOBAL[0m(12, torch) 
116: [33mLOAD_ATTR[0m(19, clamp) 
117: [33mLOAD_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(8, clamp_value) 
119: [33mUNARY_NEGATIVE[0m(None, None) 
120: [33mLOAD_FAST[0m(8, clamp_value) 
121: [33mLOAD_CONST[0m(4, ('min', 'max')) 
122: [33mCALL_FUNCTION_KW[0m(3, 3) 
123: [33mSTORE_FAST[0m(1, hidden_states) 
124: [33mLOAD_FAST[0m(1, hidden_states) 
125: [33mBUILD_TUPLE[0m(1, 1) 
126: [33mSTORE_FAST[0m(9, outputs) 
127: [33mLOAD_FAST[0m(4, output_attentions) 
128: [32mEXTENDED_ARG[0m(1, 1) 
129: [33mPOP_JUMP_IF_FALSE[0m(270, 270)  -> inst 135
130: [33mLOAD_FAST[0m(9, outputs) 
131: [33mLOAD_FAST[0m(6, attn_weights) 
132: [33mBUILD_TUPLE[0m(1, 1) 
133: [33mINPLACE_ADD[0m(None, None) 
134: [33mSTORE_FAST[0m(9, outputs) 
135: [33mLOAD_FAST[0m(9, outputs) 
136: [32mEXTENDED_ARG[0m(1, 1) 
137: [32mJUMP_ABSOLUTE[0m(304, 304)  -> inst 152
138: [32mLOAD_GLOBAL[0m(21, guard_match) 
139: [32mLOAD_CONST[0m(5, 5) 
140: [32mLOAD_CONST[0m(6, 0) 
141: [32mLOAD_GLOBAL[0m(20, locals) 
142: [32mCALL_FUNCTION[0m(0, 0) 
143: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
144: [32mUNPACK_SEQUENCE[0m(2, 2) 
145: [32mSTORE_FAST[0m(11, __case_idx) 
146: [32mSTORE_FAST[0m(10, __graph_fn) 
147: [32mLOAD_GLOBAL[0m(22, enable_trace) 
148: [32mLOAD_CONST[0m(5, 5) 
149: [32mCALL_FUNCTION[0m(1, 1) 
150: [32mPOP_TOP[0m(None, None) 
151: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
152: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=5(0x6986e70)
push tracker due to record
push tracker 5 frame 0x6986e70 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=5(0x6986e70)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=5(0x6986e70)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5] frame_id 5
enable_trace
push tracker 5 frame 0x6986e70 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
tracing opcode POP_TOP None pc=300 frame=5(0x6986e70)
process last instruction done
restart: running injected code (f_lasti=300)
tracing opcode JUMP_ABSOLUTE None pc=302 frame=5(0x6986e70)
process last instruction done
restart: running injected code (f_lasti=302)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=14 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=16 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=18 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=22 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=24 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=26 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=28 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=30 frame=5(0x6986e70)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 6 0x6825f10 forward
0: [33mLOAD_FAST[0m(2, key_value_states) 
1: [33mLOAD_CONST[0m(1, None) 
2: [33mIS_OP[0m(1, 1) 
3: [33mSTORE_FAST[0m(7, is_cross_attention) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_METHOD[0m(0, size) 
6: [33mCALL_METHOD[0m(0, 0) 
7: [33mUNPACK_SEQUENCE[0m(3, 3) 
8: [33mSTORE_FAST[0m(8, bsz) 
9: [33mSTORE_FAST[0m(9, tgt_len) 
10: [33mSTORE_FAST[0m(10, _) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_METHOD[0m(1, q_proj) 
13: [33mLOAD_FAST[0m(1, hidden_states) 
14: [33mCALL_METHOD[0m(1, 1) 
15: [33mLOAD_FAST[0m(0, self) 
16: [33mLOAD_ATTR[0m(2, scaling) 
17: [33mBINARY_MULTIPLY[0m(None, None) 
18: [33mSTORE_FAST[0m(11, query_states) 
19: [33mLOAD_FAST[0m(7, is_cross_attention) 
20: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
21: [33mLOAD_FAST[0m(3, past_key_value) 
22: [33mLOAD_CONST[0m(1, None) 
23: [33mIS_OP[0m(1, 1) 
24: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
25: [33mLOAD_FAST[0m(3, past_key_value) 
26: [33mLOAD_CONST[0m(2, 0) 
27: [33mBINARY_SUBSCR[0m(None, None) 
28: [33mLOAD_ATTR[0m(3, shape) 
29: [33mLOAD_CONST[0m(3, 2) 
30: [33mBINARY_SUBSCR[0m(None, None) 
31: [33mLOAD_FAST[0m(2, key_value_states) 
32: [33mLOAD_ATTR[0m(3, shape) 
33: [33mLOAD_CONST[0m(4, 1) 
34: [33mBINARY_SUBSCR[0m(None, None) 
35: [33mCOMPARE_OP[0m(2, ==) 
36: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
37: [33mLOAD_FAST[0m(3, past_key_value) 
38: [33mLOAD_CONST[0m(2, 0) 
39: [33mBINARY_SUBSCR[0m(None, None) 
40: [33mSTORE_FAST[0m(12, key_states) 
41: [33mLOAD_FAST[0m(3, past_key_value) 
42: [33mLOAD_CONST[0m(4, 1) 
43: [33mBINARY_SUBSCR[0m(None, None) 
44: [33mSTORE_FAST[0m(13, value_states) 
45: [33mJUMP_FORWARD[0m(180, 272)  -> inst 136
46: [33mLOAD_FAST[0m(7, is_cross_attention) 
47: [33mPOP_JUMP_IF_FALSE[0m(138, 138)  -> inst 69
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_METHOD[0m(4, _shape) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_METHOD[0m(5, k_proj) 
52: [33mLOAD_FAST[0m(2, key_value_states) 
53: [33mCALL_METHOD[0m(1, 1) 
54: [33mLOAD_CONST[0m(5, -1) 
55: [33mLOAD_FAST[0m(8, bsz) 
56: [33mCALL_METHOD[0m(3, 3) 
57: [33mSTORE_FAST[0m(12, key_states) 
58: [33mLOAD_FAST[0m(0, self) 
59: [33mLOAD_METHOD[0m(4, _shape) 
60: [33mLOAD_FAST[0m(0, self) 
61: [33mLOAD_METHOD[0m(6, v_proj) 
62: [33mLOAD_FAST[0m(2, key_value_states) 
63: [33mCALL_METHOD[0m(1, 1) 
64: [33mLOAD_CONST[0m(5, -1) 
65: [33mLOAD_FAST[0m(8, bsz) 
66: [33mCALL_METHOD[0m(3, 3) 
67: [33mSTORE_FAST[0m(13, value_states) 
68: [33mJUMP_FORWARD[0m(134, 272)  -> inst 136
69: [33mLOAD_FAST[0m(3, past_key_value) 
70: [33mLOAD_CONST[0m(1, None) 
71: [33mIS_OP[0m(1, 1) 
72: [33mPOP_JUMP_IF_FALSE[0m(232, 232)  -> inst 116
73: [33mLOAD_FAST[0m(0, self) 
74: [33mLOAD_METHOD[0m(4, _shape) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(5, k_proj) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mLOAD_CONST[0m(5, -1) 
80: [33mLOAD_FAST[0m(8, bsz) 
81: [33mCALL_METHOD[0m(3, 3) 
82: [33mSTORE_FAST[0m(12, key_states) 
83: [33mLOAD_FAST[0m(0, self) 
84: [33mLOAD_METHOD[0m(4, _shape) 
85: [33mLOAD_FAST[0m(0, self) 
86: [33mLOAD_METHOD[0m(6, v_proj) 
87: [33mLOAD_FAST[0m(1, hidden_states) 
88: [33mCALL_METHOD[0m(1, 1) 
89: [33mLOAD_CONST[0m(5, -1) 
90: [33mLOAD_FAST[0m(8, bsz) 
91: [33mCALL_METHOD[0m(3, 3) 
92: [33mSTORE_FAST[0m(13, value_states) 
93: [33mLOAD_GLOBAL[0m(7, torch) 
94: [33mLOAD_ATTR[0m(8, cat) 
95: [33mLOAD_FAST[0m(3, past_key_value) 
96: [33mLOAD_CONST[0m(2, 0) 
97: [33mBINARY_SUBSCR[0m(None, None) 
98: [33mLOAD_FAST[0m(12, key_states) 
99: [33mBUILD_LIST[0m(2, 2) 
100: [33mLOAD_CONST[0m(3, 2) 
101: [33mLOAD_CONST[0m(6, ('dim',)) 
102: [33mCALL_FUNCTION_KW[0m(2, 2) 
103: [33mSTORE_FAST[0m(12, key_states) 
104: [33mLOAD_GLOBAL[0m(7, torch) 
105: [33mLOAD_ATTR[0m(8, cat) 
106: [33mLOAD_FAST[0m(3, past_key_value) 
107: [33mLOAD_CONST[0m(4, 1) 
108: [33mBINARY_SUBSCR[0m(None, None) 
109: [33mLOAD_FAST[0m(13, value_states) 
110: [33mBUILD_LIST[0m(2, 2) 
111: [33mLOAD_CONST[0m(3, 2) 
112: [33mLOAD_CONST[0m(6, ('dim',)) 
113: [33mCALL_FUNCTION_KW[0m(2, 2) 
114: [33mSTORE_FAST[0m(13, value_states) 
115: [33mJUMP_FORWARD[0m(40, 272)  -> inst 136
116: [33mLOAD_FAST[0m(0, self) 
117: [33mLOAD_METHOD[0m(4, _shape) 
118: [33mLOAD_FAST[0m(0, self) 
119: [33mLOAD_METHOD[0m(5, k_proj) 
120: [33mLOAD_FAST[0m(1, hidden_states) 
121: [33mCALL_METHOD[0m(1, 1) 
122: [33mLOAD_CONST[0m(5, -1) 
123: [33mLOAD_FAST[0m(8, bsz) 
124: [33mCALL_METHOD[0m(3, 3) 
125: [33mSTORE_FAST[0m(12, key_states) 
126: [33mLOAD_FAST[0m(0, self) 
127: [33mLOAD_METHOD[0m(4, _shape) 
128: [33mLOAD_FAST[0m(0, self) 
129: [33mLOAD_METHOD[0m(6, v_proj) 
130: [33mLOAD_FAST[0m(1, hidden_states) 
131: [33mCALL_METHOD[0m(1, 1) 
132: [33mLOAD_CONST[0m(5, -1) 
133: [33mLOAD_FAST[0m(8, bsz) 
134: [33mCALL_METHOD[0m(3, 3) 
135: [33mSTORE_FAST[0m(13, value_states) 
136: [33mLOAD_FAST[0m(0, self) 
137: [33mLOAD_ATTR[0m(9, is_decoder) 
138: [33mEXTENDED_ARG[0m(1, 1) 
139: [33mPOP_JUMP_IF_FALSE[0m(288, 288)  -> inst 144
140: [33mLOAD_FAST[0m(12, key_states) 
141: [33mLOAD_FAST[0m(13, value_states) 
142: [33mBUILD_TUPLE[0m(2, 2) 
143: [33mSTORE_FAST[0m(3, past_key_value) 
144: [33mLOAD_FAST[0m(8, bsz) 
145: [33mLOAD_FAST[0m(0, self) 
146: [33mLOAD_ATTR[0m(10, num_heads) 
147: [33mBINARY_MULTIPLY[0m(None, None) 
148: [33mLOAD_CONST[0m(5, -1) 
149: [33mLOAD_FAST[0m(0, self) 
150: [33mLOAD_ATTR[0m(11, head_dim) 
151: [33mBUILD_TUPLE[0m(3, 3) 
152: [33mSTORE_FAST[0m(14, proj_shape) 
153: [33mLOAD_FAST[0m(0, self) 
154: [33mLOAD_METHOD[0m(4, _shape) 
155: [33mLOAD_FAST[0m(11, query_states) 
156: [33mLOAD_FAST[0m(9, tgt_len) 
157: [33mLOAD_FAST[0m(8, bsz) 
158: [33mCALL_METHOD[0m(3, 3) 
159: [33mLOAD_ATTR[0m(12, view) 
160: [33mLOAD_FAST[0m(14, proj_shape) 
161: [33mCALL_FUNCTION_EX[0m(0, 0) 
162: [33mSTORE_FAST[0m(11, query_states) 
163: [33mLOAD_FAST[0m(12, key_states) 
164: [33mLOAD_ATTR[0m(13, reshape) 
165: [33mLOAD_FAST[0m(14, proj_shape) 
166: [33mCALL_FUNCTION_EX[0m(0, 0) 
167: [33mSTORE_FAST[0m(12, key_states) 
168: [33mLOAD_FAST[0m(13, value_states) 
169: [33mLOAD_ATTR[0m(13, reshape) 
170: [33mLOAD_FAST[0m(14, proj_shape) 
171: [33mCALL_FUNCTION_EX[0m(0, 0) 
172: [33mSTORE_FAST[0m(13, value_states) 
173: [33mLOAD_FAST[0m(12, key_states) 
174: [33mLOAD_METHOD[0m(0, size) 
175: [33mLOAD_CONST[0m(4, 1) 
176: [33mCALL_METHOD[0m(1, 1) 
177: [33mSTORE_FAST[0m(15, src_len) 
178: [33mLOAD_GLOBAL[0m(7, torch) 
179: [33mLOAD_METHOD[0m(14, bmm) 
180: [33mLOAD_FAST[0m(11, query_states) 
181: [33mLOAD_FAST[0m(12, key_states) 
182: [33mLOAD_METHOD[0m(15, transpose) 
183: [33mLOAD_CONST[0m(4, 1) 
184: [33mLOAD_CONST[0m(3, 2) 
185: [33mCALL_METHOD[0m(2, 2) 
186: [33mCALL_METHOD[0m(2, 2) 
187: [33mSTORE_FAST[0m(16, attn_weights) 
188: [33mLOAD_FAST[0m(16, attn_weights) 
189: [33mLOAD_METHOD[0m(0, size) 
190: [33mCALL_METHOD[0m(0, 0) 
191: [33mLOAD_FAST[0m(8, bsz) 
192: [33mLOAD_FAST[0m(0, self) 
193: [33mLOAD_ATTR[0m(10, num_heads) 
194: [33mBINARY_MULTIPLY[0m(None, None) 
195: [33mLOAD_FAST[0m(9, tgt_len) 
196: [33mLOAD_FAST[0m(15, src_len) 
197: [33mBUILD_TUPLE[0m(3, 3) 
198: [33mCOMPARE_OP[0m(3, !=) 
199: [33mEXTENDED_ARG[0m(1, 1) 
200: [33mPOP_JUMP_IF_FALSE[0m(438, 438)  -> inst 219
201: [33mLOAD_GLOBAL[0m(16, ValueError) 
202: [33mLOAD_CONST[0m(7, Attention weights should be of size ) 
203: [33mLOAD_FAST[0m(8, bsz) 
204: [33mLOAD_FAST[0m(0, self) 
205: [33mLOAD_ATTR[0m(10, num_heads) 
206: [33mBINARY_MULTIPLY[0m(None, None) 
207: [33mLOAD_FAST[0m(9, tgt_len) 
208: [33mLOAD_FAST[0m(15, src_len) 
209: [33mBUILD_TUPLE[0m(3, 3) 
210: [33mFORMAT_VALUE[0m(0, (None, False)) 
211: [33mLOAD_CONST[0m(8, , but is ) 
212: [33mLOAD_FAST[0m(16, attn_weights) 
213: [33mLOAD_METHOD[0m(0, size) 
214: [33mCALL_METHOD[0m(0, 0) 
215: [33mFORMAT_VALUE[0m(0, (None, False)) 
216: [33mBUILD_STRING[0m(4, 4) 
217: [33mCALL_FUNCTION[0m(1, 1) 
218: [33mRAISE_VARARGS[0m(1, 1) 
219: [33mLOAD_FAST[0m(4, attention_mask) 
220: [33mLOAD_CONST[0m(1, None) 
221: [33mIS_OP[0m(1, 1) 
222: [33mEXTENDED_ARG[0m(2, 2) 
223: [33mPOP_JUMP_IF_FALSE[0m(544, 544)  -> inst 272
224: [33mLOAD_FAST[0m(4, attention_mask) 
225: [33mLOAD_METHOD[0m(0, size) 
226: [33mCALL_METHOD[0m(0, 0) 
227: [33mLOAD_FAST[0m(8, bsz) 
228: [33mLOAD_CONST[0m(4, 1) 
229: [33mLOAD_FAST[0m(9, tgt_len) 
230: [33mLOAD_FAST[0m(15, src_len) 
231: [33mBUILD_TUPLE[0m(4, 4) 
232: [33mCOMPARE_OP[0m(3, !=) 
233: [33mEXTENDED_ARG[0m(1, 1) 
234: [33mPOP_JUMP_IF_FALSE[0m(502, 502)  -> inst 251
235: [33mLOAD_GLOBAL[0m(16, ValueError) 
236: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
237: [33mLOAD_FAST[0m(8, bsz) 
238: [33mLOAD_CONST[0m(4, 1) 
239: [33mLOAD_FAST[0m(9, tgt_len) 
240: [33mLOAD_FAST[0m(15, src_len) 
241: [33mBUILD_TUPLE[0m(4, 4) 
242: [33mFORMAT_VALUE[0m(0, (None, False)) 
243: [33mLOAD_CONST[0m(8, , but is ) 
244: [33mLOAD_FAST[0m(4, attention_mask) 
245: [33mLOAD_METHOD[0m(0, size) 
246: [33mCALL_METHOD[0m(0, 0) 
247: [33mFORMAT_VALUE[0m(0, (None, False)) 
248: [33mBUILD_STRING[0m(4, 4) 
249: [33mCALL_FUNCTION[0m(1, 1) 
250: [33mRAISE_VARARGS[0m(1, 1) 
251: [33mLOAD_FAST[0m(16, attn_weights) 
252: [33mLOAD_METHOD[0m(12, view) 
253: [33mLOAD_FAST[0m(8, bsz) 
254: [33mLOAD_FAST[0m(0, self) 
255: [33mLOAD_ATTR[0m(10, num_heads) 
256: [33mLOAD_FAST[0m(9, tgt_len) 
257: [33mLOAD_FAST[0m(15, src_len) 
258: [33mCALL_METHOD[0m(4, 4) 
259: [33mLOAD_FAST[0m(4, attention_mask) 
260: [33mBINARY_ADD[0m(None, None) 
261: [33mSTORE_FAST[0m(16, attn_weights) 
262: [33mLOAD_FAST[0m(16, attn_weights) 
263: [33mLOAD_METHOD[0m(12, view) 
264: [33mLOAD_FAST[0m(8, bsz) 
265: [33mLOAD_FAST[0m(0, self) 
266: [33mLOAD_ATTR[0m(10, num_heads) 
267: [33mBINARY_MULTIPLY[0m(None, None) 
268: [33mLOAD_FAST[0m(9, tgt_len) 
269: [33mLOAD_FAST[0m(15, src_len) 
270: [33mCALL_METHOD[0m(3, 3) 
271: [33mSTORE_FAST[0m(16, attn_weights) 
272: [33mLOAD_GLOBAL[0m(17, nn) 
273: [33mLOAD_ATTR[0m(18, functional) 
274: [33mLOAD_ATTR[0m(19, softmax) 
275: [33mLOAD_FAST[0m(16, attn_weights) 
276: [33mLOAD_CONST[0m(5, -1) 
277: [33mLOAD_CONST[0m(6, ('dim',)) 
278: [33mCALL_FUNCTION_KW[0m(2, 2) 
279: [33mSTORE_FAST[0m(16, attn_weights) 
280: [33mLOAD_FAST[0m(5, layer_head_mask) 
281: [33mLOAD_CONST[0m(1, None) 
282: [33mIS_OP[0m(1, 1) 
283: [33mEXTENDED_ARG[0m(2, 2) 
284: [33mPOP_JUMP_IF_FALSE[0m(670, 670)  -> inst 335
285: [33mLOAD_FAST[0m(5, layer_head_mask) 
286: [33mLOAD_METHOD[0m(0, size) 
287: [33mCALL_METHOD[0m(0, 0) 
288: [33mLOAD_FAST[0m(0, self) 
289: [33mLOAD_ATTR[0m(10, num_heads) 
290: [33mBUILD_TUPLE[0m(1, 1) 
291: [33mCOMPARE_OP[0m(3, !=) 
292: [33mEXTENDED_ARG[0m(2, 2) 
293: [33mPOP_JUMP_IF_FALSE[0m(616, 616)  -> inst 308
294: [33mLOAD_GLOBAL[0m(16, ValueError) 
295: [33mLOAD_CONST[0m(10, Head mask for a single layer should be of size ) 
296: [33mLOAD_FAST[0m(0, self) 
297: [33mLOAD_ATTR[0m(10, num_heads) 
298: [33mBUILD_TUPLE[0m(1, 1) 
299: [33mFORMAT_VALUE[0m(0, (None, False)) 
300: [33mLOAD_CONST[0m(8, , but is ) 
301: [33mLOAD_FAST[0m(5, layer_head_mask) 
302: [33mLOAD_METHOD[0m(0, size) 
303: [33mCALL_METHOD[0m(0, 0) 
304: [33mFORMAT_VALUE[0m(0, (None, False)) 
305: [33mBUILD_STRING[0m(4, 4) 
306: [33mCALL_FUNCTION[0m(1, 1) 
307: [33mRAISE_VARARGS[0m(1, 1) 
308: [33mLOAD_FAST[0m(5, layer_head_mask) 
309: [33mLOAD_METHOD[0m(12, view) 
310: [33mLOAD_CONST[0m(4, 1) 
311: [33mLOAD_CONST[0m(5, -1) 
312: [33mLOAD_CONST[0m(4, 1) 
313: [33mLOAD_CONST[0m(4, 1) 
314: [33mCALL_METHOD[0m(4, 4) 
315: [33mLOAD_FAST[0m(16, attn_weights) 
316: [33mLOAD_METHOD[0m(12, view) 
317: [33mLOAD_FAST[0m(8, bsz) 
318: [33mLOAD_FAST[0m(0, self) 
319: [33mLOAD_ATTR[0m(10, num_heads) 
320: [33mLOAD_FAST[0m(9, tgt_len) 
321: [33mLOAD_FAST[0m(15, src_len) 
322: [33mCALL_METHOD[0m(4, 4) 
323: [33mBINARY_MULTIPLY[0m(None, None) 
324: [33mSTORE_FAST[0m(16, attn_weights) 
325: [33mLOAD_FAST[0m(16, attn_weights) 
326: [33mLOAD_METHOD[0m(12, view) 
327: [33mLOAD_FAST[0m(8, bsz) 
328: [33mLOAD_FAST[0m(0, self) 
329: [33mLOAD_ATTR[0m(10, num_heads) 
330: [33mBINARY_MULTIPLY[0m(None, None) 
331: [33mLOAD_FAST[0m(9, tgt_len) 
332: [33mLOAD_FAST[0m(15, src_len) 
333: [33mCALL_METHOD[0m(3, 3) 
334: [33mSTORE_FAST[0m(16, attn_weights) 
335: [33mLOAD_FAST[0m(6, output_attentions) 
336: [33mEXTENDED_ARG[0m(2, 2) 
337: [33mPOP_JUMP_IF_FALSE[0m(716, 716)  -> inst 358
338: [33mLOAD_FAST[0m(16, attn_weights) 
339: [33mLOAD_METHOD[0m(12, view) 
340: [33mLOAD_FAST[0m(8, bsz) 
341: [33mLOAD_FAST[0m(0, self) 
342: [33mLOAD_ATTR[0m(10, num_heads) 
343: [33mLOAD_FAST[0m(9, tgt_len) 
344: [33mLOAD_FAST[0m(15, src_len) 
345: [33mCALL_METHOD[0m(4, 4) 
346: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
347: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
348: [33mLOAD_METHOD[0m(12, view) 
349: [33mLOAD_FAST[0m(8, bsz) 
350: [33mLOAD_FAST[0m(0, self) 
351: [33mLOAD_ATTR[0m(10, num_heads) 
352: [33mBINARY_MULTIPLY[0m(None, None) 
353: [33mLOAD_FAST[0m(9, tgt_len) 
354: [33mLOAD_FAST[0m(15, src_len) 
355: [33mCALL_METHOD[0m(3, 3) 
356: [33mSTORE_FAST[0m(16, attn_weights) 
357: [33mJUMP_FORWARD[0m(4, 720)  -> inst 360
358: [33mLOAD_CONST[0m(1, None) 
359: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
360: [33mLOAD_GLOBAL[0m(17, nn) 
361: [33mLOAD_ATTR[0m(18, functional) 
362: [33mLOAD_ATTR[0m(20, dropout) 
363: [33mLOAD_FAST[0m(16, attn_weights) 
364: [33mLOAD_FAST[0m(0, self) 
365: [33mLOAD_ATTR[0m(20, dropout) 
366: [33mLOAD_FAST[0m(0, self) 
367: [33mLOAD_ATTR[0m(21, training) 
368: [33mLOAD_CONST[0m(11, ('p', 'training')) 
369: [33mCALL_FUNCTION_KW[0m(3, 3) 
370: [33mSTORE_FAST[0m(18, attn_probs) 
371: [33mLOAD_GLOBAL[0m(7, torch) 
372: [33mLOAD_METHOD[0m(14, bmm) 
373: [33mLOAD_FAST[0m(18, attn_probs) 
374: [33mLOAD_FAST[0m(13, value_states) 
375: [33mCALL_METHOD[0m(2, 2) 
376: [33mSTORE_FAST[0m(19, attn_output) 
377: [33mLOAD_FAST[0m(19, attn_output) 
378: [33mLOAD_METHOD[0m(0, size) 
379: [33mCALL_METHOD[0m(0, 0) 
380: [33mLOAD_FAST[0m(8, bsz) 
381: [33mLOAD_FAST[0m(0, self) 
382: [33mLOAD_ATTR[0m(10, num_heads) 
383: [33mBINARY_MULTIPLY[0m(None, None) 
384: [33mLOAD_FAST[0m(9, tgt_len) 
385: [33mLOAD_FAST[0m(0, self) 
386: [33mLOAD_ATTR[0m(11, head_dim) 
387: [33mBUILD_TUPLE[0m(3, 3) 
388: [33mCOMPARE_OP[0m(3, !=) 
389: [33mEXTENDED_ARG[0m(3, 3) 
390: [33mPOP_JUMP_IF_FALSE[0m(820, 820)  -> inst 410
391: [33mLOAD_GLOBAL[0m(16, ValueError) 
392: [33mLOAD_CONST[0m(12, `attn_output` should be of size ) 
393: [33mLOAD_FAST[0m(8, bsz) 
394: [33mLOAD_FAST[0m(0, self) 
395: [33mLOAD_ATTR[0m(10, num_heads) 
396: [33mBINARY_MULTIPLY[0m(None, None) 
397: [33mLOAD_FAST[0m(9, tgt_len) 
398: [33mLOAD_FAST[0m(0, self) 
399: [33mLOAD_ATTR[0m(11, head_dim) 
400: [33mBUILD_TUPLE[0m(3, 3) 
401: [33mFORMAT_VALUE[0m(0, (None, False)) 
402: [33mLOAD_CONST[0m(8, , but is ) 
403: [33mLOAD_FAST[0m(19, attn_output) 
404: [33mLOAD_METHOD[0m(0, size) 
405: [33mCALL_METHOD[0m(0, 0) 
406: [33mFORMAT_VALUE[0m(0, (None, False)) 
407: [33mBUILD_STRING[0m(4, 4) 
408: [33mCALL_FUNCTION[0m(1, 1) 
409: [33mRAISE_VARARGS[0m(1, 1) 
410: [33mLOAD_FAST[0m(19, attn_output) 
411: [33mLOAD_METHOD[0m(12, view) 
412: [33mLOAD_FAST[0m(8, bsz) 
413: [33mLOAD_FAST[0m(0, self) 
414: [33mLOAD_ATTR[0m(10, num_heads) 
415: [33mLOAD_FAST[0m(9, tgt_len) 
416: [33mLOAD_FAST[0m(0, self) 
417: [33mLOAD_ATTR[0m(11, head_dim) 
418: [33mCALL_METHOD[0m(4, 4) 
419: [33mSTORE_FAST[0m(19, attn_output) 
420: [33mLOAD_FAST[0m(19, attn_output) 
421: [33mLOAD_METHOD[0m(15, transpose) 
422: [33mLOAD_CONST[0m(4, 1) 
423: [33mLOAD_CONST[0m(3, 2) 
424: [33mCALL_METHOD[0m(2, 2) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(13, reshape) 
428: [33mLOAD_FAST[0m(8, bsz) 
429: [33mLOAD_FAST[0m(9, tgt_len) 
430: [33mLOAD_FAST[0m(0, self) 
431: [33mLOAD_ATTR[0m(22, embed_dim) 
432: [33mCALL_METHOD[0m(3, 3) 
433: [33mSTORE_FAST[0m(19, attn_output) 
434: [33mLOAD_FAST[0m(0, self) 
435: [33mLOAD_METHOD[0m(23, out_proj) 
436: [33mLOAD_FAST[0m(19, attn_output) 
437: [33mCALL_METHOD[0m(1, 1) 
438: [33mSTORE_FAST[0m(19, attn_output) 
439: [33mLOAD_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
441: [33mLOAD_FAST[0m(3, past_key_value) 
442: [33mBUILD_TUPLE[0m(3, 3) 
443: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('dim',)), (<class 'int'>, 2), (<class 'int'>, -1), (<class 'str'>, '`attn_output` should be of size '), (<class 'str'>, 'Input shape: Batch x Time x Channel'), (<class 'int'>, 1), (<class 'str'>, 'Head mask for a single layer should be of size '), (<class 'int'>, 0), (<class 'str'>, ', but is '), (<class 'str'>, 'Attention mask should be of size '), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, 'Attention weights should be of size '), (<class 'NoneType'>, None), (<class 'int'>, 6)]
guarded code
0: [32mLOAD_GLOBAL[0m(28, disable_trace) 
1: [32mLOAD_CONST[0m(13, 6) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(3, 3) 
5: [32mJUMP_ABSOLUTE[0m(902, 902)  -> inst 451
6: [33mLOAD_FAST[0m(2, key_value_states) 
7: [33mLOAD_CONST[0m(12, None) 
8: [33mIS_OP[0m(1, 1) 
9: [33mSTORE_FAST[0m(7, is_cross_attention) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_METHOD[0m(0, size) 
12: [33mCALL_METHOD[0m(0, 0) 
13: [33mUNPACK_SEQUENCE[0m(3, 3) 
14: [33mSTORE_FAST[0m(8, bsz) 
15: [33mSTORE_FAST[0m(9, tgt_len) 
16: [33mSTORE_FAST[0m(10, _) 
17: [33mLOAD_FAST[0m(0, self) 
18: [33mLOAD_METHOD[0m(1, q_proj) 
19: [33mLOAD_FAST[0m(1, hidden_states) 
20: [33mCALL_METHOD[0m(1, 1) 
21: [33mLOAD_FAST[0m(0, self) 
22: [33mLOAD_ATTR[0m(2, scaling) 
23: [33mBINARY_MULTIPLY[0m(None, None) 
24: [33mSTORE_FAST[0m(11, query_states) 
25: [33mLOAD_FAST[0m(7, is_cross_attention) 
26: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
27: [33mLOAD_FAST[0m(3, past_key_value) 
28: [33mLOAD_CONST[0m(12, None) 
29: [33mIS_OP[0m(1, 1) 
30: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
31: [33mLOAD_FAST[0m(3, past_key_value) 
32: [33mLOAD_CONST[0m(7, 0) 
33: [33mBINARY_SUBSCR[0m(None, None) 
34: [33mLOAD_ATTR[0m(3, shape) 
35: [33mLOAD_CONST[0m(1, 2) 
36: [33mBINARY_SUBSCR[0m(None, None) 
37: [33mLOAD_FAST[0m(2, key_value_states) 
38: [33mLOAD_ATTR[0m(3, shape) 
39: [33mLOAD_CONST[0m(5, 1) 
40: [33mBINARY_SUBSCR[0m(None, None) 
41: [33mCOMPARE_OP[0m(2, ==) 
42: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
43: [33mLOAD_FAST[0m(3, past_key_value) 
44: [33mLOAD_CONST[0m(7, 0) 
45: [33mBINARY_SUBSCR[0m(None, None) 
46: [33mSTORE_FAST[0m(12, key_states) 
47: [33mLOAD_FAST[0m(3, past_key_value) 
48: [33mLOAD_CONST[0m(5, 1) 
49: [33mBINARY_SUBSCR[0m(None, None) 
50: [33mSTORE_FAST[0m(13, value_states) 
51: [33mJUMP_FORWARD[0m(180, 284)  -> inst 142
52: [33mLOAD_FAST[0m(7, is_cross_attention) 
53: [33mPOP_JUMP_IF_FALSE[0m(150, 150)  -> inst 75
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_METHOD[0m(4, _shape) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_METHOD[0m(5, k_proj) 
58: [33mLOAD_FAST[0m(2, key_value_states) 
59: [33mCALL_METHOD[0m(1, 1) 
60: [33mLOAD_CONST[0m(2, -1) 
61: [33mLOAD_FAST[0m(8, bsz) 
62: [33mCALL_METHOD[0m(3, 3) 
63: [33mSTORE_FAST[0m(12, key_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_METHOD[0m(4, _shape) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_METHOD[0m(6, v_proj) 
68: [33mLOAD_FAST[0m(2, key_value_states) 
69: [33mCALL_METHOD[0m(1, 1) 
70: [33mLOAD_CONST[0m(2, -1) 
71: [33mLOAD_FAST[0m(8, bsz) 
72: [33mCALL_METHOD[0m(3, 3) 
73: [33mSTORE_FAST[0m(13, value_states) 
74: [33mJUMP_FORWARD[0m(134, 284)  -> inst 142
75: [33mLOAD_FAST[0m(3, past_key_value) 
76: [33mLOAD_CONST[0m(12, None) 
77: [33mIS_OP[0m(1, 1) 
78: [33mPOP_JUMP_IF_FALSE[0m(244, 244)  -> inst 122
79: [33mLOAD_FAST[0m(0, self) 
80: [33mLOAD_METHOD[0m(4, _shape) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(5, k_proj) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mLOAD_CONST[0m(2, -1) 
86: [33mLOAD_FAST[0m(8, bsz) 
87: [33mCALL_METHOD[0m(3, 3) 
88: [33mSTORE_FAST[0m(12, key_states) 
89: [33mLOAD_FAST[0m(0, self) 
90: [33mLOAD_METHOD[0m(4, _shape) 
91: [33mLOAD_FAST[0m(0, self) 
92: [33mLOAD_METHOD[0m(6, v_proj) 
93: [33mLOAD_FAST[0m(1, hidden_states) 
94: [33mCALL_METHOD[0m(1, 1) 
95: [33mLOAD_CONST[0m(2, -1) 
96: [33mLOAD_FAST[0m(8, bsz) 
97: [33mCALL_METHOD[0m(3, 3) 
98: [33mSTORE_FAST[0m(13, value_states) 
99: [33mLOAD_GLOBAL[0m(7, torch) 
100: [33mLOAD_ATTR[0m(8, cat) 
101: [33mLOAD_FAST[0m(3, past_key_value) 
102: [33mLOAD_CONST[0m(7, 0) 
103: [33mBINARY_SUBSCR[0m(None, None) 
104: [33mLOAD_FAST[0m(12, key_states) 
105: [33mBUILD_LIST[0m(2, 2) 
106: [33mLOAD_CONST[0m(1, 2) 
107: [33mLOAD_CONST[0m(0, ('dim',)) 
108: [33mCALL_FUNCTION_KW[0m(2, 2) 
109: [33mSTORE_FAST[0m(12, key_states) 
110: [33mLOAD_GLOBAL[0m(7, torch) 
111: [33mLOAD_ATTR[0m(8, cat) 
112: [33mLOAD_FAST[0m(3, past_key_value) 
113: [33mLOAD_CONST[0m(5, 1) 
114: [33mBINARY_SUBSCR[0m(None, None) 
115: [33mLOAD_FAST[0m(13, value_states) 
116: [33mBUILD_LIST[0m(2, 2) 
117: [33mLOAD_CONST[0m(1, 2) 
118: [33mLOAD_CONST[0m(0, ('dim',)) 
119: [33mCALL_FUNCTION_KW[0m(2, 2) 
120: [33mSTORE_FAST[0m(13, value_states) 
121: [33mJUMP_FORWARD[0m(40, 284)  -> inst 142
122: [33mLOAD_FAST[0m(0, self) 
123: [33mLOAD_METHOD[0m(4, _shape) 
124: [33mLOAD_FAST[0m(0, self) 
125: [33mLOAD_METHOD[0m(5, k_proj) 
126: [33mLOAD_FAST[0m(1, hidden_states) 
127: [33mCALL_METHOD[0m(1, 1) 
128: [33mLOAD_CONST[0m(2, -1) 
129: [33mLOAD_FAST[0m(8, bsz) 
130: [33mCALL_METHOD[0m(3, 3) 
131: [33mSTORE_FAST[0m(12, key_states) 
132: [33mLOAD_FAST[0m(0, self) 
133: [33mLOAD_METHOD[0m(4, _shape) 
134: [33mLOAD_FAST[0m(0, self) 
135: [33mLOAD_METHOD[0m(6, v_proj) 
136: [33mLOAD_FAST[0m(1, hidden_states) 
137: [33mCALL_METHOD[0m(1, 1) 
138: [33mLOAD_CONST[0m(2, -1) 
139: [33mLOAD_FAST[0m(8, bsz) 
140: [33mCALL_METHOD[0m(3, 3) 
141: [33mSTORE_FAST[0m(13, value_states) 
142: [33mLOAD_FAST[0m(0, self) 
143: [33mLOAD_ATTR[0m(9, is_decoder) 
144: [32mEXTENDED_ARG[0m(1, 1) 
145: [33mPOP_JUMP_IF_FALSE[0m(300, 300)  -> inst 150
146: [33mLOAD_FAST[0m(12, key_states) 
147: [33mLOAD_FAST[0m(13, value_states) 
148: [33mBUILD_TUPLE[0m(2, 2) 
149: [33mSTORE_FAST[0m(3, past_key_value) 
150: [33mLOAD_FAST[0m(8, bsz) 
151: [33mLOAD_FAST[0m(0, self) 
152: [33mLOAD_ATTR[0m(10, num_heads) 
153: [33mBINARY_MULTIPLY[0m(None, None) 
154: [33mLOAD_CONST[0m(2, -1) 
155: [33mLOAD_FAST[0m(0, self) 
156: [33mLOAD_ATTR[0m(11, head_dim) 
157: [33mBUILD_TUPLE[0m(3, 3) 
158: [33mSTORE_FAST[0m(14, proj_shape) 
159: [33mLOAD_FAST[0m(0, self) 
160: [33mLOAD_METHOD[0m(4, _shape) 
161: [33mLOAD_FAST[0m(11, query_states) 
162: [33mLOAD_FAST[0m(9, tgt_len) 
163: [33mLOAD_FAST[0m(8, bsz) 
164: [33mCALL_METHOD[0m(3, 3) 
165: [33mLOAD_ATTR[0m(12, view) 
166: [33mLOAD_FAST[0m(14, proj_shape) 
167: [33mCALL_FUNCTION_EX[0m(0, 0) 
168: [33mSTORE_FAST[0m(11, query_states) 
169: [33mLOAD_FAST[0m(12, key_states) 
170: [33mLOAD_ATTR[0m(13, reshape) 
171: [33mLOAD_FAST[0m(14, proj_shape) 
172: [33mCALL_FUNCTION_EX[0m(0, 0) 
173: [33mSTORE_FAST[0m(12, key_states) 
174: [33mLOAD_FAST[0m(13, value_states) 
175: [33mLOAD_ATTR[0m(13, reshape) 
176: [33mLOAD_FAST[0m(14, proj_shape) 
177: [33mCALL_FUNCTION_EX[0m(0, 0) 
178: [33mSTORE_FAST[0m(13, value_states) 
179: [33mLOAD_FAST[0m(12, key_states) 
180: [33mLOAD_METHOD[0m(0, size) 
181: [33mLOAD_CONST[0m(5, 1) 
182: [33mCALL_METHOD[0m(1, 1) 
183: [33mSTORE_FAST[0m(15, src_len) 
184: [33mLOAD_GLOBAL[0m(7, torch) 
185: [33mLOAD_METHOD[0m(14, bmm) 
186: [33mLOAD_FAST[0m(11, query_states) 
187: [33mLOAD_FAST[0m(12, key_states) 
188: [33mLOAD_METHOD[0m(15, transpose) 
189: [33mLOAD_CONST[0m(5, 1) 
190: [33mLOAD_CONST[0m(1, 2) 
191: [33mCALL_METHOD[0m(2, 2) 
192: [33mCALL_METHOD[0m(2, 2) 
193: [33mSTORE_FAST[0m(16, attn_weights) 
194: [33mLOAD_FAST[0m(16, attn_weights) 
195: [33mLOAD_METHOD[0m(0, size) 
196: [33mCALL_METHOD[0m(0, 0) 
197: [33mLOAD_FAST[0m(8, bsz) 
198: [33mLOAD_FAST[0m(0, self) 
199: [33mLOAD_ATTR[0m(10, num_heads) 
200: [33mBINARY_MULTIPLY[0m(None, None) 
201: [33mLOAD_FAST[0m(9, tgt_len) 
202: [33mLOAD_FAST[0m(15, src_len) 
203: [33mBUILD_TUPLE[0m(3, 3) 
204: [33mCOMPARE_OP[0m(3, !=) 
205: [32mEXTENDED_ARG[0m(1, 1) 
206: [33mPOP_JUMP_IF_FALSE[0m(450, 450)  -> inst 225
207: [33mLOAD_GLOBAL[0m(16, ValueError) 
208: [33mLOAD_CONST[0m(11, Attention weights should be of size ) 
209: [33mLOAD_FAST[0m(8, bsz) 
210: [33mLOAD_FAST[0m(0, self) 
211: [33mLOAD_ATTR[0m(10, num_heads) 
212: [33mBINARY_MULTIPLY[0m(None, None) 
213: [33mLOAD_FAST[0m(9, tgt_len) 
214: [33mLOAD_FAST[0m(15, src_len) 
215: [33mBUILD_TUPLE[0m(3, 3) 
216: [33mFORMAT_VALUE[0m(0, (None, False)) 
217: [33mLOAD_CONST[0m(8, , but is ) 
218: [33mLOAD_FAST[0m(16, attn_weights) 
219: [33mLOAD_METHOD[0m(0, size) 
220: [33mCALL_METHOD[0m(0, 0) 
221: [33mFORMAT_VALUE[0m(0, (None, False)) 
222: [33mBUILD_STRING[0m(4, 4) 
223: [33mCALL_FUNCTION[0m(1, 1) 
224: [33mRAISE_VARARGS[0m(1, 1) 
225: [33mLOAD_FAST[0m(4, attention_mask) 
226: [33mLOAD_CONST[0m(12, None) 
227: [33mIS_OP[0m(1, 1) 
228: [32mEXTENDED_ARG[0m(2, 2) 
229: [33mPOP_JUMP_IF_FALSE[0m(556, 556)  -> inst 278
230: [33mLOAD_FAST[0m(4, attention_mask) 
231: [33mLOAD_METHOD[0m(0, size) 
232: [33mCALL_METHOD[0m(0, 0) 
233: [33mLOAD_FAST[0m(8, bsz) 
234: [33mLOAD_CONST[0m(5, 1) 
235: [33mLOAD_FAST[0m(9, tgt_len) 
236: [33mLOAD_FAST[0m(15, src_len) 
237: [33mBUILD_TUPLE[0m(4, 4) 
238: [33mCOMPARE_OP[0m(3, !=) 
239: [32mEXTENDED_ARG[0m(2, 2) 
240: [33mPOP_JUMP_IF_FALSE[0m(514, 514)  -> inst 257
241: [33mLOAD_GLOBAL[0m(16, ValueError) 
242: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
243: [33mLOAD_FAST[0m(8, bsz) 
244: [33mLOAD_CONST[0m(5, 1) 
245: [33mLOAD_FAST[0m(9, tgt_len) 
246: [33mLOAD_FAST[0m(15, src_len) 
247: [33mBUILD_TUPLE[0m(4, 4) 
248: [33mFORMAT_VALUE[0m(0, (None, False)) 
249: [33mLOAD_CONST[0m(8, , but is ) 
250: [33mLOAD_FAST[0m(4, attention_mask) 
251: [33mLOAD_METHOD[0m(0, size) 
252: [33mCALL_METHOD[0m(0, 0) 
253: [33mFORMAT_VALUE[0m(0, (None, False)) 
254: [33mBUILD_STRING[0m(4, 4) 
255: [33mCALL_FUNCTION[0m(1, 1) 
256: [33mRAISE_VARARGS[0m(1, 1) 
257: [33mLOAD_FAST[0m(16, attn_weights) 
258: [33mLOAD_METHOD[0m(12, view) 
259: [33mLOAD_FAST[0m(8, bsz) 
260: [33mLOAD_FAST[0m(0, self) 
261: [33mLOAD_ATTR[0m(10, num_heads) 
262: [33mLOAD_FAST[0m(9, tgt_len) 
263: [33mLOAD_FAST[0m(15, src_len) 
264: [33mCALL_METHOD[0m(4, 4) 
265: [33mLOAD_FAST[0m(4, attention_mask) 
266: [33mBINARY_ADD[0m(None, None) 
267: [33mSTORE_FAST[0m(16, attn_weights) 
268: [33mLOAD_FAST[0m(16, attn_weights) 
269: [33mLOAD_METHOD[0m(12, view) 
270: [33mLOAD_FAST[0m(8, bsz) 
271: [33mLOAD_FAST[0m(0, self) 
272: [33mLOAD_ATTR[0m(10, num_heads) 
273: [33mBINARY_MULTIPLY[0m(None, None) 
274: [33mLOAD_FAST[0m(9, tgt_len) 
275: [33mLOAD_FAST[0m(15, src_len) 
276: [33mCALL_METHOD[0m(3, 3) 
277: [33mSTORE_FAST[0m(16, attn_weights) 
278: [33mLOAD_GLOBAL[0m(17, nn) 
279: [33mLOAD_ATTR[0m(18, functional) 
280: [33mLOAD_ATTR[0m(19, softmax) 
281: [33mLOAD_FAST[0m(16, attn_weights) 
282: [33mLOAD_CONST[0m(2, -1) 
283: [33mLOAD_CONST[0m(0, ('dim',)) 
284: [33mCALL_FUNCTION_KW[0m(2, 2) 
285: [33mSTORE_FAST[0m(16, attn_weights) 
286: [33mLOAD_FAST[0m(5, layer_head_mask) 
287: [33mLOAD_CONST[0m(12, None) 
288: [33mIS_OP[0m(1, 1) 
289: [32mEXTENDED_ARG[0m(2, 2) 
290: [33mPOP_JUMP_IF_FALSE[0m(682, 682)  -> inst 341
291: [33mLOAD_FAST[0m(5, layer_head_mask) 
292: [33mLOAD_METHOD[0m(0, size) 
293: [33mCALL_METHOD[0m(0, 0) 
294: [33mLOAD_FAST[0m(0, self) 
295: [33mLOAD_ATTR[0m(10, num_heads) 
296: [33mBUILD_TUPLE[0m(1, 1) 
297: [33mCOMPARE_OP[0m(3, !=) 
298: [32mEXTENDED_ARG[0m(2, 2) 
299: [33mPOP_JUMP_IF_FALSE[0m(628, 628)  -> inst 314
300: [33mLOAD_GLOBAL[0m(16, ValueError) 
301: [33mLOAD_CONST[0m(6, Head mask for a single layer should be of size ) 
302: [33mLOAD_FAST[0m(0, self) 
303: [33mLOAD_ATTR[0m(10, num_heads) 
304: [33mBUILD_TUPLE[0m(1, 1) 
305: [33mFORMAT_VALUE[0m(0, (None, False)) 
306: [33mLOAD_CONST[0m(8, , but is ) 
307: [33mLOAD_FAST[0m(5, layer_head_mask) 
308: [33mLOAD_METHOD[0m(0, size) 
309: [33mCALL_METHOD[0m(0, 0) 
310: [33mFORMAT_VALUE[0m(0, (None, False)) 
311: [33mBUILD_STRING[0m(4, 4) 
312: [33mCALL_FUNCTION[0m(1, 1) 
313: [33mRAISE_VARARGS[0m(1, 1) 
314: [33mLOAD_FAST[0m(5, layer_head_mask) 
315: [33mLOAD_METHOD[0m(12, view) 
316: [33mLOAD_CONST[0m(5, 1) 
317: [33mLOAD_CONST[0m(2, -1) 
318: [33mLOAD_CONST[0m(5, 1) 
319: [33mLOAD_CONST[0m(5, 1) 
320: [33mCALL_METHOD[0m(4, 4) 
321: [33mLOAD_FAST[0m(16, attn_weights) 
322: [33mLOAD_METHOD[0m(12, view) 
323: [33mLOAD_FAST[0m(8, bsz) 
324: [33mLOAD_FAST[0m(0, self) 
325: [33mLOAD_ATTR[0m(10, num_heads) 
326: [33mLOAD_FAST[0m(9, tgt_len) 
327: [33mLOAD_FAST[0m(15, src_len) 
328: [33mCALL_METHOD[0m(4, 4) 
329: [33mBINARY_MULTIPLY[0m(None, None) 
330: [33mSTORE_FAST[0m(16, attn_weights) 
331: [33mLOAD_FAST[0m(16, attn_weights) 
332: [33mLOAD_METHOD[0m(12, view) 
333: [33mLOAD_FAST[0m(8, bsz) 
334: [33mLOAD_FAST[0m(0, self) 
335: [33mLOAD_ATTR[0m(10, num_heads) 
336: [33mBINARY_MULTIPLY[0m(None, None) 
337: [33mLOAD_FAST[0m(9, tgt_len) 
338: [33mLOAD_FAST[0m(15, src_len) 
339: [33mCALL_METHOD[0m(3, 3) 
340: [33mSTORE_FAST[0m(16, attn_weights) 
341: [33mLOAD_FAST[0m(6, output_attentions) 
342: [32mEXTENDED_ARG[0m(2, 2) 
343: [33mPOP_JUMP_IF_FALSE[0m(728, 728)  -> inst 364
344: [33mLOAD_FAST[0m(16, attn_weights) 
345: [33mLOAD_METHOD[0m(12, view) 
346: [33mLOAD_FAST[0m(8, bsz) 
347: [33mLOAD_FAST[0m(0, self) 
348: [33mLOAD_ATTR[0m(10, num_heads) 
349: [33mLOAD_FAST[0m(9, tgt_len) 
350: [33mLOAD_FAST[0m(15, src_len) 
351: [33mCALL_METHOD[0m(4, 4) 
352: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
353: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
354: [33mLOAD_METHOD[0m(12, view) 
355: [33mLOAD_FAST[0m(8, bsz) 
356: [33mLOAD_FAST[0m(0, self) 
357: [33mLOAD_ATTR[0m(10, num_heads) 
358: [33mBINARY_MULTIPLY[0m(None, None) 
359: [33mLOAD_FAST[0m(9, tgt_len) 
360: [33mLOAD_FAST[0m(15, src_len) 
361: [33mCALL_METHOD[0m(3, 3) 
362: [33mSTORE_FAST[0m(16, attn_weights) 
363: [33mJUMP_FORWARD[0m(4, 732)  -> inst 366
364: [33mLOAD_CONST[0m(12, None) 
365: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
366: [33mLOAD_GLOBAL[0m(17, nn) 
367: [33mLOAD_ATTR[0m(18, functional) 
368: [33mLOAD_ATTR[0m(20, dropout) 
369: [33mLOAD_FAST[0m(16, attn_weights) 
370: [33mLOAD_FAST[0m(0, self) 
371: [33mLOAD_ATTR[0m(20, dropout) 
372: [33mLOAD_FAST[0m(0, self) 
373: [33mLOAD_ATTR[0m(21, training) 
374: [33mLOAD_CONST[0m(10, ('p', 'training')) 
375: [33mCALL_FUNCTION_KW[0m(3, 3) 
376: [33mSTORE_FAST[0m(18, attn_probs) 
377: [33mLOAD_GLOBAL[0m(7, torch) 
378: [33mLOAD_METHOD[0m(14, bmm) 
379: [33mLOAD_FAST[0m(18, attn_probs) 
380: [33mLOAD_FAST[0m(13, value_states) 
381: [33mCALL_METHOD[0m(2, 2) 
382: [33mSTORE_FAST[0m(19, attn_output) 
383: [33mLOAD_FAST[0m(19, attn_output) 
384: [33mLOAD_METHOD[0m(0, size) 
385: [33mCALL_METHOD[0m(0, 0) 
386: [33mLOAD_FAST[0m(8, bsz) 
387: [33mLOAD_FAST[0m(0, self) 
388: [33mLOAD_ATTR[0m(10, num_heads) 
389: [33mBINARY_MULTIPLY[0m(None, None) 
390: [33mLOAD_FAST[0m(9, tgt_len) 
391: [33mLOAD_FAST[0m(0, self) 
392: [33mLOAD_ATTR[0m(11, head_dim) 
393: [33mBUILD_TUPLE[0m(3, 3) 
394: [33mCOMPARE_OP[0m(3, !=) 
395: [32mEXTENDED_ARG[0m(3, 3) 
396: [33mPOP_JUMP_IF_FALSE[0m(832, 832)  -> inst 416
397: [33mLOAD_GLOBAL[0m(16, ValueError) 
398: [33mLOAD_CONST[0m(3, `attn_output` should be of size ) 
399: [33mLOAD_FAST[0m(8, bsz) 
400: [33mLOAD_FAST[0m(0, self) 
401: [33mLOAD_ATTR[0m(10, num_heads) 
402: [33mBINARY_MULTIPLY[0m(None, None) 
403: [33mLOAD_FAST[0m(9, tgt_len) 
404: [33mLOAD_FAST[0m(0, self) 
405: [33mLOAD_ATTR[0m(11, head_dim) 
406: [33mBUILD_TUPLE[0m(3, 3) 
407: [33mFORMAT_VALUE[0m(0, (None, False)) 
408: [33mLOAD_CONST[0m(8, , but is ) 
409: [33mLOAD_FAST[0m(19, attn_output) 
410: [33mLOAD_METHOD[0m(0, size) 
411: [33mCALL_METHOD[0m(0, 0) 
412: [33mFORMAT_VALUE[0m(0, (None, False)) 
413: [33mBUILD_STRING[0m(4, 4) 
414: [33mCALL_FUNCTION[0m(1, 1) 
415: [33mRAISE_VARARGS[0m(1, 1) 
416: [33mLOAD_FAST[0m(19, attn_output) 
417: [33mLOAD_METHOD[0m(12, view) 
418: [33mLOAD_FAST[0m(8, bsz) 
419: [33mLOAD_FAST[0m(0, self) 
420: [33mLOAD_ATTR[0m(10, num_heads) 
421: [33mLOAD_FAST[0m(9, tgt_len) 
422: [33mLOAD_FAST[0m(0, self) 
423: [33mLOAD_ATTR[0m(11, head_dim) 
424: [33mCALL_METHOD[0m(4, 4) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(15, transpose) 
428: [33mLOAD_CONST[0m(5, 1) 
429: [33mLOAD_CONST[0m(1, 2) 
430: [33mCALL_METHOD[0m(2, 2) 
431: [33mSTORE_FAST[0m(19, attn_output) 
432: [33mLOAD_FAST[0m(19, attn_output) 
433: [33mLOAD_METHOD[0m(13, reshape) 
434: [33mLOAD_FAST[0m(8, bsz) 
435: [33mLOAD_FAST[0m(9, tgt_len) 
436: [33mLOAD_FAST[0m(0, self) 
437: [33mLOAD_ATTR[0m(22, embed_dim) 
438: [33mCALL_METHOD[0m(3, 3) 
439: [33mSTORE_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(0, self) 
441: [33mLOAD_METHOD[0m(23, out_proj) 
442: [33mLOAD_FAST[0m(19, attn_output) 
443: [33mCALL_METHOD[0m(1, 1) 
444: [33mSTORE_FAST[0m(19, attn_output) 
445: [33mLOAD_FAST[0m(19, attn_output) 
446: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
447: [33mLOAD_FAST[0m(3, past_key_value) 
448: [33mBUILD_TUPLE[0m(3, 3) 
449: [32mEXTENDED_ARG[0m(3, 3) 
450: [32mJUMP_ABSOLUTE[0m(930, 930)  -> inst 465
451: [32mLOAD_GLOBAL[0m(25, guard_match) 
452: [32mLOAD_CONST[0m(13, 6) 
453: [32mLOAD_CONST[0m(7, 0) 
454: [32mLOAD_GLOBAL[0m(24, locals) 
455: [32mCALL_FUNCTION[0m(0, 0) 
456: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
457: [32mUNPACK_SEQUENCE[0m(2, 2) 
458: [32mSTORE_FAST[0m(21, __case_idx) 
459: [32mSTORE_FAST[0m(20, __graph_fn) 
460: [32mLOAD_GLOBAL[0m(26, enable_trace) 
461: [32mLOAD_CONST[0m(13, 6) 
462: [32mCALL_FUNCTION[0m(1, 1) 
463: [32mPOP_TOP[0m(None, None) 
464: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
465: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=6(0x689fdd0)
push tracker due to record
push tracker 6 frame 0x689fdd0 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=6(0x689fdd0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=6(0x689fdd0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6] frame_id 6
enable_trace
push tracker 6 frame 0x689fdd0 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
tracing opcode POP_TOP None pc=926 frame=6(0x689fdd0)
process last instruction done
restart: running injected code (f_lasti=926)
tracing opcode JUMP_ABSOLUTE None pc=928 frame=6(0x689fdd0)
process last instruction done
restart: running injected code (f_lasti=928)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=6(0x689fdd0)
process last instruction done
tracing opcode IS_OP None pc=16 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=18 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=22 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=24 frame=6(0x689fdd0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=26 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=28 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=30 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=32 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=34 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=38 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=40 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=42 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=6(0x689fdd0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=46 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=48 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=50 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode POP_JUMP_IF_FALSE None pc=52 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=104 frame=6(0x689fdd0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=106 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=150 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=152 frame=6(0x689fdd0)
process last instruction done
tracing opcode IS_OP None pc=154 frame=6(0x689fdd0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=156 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=244 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=246 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=248 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=250 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=252 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=254 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=256 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=258 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=260 frame=6(0x689fdd0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x68c47a0)
push tracker due to record
push tracker 7 frame 0x68c47a0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x68c47a0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x68c47a0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x68c47a0 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x68c47a0)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x68c47a0)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x68c47a0)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x68c47a0)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x68c47a0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x68c47a0)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x68c47a0)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x68c47a0)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_79 : [#users=1] = placeholder[target=tensor_79]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_79, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_79 : [#users=1] = placeholder[target=tensor_79]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_79, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x68c47a0)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=262 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=264 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=266 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=268 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=270 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=272 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=274 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=276 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=278 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=280 frame=6(0x689fdd0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x68bdf40)
push tracker due to record
push tracker 7 frame 0x68bdf40 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x68bdf40)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x68bdf40)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x68bdf40 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x68bdf40)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x68bdf40)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x68bdf40)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x68bdf40)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x68bdf40)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x68bdf40)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x68bdf40)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x68bdf40)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_81 : [#users=1] = placeholder[target=tensor_81]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_81, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_81 : [#users=1] = placeholder[target=tensor_81]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_81, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x68bdf40)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=282 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=284 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=286 frame=6(0x689fdd0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=288 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=300 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=302 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=304 frame=6(0x689fdd0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=306 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=308 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=310 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=312 frame=6(0x689fdd0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=314 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=316 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=318 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=320 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=322 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=324 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=326 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=328 frame=6(0x689fdd0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x6903d50)
push tracker due to record
push tracker 7 frame 0x6903d50 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x6903d50)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x6903d50)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x6903d50 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x6903d50)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x6903d50)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x6903d50)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x6903d50)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x6903d50)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x6903d50)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x6903d50)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x6903d50)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_83 : [#users=1] = placeholder[target=tensor_83]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_83, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_83 : [#users=1] = placeholder[target=tensor_83]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_83, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x6903d50)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode LOAD_ATTR None pc=330 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=332 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=334 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=336 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=338 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=340 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=342 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=344 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=346 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=348 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=350 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=352 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=354 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=356 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=358 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=360 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=362 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=364 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=366 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=368 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=370 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=372 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=374 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=376 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=378 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=380 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=382 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=384 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=386 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=388 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=390 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=392 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=394 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=396 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=398 frame=6(0x689fdd0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=400 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=402 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=404 frame=6(0x689fdd0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=406 frame=6(0x689fdd0)
process last instruction done
tracing opcode COMPARE_OP None pc=408 frame=6(0x689fdd0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=410 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=450 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=452 frame=6(0x689fdd0)
process last instruction done
tracing opcode IS_OP None pc=454 frame=6(0x689fdd0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=456 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=460 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=462 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=464 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=466 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=468 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=470 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=472 frame=6(0x689fdd0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=474 frame=6(0x689fdd0)
process last instruction done
tracing opcode COMPARE_OP None pc=476 frame=6(0x689fdd0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=478 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=514 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=516 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=518 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=520 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=522 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=524 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=526 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=528 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=530 frame=6(0x689fdd0)
process last instruction done
tracing opcode BINARY_ADD None pc=532 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=534 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=536 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=538 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=540 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=542 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=544 frame=6(0x689fdd0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=546 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=548 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=550 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=552 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=554 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=556 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=558 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=560 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=562 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=564 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=566 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=568 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=570 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=572 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=574 frame=6(0x689fdd0)
process last instruction done
tracing opcode IS_OP None pc=576 frame=6(0x689fdd0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=578 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=682 frame=6(0x689fdd0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=684 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=728 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=730 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=732 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=734 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=736 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=738 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=740 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=742 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=744 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=746 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=748 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=750 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=752 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=754 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=756 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=758 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=760 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=762 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=764 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=766 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=768 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=770 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=772 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=774 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=776 frame=6(0x689fdd0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=778 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=780 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=782 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=784 frame=6(0x689fdd0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=786 frame=6(0x689fdd0)
process last instruction done
tracing opcode COMPARE_OP None pc=788 frame=6(0x689fdd0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=790 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=832 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=834 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=836 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=838 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=840 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=842 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=844 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=846 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=848 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=850 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=852 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=854 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=856 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_CONST None pc=858 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=860 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=862 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=864 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=866 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=868 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=870 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=872 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_ATTR None pc=874 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=876 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=878 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=880 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_METHOD None pc=882 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=884 frame=6(0x689fdd0)
process last instruction done
tracing opcode CALL_METHOD None pc=886 frame=6(0x689fdd0)
process last instruction done
tracing opcode STORE_FAST None pc=888 frame=6(0x689fdd0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=890 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=892 frame=6(0x689fdd0)
process last instruction done
tracing opcode LOAD_FAST None pc=894 frame=6(0x689fdd0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=896 frame=6(0x689fdd0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=898 frame=6(0x689fdd0)
process last instruction done
restart: running injected code (f_lasti=898)
commiting 0 443 [32mRETURN_VALUE[0m(None, None)  898
graph graph():
    %tensor_78 : [#users=3] = placeholder[target=tensor_78]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_78,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_78,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_78,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_85 : [#users=1] = placeholder[target=tensor_85]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_85), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
callee is full graph, merge to caller
to merge graph():
    %tensor_78 : [#users=3] = placeholder[target=tensor_78]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_78,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_78,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_78,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_85 : [#users=1] = placeholder[target=tensor_85]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_85), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
tracing opcode RETURN_VALUE None pc=930 frame=6(0x689fdd0)
process last instruction done
restart: running injected code (f_lasti=930)
before pop_tracker [0, 2, 5, 6] frame_id 6
tracing return in /home/drc/frontend/test/simple.py
tracing opcode UNPACK_SEQUENCE None pc=32 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=34 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=36 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=38 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=40 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=42 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=46 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=48 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=50 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=52 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=54 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_CONST None pc=56 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=58 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=60 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=62 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=64 frame=5(0x6986e70)
process last instruction done
tracing opcode BINARY_ADD None pc=66 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=68 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=70 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_METHOD None pc=72 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=74 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_METHOD None pc=76 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=78 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=80 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=82 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=84 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_METHOD None pc=86 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=88 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_METHOD None pc=90 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=92 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_METHOD None pc=94 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_METHOD None pc=96 frame=5(0x6986e70)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py 8 0x6825ce0 forward
0: [33mLOAD_FAST[0m(0, self) 
1: [33mLOAD_METHOD[0m(0, act) 
2: [33mLOAD_FAST[0m(1, input) 
3: [33mCALL_METHOD[0m(1, 1) 
4: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'NoneType'>, None), (<class 'int'>, 8), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(5, disable_trace) 
1: [32mLOAD_CONST[0m(1, 8) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(20, 20)  -> inst 10
5: [33mLOAD_FAST[0m(0, self) 
6: [33mLOAD_METHOD[0m(0, act) 
7: [33mLOAD_FAST[0m(1, input) 
8: [33mCALL_METHOD[0m(1, 1) 
9: [32mJUMP_ABSOLUTE[0m(48, 48)  -> inst 24
10: [32mLOAD_GLOBAL[0m(2, guard_match) 
11: [32mLOAD_CONST[0m(1, 8) 
12: [32mLOAD_CONST[0m(2, 0) 
13: [32mLOAD_GLOBAL[0m(1, locals) 
14: [32mCALL_FUNCTION[0m(0, 0) 
15: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
16: [32mUNPACK_SEQUENCE[0m(2, 2) 
17: [32mSTORE_FAST[0m(3, __case_idx) 
18: [32mSTORE_FAST[0m(2, __graph_fn) 
19: [32mLOAD_GLOBAL[0m(3, enable_trace) 
20: [32mLOAD_CONST[0m(1, 8) 
21: [32mCALL_FUNCTION[0m(1, 1) 
22: [32mPOP_TOP[0m(None, None) 
23: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
24: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_GLOBAL None pc=0 frame=8(0x150abc0fba40)
push tracker due to record
push tracker 8 frame 0x150abc0fba40 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=8(0x150abc0fba40)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=8(0x150abc0fba40)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 8] frame_id 8
enable_trace
push tracker 8 frame 0x150abc0fba40 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
tracing opcode POP_TOP None pc=44 frame=8(0x150abc0fba40)
process last instruction done
restart: running injected code (f_lasti=44)
tracing opcode JUMP_ABSOLUTE None pc=46 frame=8(0x150abc0fba40)
process last instruction done
restart: running injected code (f_lasti=46)
tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_FAST None pc=10 frame=8(0x150abc0fba40)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=8(0x150abc0fba40)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=8(0x150abc0fba40)
process last instruction done
tracing opcode CALL_METHOD None pc=16 frame=8(0x150abc0fba40)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=18 frame=8(0x150abc0fba40)
process last instruction done
restart: running injected code (f_lasti=18)
commiting 0 4 [32mRETURN_VALUE[0m(None, None)  18
graph graph():
    %tensor_88 : [#users=1] = placeholder[target=tensor_88]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_88,), kwargs = {})
    return (gelu,)
callee is full graph, merge to caller
to merge graph():
    %tensor_88 : [#users=1] = placeholder[target=tensor_88]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_88,), kwargs = {})
    return (gelu,)
tracing opcode RETURN_VALUE None pc=48 frame=8(0x150abc0fba40)
process last instruction done
restart: running injected code (f_lasti=48)
before pop_tracker [0, 2, 5, 8] frame_id 8
tracing return in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode STORE_FAST None pc=98 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=100 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=102 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=104 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=106 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=108 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=110 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=112 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=114 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_CONST None pc=116 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=118 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=120 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=122 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_METHOD None pc=124 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=126 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_METHOD None pc=128 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=130 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=132 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=134 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=136 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=138 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=140 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=142 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=144 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=146 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_CONST None pc=148 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=150 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=152 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=154 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=156 frame=5(0x6986e70)
process last instruction done
tracing opcode BINARY_ADD None pc=158 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=160 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=162 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_METHOD None pc=164 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_FAST None pc=166 frame=5(0x6986e70)
process last instruction done
tracing opcode CALL_METHOD None pc=168 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=170 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=172 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=174 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=176 frame=5(0x6986e70)
process last instruction done
tracing opcode LOAD_ATTR None pc=178 frame=5(0x6986e70)
process last instruction done
tracing opcode COMPARE_OP None pc=180 frame=5(0x6986e70)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=182 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=248 frame=5(0x6986e70)
process last instruction done
tracing opcode BUILD_TUPLE None pc=250 frame=5(0x6986e70)
process last instruction done
tracing opcode STORE_FAST None pc=252 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=254 frame=5(0x6986e70)
process last instruction done
tracing opcode EXTENDED_ARG None pc=256 frame=5(0x6986e70)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=270 frame=5(0x6986e70)
process last instruction done
tracing opcode EXTENDED_ARG None pc=272 frame=5(0x6986e70)
process last instruction done
restart: running injected code (f_lasti=272)
commiting 0 130 [32mRETURN_VALUE[0m(None, None)  272
graph graph():
    %tensor_76 : [#users=4] = placeholder[target=tensor_76]
    %tensor_77 : [#users=1] = placeholder[target=tensor_77]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_76,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_76,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_76,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_77), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_76, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
callee is full graph, merge to caller
to merge graph():
    %tensor_76 : [#users=4] = placeholder[target=tensor_76]
    %tensor_77 : [#users=1] = placeholder[target=tensor_77]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_76,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_76,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_76,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_77), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_76, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
tracing opcode RETURN_VALUE None pc=304 frame=5(0x6986e70)
process last instruction done
restart: running injected code (f_lasti=304)
before pop_tracker [0, 2, 5] frame_id 5
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=552 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=554 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=556 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=558 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=560 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=562 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=564 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode FOR_ITER None pc=386 frame=2(0x688b4d0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=388 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=390 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=392 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=394 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=396 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=410 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_METHOD None pc=412 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=414 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=416 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_METHOD None pc=418 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=420 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=422 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=424 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=426 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=430 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=432 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=434 frame=2(0x688b4d0)
process last instruction done
tracing opcode COMPARE_OP None pc=436 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=438 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=448 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_ATTR None pc=450 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=452 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=520 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=522 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=524 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=526 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=528 frame=2(0x688b4d0)
process last instruction done
tracing opcode IS_OP None pc=530 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=532 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=544 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=546 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=548 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=550 frame=2(0x688b4d0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 5 0x150b33c83640 forward
0: [33mLOAD_FAST[0m(1, hidden_states) 
1: [33mSTORE_FAST[0m(5, residual) 
2: [33mLOAD_FAST[0m(0, self) 
3: [33mLOAD_ATTR[0m(0, self_attn) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_FAST[0m(2, attention_mask) 
6: [33mLOAD_FAST[0m(3, layer_head_mask) 
7: [33mLOAD_FAST[0m(4, output_attentions) 
8: [33mLOAD_CONST[0m(1, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
9: [33mCALL_FUNCTION_KW[0m(4, 4) 
10: [33mUNPACK_SEQUENCE[0m(3, 3) 
11: [33mSTORE_FAST[0m(1, hidden_states) 
12: [33mSTORE_FAST[0m(6, attn_weights) 
13: [33mSTORE_FAST[0m(7, _) 
14: [33mLOAD_GLOBAL[0m(1, nn) 
15: [33mLOAD_ATTR[0m(2, functional) 
16: [33mLOAD_ATTR[0m(3, dropout) 
17: [33mLOAD_FAST[0m(1, hidden_states) 
18: [33mLOAD_FAST[0m(0, self) 
19: [33mLOAD_ATTR[0m(3, dropout) 
20: [33mLOAD_FAST[0m(0, self) 
21: [33mLOAD_ATTR[0m(4, training) 
22: [33mLOAD_CONST[0m(2, ('p', 'training')) 
23: [33mCALL_FUNCTION_KW[0m(3, 3) 
24: [33mSTORE_FAST[0m(1, hidden_states) 
25: [33mLOAD_FAST[0m(5, residual) 
26: [33mLOAD_FAST[0m(1, hidden_states) 
27: [33mBINARY_ADD[0m(None, None) 
28: [33mSTORE_FAST[0m(1, hidden_states) 
29: [33mLOAD_FAST[0m(0, self) 
30: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
31: [33mLOAD_FAST[0m(1, hidden_states) 
32: [33mCALL_METHOD[0m(1, 1) 
33: [33mSTORE_FAST[0m(1, hidden_states) 
34: [33mLOAD_FAST[0m(1, hidden_states) 
35: [33mSTORE_FAST[0m(5, residual) 
36: [33mLOAD_FAST[0m(0, self) 
37: [33mLOAD_METHOD[0m(6, activation_fn) 
38: [33mLOAD_FAST[0m(0, self) 
39: [33mLOAD_METHOD[0m(7, fc1) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mCALL_METHOD[0m(1, 1) 
42: [33mCALL_METHOD[0m(1, 1) 
43: [33mSTORE_FAST[0m(1, hidden_states) 
44: [33mLOAD_GLOBAL[0m(1, nn) 
45: [33mLOAD_ATTR[0m(2, functional) 
46: [33mLOAD_ATTR[0m(3, dropout) 
47: [33mLOAD_FAST[0m(1, hidden_states) 
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_ATTR[0m(8, activation_dropout) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_ATTR[0m(4, training) 
52: [33mLOAD_CONST[0m(2, ('p', 'training')) 
53: [33mCALL_FUNCTION_KW[0m(3, 3) 
54: [33mSTORE_FAST[0m(1, hidden_states) 
55: [33mLOAD_FAST[0m(0, self) 
56: [33mLOAD_METHOD[0m(9, fc2) 
57: [33mLOAD_FAST[0m(1, hidden_states) 
58: [33mCALL_METHOD[0m(1, 1) 
59: [33mSTORE_FAST[0m(1, hidden_states) 
60: [33mLOAD_GLOBAL[0m(1, nn) 
61: [33mLOAD_ATTR[0m(2, functional) 
62: [33mLOAD_ATTR[0m(3, dropout) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_ATTR[0m(3, dropout) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_ATTR[0m(4, training) 
68: [33mLOAD_CONST[0m(2, ('p', 'training')) 
69: [33mCALL_FUNCTION_KW[0m(3, 3) 
70: [33mSTORE_FAST[0m(1, hidden_states) 
71: [33mLOAD_FAST[0m(5, residual) 
72: [33mLOAD_FAST[0m(1, hidden_states) 
73: [33mBINARY_ADD[0m(None, None) 
74: [33mSTORE_FAST[0m(1, hidden_states) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(10, final_layer_norm) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mSTORE_FAST[0m(1, hidden_states) 
80: [33mLOAD_FAST[0m(1, hidden_states) 
81: [33mLOAD_ATTR[0m(11, dtype) 
82: [33mLOAD_GLOBAL[0m(12, torch) 
83: [33mLOAD_ATTR[0m(13, float16) 
84: [33mCOMPARE_OP[0m(2, ==) 
85: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
86: [33mLOAD_GLOBAL[0m(12, torch) 
87: [33mLOAD_METHOD[0m(14, isinf) 
88: [33mLOAD_FAST[0m(1, hidden_states) 
89: [33mCALL_METHOD[0m(1, 1) 
90: [33mLOAD_METHOD[0m(15, any) 
91: [33mCALL_METHOD[0m(0, 0) 
92: [33mPOP_JUMP_IF_TRUE[0m(200, 200)  -> inst 100
93: [33mLOAD_GLOBAL[0m(12, torch) 
94: [33mLOAD_METHOD[0m(16, isnan) 
95: [33mLOAD_FAST[0m(1, hidden_states) 
96: [33mCALL_METHOD[0m(1, 1) 
97: [33mLOAD_METHOD[0m(15, any) 
98: [33mCALL_METHOD[0m(0, 0) 
99: [33mPOP_JUMP_IF_FALSE[0m(236, 236)  -> inst 118
100: [33mLOAD_GLOBAL[0m(12, torch) 
101: [33mLOAD_METHOD[0m(17, finfo) 
102: [33mLOAD_FAST[0m(1, hidden_states) 
103: [33mLOAD_ATTR[0m(11, dtype) 
104: [33mCALL_METHOD[0m(1, 1) 
105: [33mLOAD_ATTR[0m(18, max) 
106: [33mLOAD_CONST[0m(3, 1000) 
107: [33mBINARY_SUBTRACT[0m(None, None) 
108: [33mSTORE_FAST[0m(8, clamp_value) 
109: [33mLOAD_GLOBAL[0m(12, torch) 
110: [33mLOAD_ATTR[0m(19, clamp) 
111: [33mLOAD_FAST[0m(1, hidden_states) 
112: [33mLOAD_FAST[0m(8, clamp_value) 
113: [33mUNARY_NEGATIVE[0m(None, None) 
114: [33mLOAD_FAST[0m(8, clamp_value) 
115: [33mLOAD_CONST[0m(4, ('min', 'max')) 
116: [33mCALL_FUNCTION_KW[0m(3, 3) 
117: [33mSTORE_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(1, hidden_states) 
119: [33mBUILD_TUPLE[0m(1, 1) 
120: [33mSTORE_FAST[0m(9, outputs) 
121: [33mLOAD_FAST[0m(4, output_attentions) 
122: [33mEXTENDED_ARG[0m(1, 1) 
123: [33mPOP_JUMP_IF_FALSE[0m(258, 258)  -> inst 129
124: [33mLOAD_FAST[0m(9, outputs) 
125: [33mLOAD_FAST[0m(6, attn_weights) 
126: [33mBUILD_TUPLE[0m(1, 1) 
127: [33mINPLACE_ADD[0m(None, None) 
128: [33mSTORE_FAST[0m(9, outputs) 
129: [33mLOAD_FAST[0m(9, outputs) 
130: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')), (<class 'int'>, 1000), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, '\n        Args:\n            hidden_states (`torch.FloatTensor`): input to the layer of shape `(seq_len, batch, embed_dim)`\n            attention_mask (`torch.FloatTensor`): attention mask of size\n                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.\n            layer_head_mask (`torch.FloatTensor`): mask for attention heads in a given layer of size\n                `(encoder_attention_heads,)`.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n        '), (<class 'tuple'>, ('min', 'max')), (<class 'int'>, 5), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(24, disable_trace) 
1: [32mLOAD_CONST[0m(5, 5) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(1, 1) 
5: [32mJUMP_ABSOLUTE[0m(276, 276)  -> inst 138
6: [33mLOAD_FAST[0m(1, hidden_states) 
7: [33mSTORE_FAST[0m(5, residual) 
8: [33mLOAD_FAST[0m(0, self) 
9: [33mLOAD_ATTR[0m(0, self_attn) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_FAST[0m(2, attention_mask) 
12: [33mLOAD_FAST[0m(3, layer_head_mask) 
13: [33mLOAD_FAST[0m(4, output_attentions) 
14: [33mLOAD_CONST[0m(0, ('hidden_states', 'attention_mask', 'layer_head_mask', 'output_attentions')) 
15: [33mCALL_FUNCTION_KW[0m(4, 4) 
16: [33mUNPACK_SEQUENCE[0m(3, 3) 
17: [33mSTORE_FAST[0m(1, hidden_states) 
18: [33mSTORE_FAST[0m(6, attn_weights) 
19: [33mSTORE_FAST[0m(7, _) 
20: [33mLOAD_GLOBAL[0m(1, nn) 
21: [33mLOAD_ATTR[0m(2, functional) 
22: [33mLOAD_ATTR[0m(3, dropout) 
23: [33mLOAD_FAST[0m(1, hidden_states) 
24: [33mLOAD_FAST[0m(0, self) 
25: [33mLOAD_ATTR[0m(3, dropout) 
26: [33mLOAD_FAST[0m(0, self) 
27: [33mLOAD_ATTR[0m(4, training) 
28: [33mLOAD_CONST[0m(2, ('p', 'training')) 
29: [33mCALL_FUNCTION_KW[0m(3, 3) 
30: [33mSTORE_FAST[0m(1, hidden_states) 
31: [33mLOAD_FAST[0m(5, residual) 
32: [33mLOAD_FAST[0m(1, hidden_states) 
33: [33mBINARY_ADD[0m(None, None) 
34: [33mSTORE_FAST[0m(1, hidden_states) 
35: [33mLOAD_FAST[0m(0, self) 
36: [33mLOAD_METHOD[0m(5, self_attn_layer_norm) 
37: [33mLOAD_FAST[0m(1, hidden_states) 
38: [33mCALL_METHOD[0m(1, 1) 
39: [33mSTORE_FAST[0m(1, hidden_states) 
40: [33mLOAD_FAST[0m(1, hidden_states) 
41: [33mSTORE_FAST[0m(5, residual) 
42: [33mLOAD_FAST[0m(0, self) 
43: [33mLOAD_METHOD[0m(6, activation_fn) 
44: [33mLOAD_FAST[0m(0, self) 
45: [33mLOAD_METHOD[0m(7, fc1) 
46: [33mLOAD_FAST[0m(1, hidden_states) 
47: [33mCALL_METHOD[0m(1, 1) 
48: [33mCALL_METHOD[0m(1, 1) 
49: [33mSTORE_FAST[0m(1, hidden_states) 
50: [33mLOAD_GLOBAL[0m(1, nn) 
51: [33mLOAD_ATTR[0m(2, functional) 
52: [33mLOAD_ATTR[0m(3, dropout) 
53: [33mLOAD_FAST[0m(1, hidden_states) 
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_ATTR[0m(8, activation_dropout) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_ATTR[0m(4, training) 
58: [33mLOAD_CONST[0m(2, ('p', 'training')) 
59: [33mCALL_FUNCTION_KW[0m(3, 3) 
60: [33mSTORE_FAST[0m(1, hidden_states) 
61: [33mLOAD_FAST[0m(0, self) 
62: [33mLOAD_METHOD[0m(9, fc2) 
63: [33mLOAD_FAST[0m(1, hidden_states) 
64: [33mCALL_METHOD[0m(1, 1) 
65: [33mSTORE_FAST[0m(1, hidden_states) 
66: [33mLOAD_GLOBAL[0m(1, nn) 
67: [33mLOAD_ATTR[0m(2, functional) 
68: [33mLOAD_ATTR[0m(3, dropout) 
69: [33mLOAD_FAST[0m(1, hidden_states) 
70: [33mLOAD_FAST[0m(0, self) 
71: [33mLOAD_ATTR[0m(3, dropout) 
72: [33mLOAD_FAST[0m(0, self) 
73: [33mLOAD_ATTR[0m(4, training) 
74: [33mLOAD_CONST[0m(2, ('p', 'training')) 
75: [33mCALL_FUNCTION_KW[0m(3, 3) 
76: [33mSTORE_FAST[0m(1, hidden_states) 
77: [33mLOAD_FAST[0m(5, residual) 
78: [33mLOAD_FAST[0m(1, hidden_states) 
79: [33mBINARY_ADD[0m(None, None) 
80: [33mSTORE_FAST[0m(1, hidden_states) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(10, final_layer_norm) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mSTORE_FAST[0m(1, hidden_states) 
86: [33mLOAD_FAST[0m(1, hidden_states) 
87: [33mLOAD_ATTR[0m(11, dtype) 
88: [33mLOAD_GLOBAL[0m(12, torch) 
89: [33mLOAD_ATTR[0m(13, float16) 
90: [33mCOMPARE_OP[0m(2, ==) 
91: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
92: [33mLOAD_GLOBAL[0m(12, torch) 
93: [33mLOAD_METHOD[0m(14, isinf) 
94: [33mLOAD_FAST[0m(1, hidden_states) 
95: [33mCALL_METHOD[0m(1, 1) 
96: [33mLOAD_METHOD[0m(15, any) 
97: [33mCALL_METHOD[0m(0, 0) 
98: [33mPOP_JUMP_IF_TRUE[0m(212, 212)  -> inst 106
99: [33mLOAD_GLOBAL[0m(12, torch) 
100: [33mLOAD_METHOD[0m(16, isnan) 
101: [33mLOAD_FAST[0m(1, hidden_states) 
102: [33mCALL_METHOD[0m(1, 1) 
103: [33mLOAD_METHOD[0m(15, any) 
104: [33mCALL_METHOD[0m(0, 0) 
105: [33mPOP_JUMP_IF_FALSE[0m(248, 248)  -> inst 124
106: [33mLOAD_GLOBAL[0m(12, torch) 
107: [33mLOAD_METHOD[0m(17, finfo) 
108: [33mLOAD_FAST[0m(1, hidden_states) 
109: [33mLOAD_ATTR[0m(11, dtype) 
110: [33mCALL_METHOD[0m(1, 1) 
111: [33mLOAD_ATTR[0m(18, max) 
112: [33mLOAD_CONST[0m(1, 1000) 
113: [33mBINARY_SUBTRACT[0m(None, None) 
114: [33mSTORE_FAST[0m(8, clamp_value) 
115: [33mLOAD_GLOBAL[0m(12, torch) 
116: [33mLOAD_ATTR[0m(19, clamp) 
117: [33mLOAD_FAST[0m(1, hidden_states) 
118: [33mLOAD_FAST[0m(8, clamp_value) 
119: [33mUNARY_NEGATIVE[0m(None, None) 
120: [33mLOAD_FAST[0m(8, clamp_value) 
121: [33mLOAD_CONST[0m(4, ('min', 'max')) 
122: [33mCALL_FUNCTION_KW[0m(3, 3) 
123: [33mSTORE_FAST[0m(1, hidden_states) 
124: [33mLOAD_FAST[0m(1, hidden_states) 
125: [33mBUILD_TUPLE[0m(1, 1) 
126: [33mSTORE_FAST[0m(9, outputs) 
127: [33mLOAD_FAST[0m(4, output_attentions) 
128: [32mEXTENDED_ARG[0m(1, 1) 
129: [33mPOP_JUMP_IF_FALSE[0m(270, 270)  -> inst 135
130: [33mLOAD_FAST[0m(9, outputs) 
131: [33mLOAD_FAST[0m(6, attn_weights) 
132: [33mBUILD_TUPLE[0m(1, 1) 
133: [33mINPLACE_ADD[0m(None, None) 
134: [33mSTORE_FAST[0m(9, outputs) 
135: [33mLOAD_FAST[0m(9, outputs) 
136: [32mEXTENDED_ARG[0m(1, 1) 
137: [32mJUMP_ABSOLUTE[0m(304, 304)  -> inst 152
138: [32mLOAD_GLOBAL[0m(21, guard_match) 
139: [32mLOAD_CONST[0m(5, 5) 
140: [32mLOAD_CONST[0m(6, 0) 
141: [32mLOAD_GLOBAL[0m(20, locals) 
142: [32mCALL_FUNCTION[0m(0, 0) 
143: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
144: [32mUNPACK_SEQUENCE[0m(2, 2) 
145: [32mSTORE_FAST[0m(11, __case_idx) 
146: [32mSTORE_FAST[0m(10, __graph_fn) 
147: [32mLOAD_GLOBAL[0m(22, enable_trace) 
148: [32mLOAD_CONST[0m(5, 5) 
149: [32mCALL_FUNCTION[0m(1, 1) 
150: [32mPOP_TOP[0m(None, None) 
151: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
152: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=5(0x698de50)
push tracker due to record
push tracker 5 frame 0x698de50 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=5(0x698de50)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=5(0x698de50)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5] frame_id 5
enable_trace
push tracker 5 frame 0x698de50 frame_id 5 read_stack False cf_info <class 'NoneType'> all [0, 2, 5]
tracing opcode POP_TOP None pc=300 frame=5(0x698de50)
process last instruction done
restart: running injected code (f_lasti=300)
tracing opcode JUMP_ABSOLUTE None pc=302 frame=5(0x698de50)
process last instruction done
restart: running injected code (f_lasti=302)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=14 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=16 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=18 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=22 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=24 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=26 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=28 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=30 frame=5(0x698de50)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 6 0x6825f10 forward
0: [33mLOAD_FAST[0m(2, key_value_states) 
1: [33mLOAD_CONST[0m(1, None) 
2: [33mIS_OP[0m(1, 1) 
3: [33mSTORE_FAST[0m(7, is_cross_attention) 
4: [33mLOAD_FAST[0m(1, hidden_states) 
5: [33mLOAD_METHOD[0m(0, size) 
6: [33mCALL_METHOD[0m(0, 0) 
7: [33mUNPACK_SEQUENCE[0m(3, 3) 
8: [33mSTORE_FAST[0m(8, bsz) 
9: [33mSTORE_FAST[0m(9, tgt_len) 
10: [33mSTORE_FAST[0m(10, _) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_METHOD[0m(1, q_proj) 
13: [33mLOAD_FAST[0m(1, hidden_states) 
14: [33mCALL_METHOD[0m(1, 1) 
15: [33mLOAD_FAST[0m(0, self) 
16: [33mLOAD_ATTR[0m(2, scaling) 
17: [33mBINARY_MULTIPLY[0m(None, None) 
18: [33mSTORE_FAST[0m(11, query_states) 
19: [33mLOAD_FAST[0m(7, is_cross_attention) 
20: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
21: [33mLOAD_FAST[0m(3, past_key_value) 
22: [33mLOAD_CONST[0m(1, None) 
23: [33mIS_OP[0m(1, 1) 
24: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
25: [33mLOAD_FAST[0m(3, past_key_value) 
26: [33mLOAD_CONST[0m(2, 0) 
27: [33mBINARY_SUBSCR[0m(None, None) 
28: [33mLOAD_ATTR[0m(3, shape) 
29: [33mLOAD_CONST[0m(3, 2) 
30: [33mBINARY_SUBSCR[0m(None, None) 
31: [33mLOAD_FAST[0m(2, key_value_states) 
32: [33mLOAD_ATTR[0m(3, shape) 
33: [33mLOAD_CONST[0m(4, 1) 
34: [33mBINARY_SUBSCR[0m(None, None) 
35: [33mCOMPARE_OP[0m(2, ==) 
36: [33mPOP_JUMP_IF_FALSE[0m(92, 92)  -> inst 46
37: [33mLOAD_FAST[0m(3, past_key_value) 
38: [33mLOAD_CONST[0m(2, 0) 
39: [33mBINARY_SUBSCR[0m(None, None) 
40: [33mSTORE_FAST[0m(12, key_states) 
41: [33mLOAD_FAST[0m(3, past_key_value) 
42: [33mLOAD_CONST[0m(4, 1) 
43: [33mBINARY_SUBSCR[0m(None, None) 
44: [33mSTORE_FAST[0m(13, value_states) 
45: [33mJUMP_FORWARD[0m(180, 272)  -> inst 136
46: [33mLOAD_FAST[0m(7, is_cross_attention) 
47: [33mPOP_JUMP_IF_FALSE[0m(138, 138)  -> inst 69
48: [33mLOAD_FAST[0m(0, self) 
49: [33mLOAD_METHOD[0m(4, _shape) 
50: [33mLOAD_FAST[0m(0, self) 
51: [33mLOAD_METHOD[0m(5, k_proj) 
52: [33mLOAD_FAST[0m(2, key_value_states) 
53: [33mCALL_METHOD[0m(1, 1) 
54: [33mLOAD_CONST[0m(5, -1) 
55: [33mLOAD_FAST[0m(8, bsz) 
56: [33mCALL_METHOD[0m(3, 3) 
57: [33mSTORE_FAST[0m(12, key_states) 
58: [33mLOAD_FAST[0m(0, self) 
59: [33mLOAD_METHOD[0m(4, _shape) 
60: [33mLOAD_FAST[0m(0, self) 
61: [33mLOAD_METHOD[0m(6, v_proj) 
62: [33mLOAD_FAST[0m(2, key_value_states) 
63: [33mCALL_METHOD[0m(1, 1) 
64: [33mLOAD_CONST[0m(5, -1) 
65: [33mLOAD_FAST[0m(8, bsz) 
66: [33mCALL_METHOD[0m(3, 3) 
67: [33mSTORE_FAST[0m(13, value_states) 
68: [33mJUMP_FORWARD[0m(134, 272)  -> inst 136
69: [33mLOAD_FAST[0m(3, past_key_value) 
70: [33mLOAD_CONST[0m(1, None) 
71: [33mIS_OP[0m(1, 1) 
72: [33mPOP_JUMP_IF_FALSE[0m(232, 232)  -> inst 116
73: [33mLOAD_FAST[0m(0, self) 
74: [33mLOAD_METHOD[0m(4, _shape) 
75: [33mLOAD_FAST[0m(0, self) 
76: [33mLOAD_METHOD[0m(5, k_proj) 
77: [33mLOAD_FAST[0m(1, hidden_states) 
78: [33mCALL_METHOD[0m(1, 1) 
79: [33mLOAD_CONST[0m(5, -1) 
80: [33mLOAD_FAST[0m(8, bsz) 
81: [33mCALL_METHOD[0m(3, 3) 
82: [33mSTORE_FAST[0m(12, key_states) 
83: [33mLOAD_FAST[0m(0, self) 
84: [33mLOAD_METHOD[0m(4, _shape) 
85: [33mLOAD_FAST[0m(0, self) 
86: [33mLOAD_METHOD[0m(6, v_proj) 
87: [33mLOAD_FAST[0m(1, hidden_states) 
88: [33mCALL_METHOD[0m(1, 1) 
89: [33mLOAD_CONST[0m(5, -1) 
90: [33mLOAD_FAST[0m(8, bsz) 
91: [33mCALL_METHOD[0m(3, 3) 
92: [33mSTORE_FAST[0m(13, value_states) 
93: [33mLOAD_GLOBAL[0m(7, torch) 
94: [33mLOAD_ATTR[0m(8, cat) 
95: [33mLOAD_FAST[0m(3, past_key_value) 
96: [33mLOAD_CONST[0m(2, 0) 
97: [33mBINARY_SUBSCR[0m(None, None) 
98: [33mLOAD_FAST[0m(12, key_states) 
99: [33mBUILD_LIST[0m(2, 2) 
100: [33mLOAD_CONST[0m(3, 2) 
101: [33mLOAD_CONST[0m(6, ('dim',)) 
102: [33mCALL_FUNCTION_KW[0m(2, 2) 
103: [33mSTORE_FAST[0m(12, key_states) 
104: [33mLOAD_GLOBAL[0m(7, torch) 
105: [33mLOAD_ATTR[0m(8, cat) 
106: [33mLOAD_FAST[0m(3, past_key_value) 
107: [33mLOAD_CONST[0m(4, 1) 
108: [33mBINARY_SUBSCR[0m(None, None) 
109: [33mLOAD_FAST[0m(13, value_states) 
110: [33mBUILD_LIST[0m(2, 2) 
111: [33mLOAD_CONST[0m(3, 2) 
112: [33mLOAD_CONST[0m(6, ('dim',)) 
113: [33mCALL_FUNCTION_KW[0m(2, 2) 
114: [33mSTORE_FAST[0m(13, value_states) 
115: [33mJUMP_FORWARD[0m(40, 272)  -> inst 136
116: [33mLOAD_FAST[0m(0, self) 
117: [33mLOAD_METHOD[0m(4, _shape) 
118: [33mLOAD_FAST[0m(0, self) 
119: [33mLOAD_METHOD[0m(5, k_proj) 
120: [33mLOAD_FAST[0m(1, hidden_states) 
121: [33mCALL_METHOD[0m(1, 1) 
122: [33mLOAD_CONST[0m(5, -1) 
123: [33mLOAD_FAST[0m(8, bsz) 
124: [33mCALL_METHOD[0m(3, 3) 
125: [33mSTORE_FAST[0m(12, key_states) 
126: [33mLOAD_FAST[0m(0, self) 
127: [33mLOAD_METHOD[0m(4, _shape) 
128: [33mLOAD_FAST[0m(0, self) 
129: [33mLOAD_METHOD[0m(6, v_proj) 
130: [33mLOAD_FAST[0m(1, hidden_states) 
131: [33mCALL_METHOD[0m(1, 1) 
132: [33mLOAD_CONST[0m(5, -1) 
133: [33mLOAD_FAST[0m(8, bsz) 
134: [33mCALL_METHOD[0m(3, 3) 
135: [33mSTORE_FAST[0m(13, value_states) 
136: [33mLOAD_FAST[0m(0, self) 
137: [33mLOAD_ATTR[0m(9, is_decoder) 
138: [33mEXTENDED_ARG[0m(1, 1) 
139: [33mPOP_JUMP_IF_FALSE[0m(288, 288)  -> inst 144
140: [33mLOAD_FAST[0m(12, key_states) 
141: [33mLOAD_FAST[0m(13, value_states) 
142: [33mBUILD_TUPLE[0m(2, 2) 
143: [33mSTORE_FAST[0m(3, past_key_value) 
144: [33mLOAD_FAST[0m(8, bsz) 
145: [33mLOAD_FAST[0m(0, self) 
146: [33mLOAD_ATTR[0m(10, num_heads) 
147: [33mBINARY_MULTIPLY[0m(None, None) 
148: [33mLOAD_CONST[0m(5, -1) 
149: [33mLOAD_FAST[0m(0, self) 
150: [33mLOAD_ATTR[0m(11, head_dim) 
151: [33mBUILD_TUPLE[0m(3, 3) 
152: [33mSTORE_FAST[0m(14, proj_shape) 
153: [33mLOAD_FAST[0m(0, self) 
154: [33mLOAD_METHOD[0m(4, _shape) 
155: [33mLOAD_FAST[0m(11, query_states) 
156: [33mLOAD_FAST[0m(9, tgt_len) 
157: [33mLOAD_FAST[0m(8, bsz) 
158: [33mCALL_METHOD[0m(3, 3) 
159: [33mLOAD_ATTR[0m(12, view) 
160: [33mLOAD_FAST[0m(14, proj_shape) 
161: [33mCALL_FUNCTION_EX[0m(0, 0) 
162: [33mSTORE_FAST[0m(11, query_states) 
163: [33mLOAD_FAST[0m(12, key_states) 
164: [33mLOAD_ATTR[0m(13, reshape) 
165: [33mLOAD_FAST[0m(14, proj_shape) 
166: [33mCALL_FUNCTION_EX[0m(0, 0) 
167: [33mSTORE_FAST[0m(12, key_states) 
168: [33mLOAD_FAST[0m(13, value_states) 
169: [33mLOAD_ATTR[0m(13, reshape) 
170: [33mLOAD_FAST[0m(14, proj_shape) 
171: [33mCALL_FUNCTION_EX[0m(0, 0) 
172: [33mSTORE_FAST[0m(13, value_states) 
173: [33mLOAD_FAST[0m(12, key_states) 
174: [33mLOAD_METHOD[0m(0, size) 
175: [33mLOAD_CONST[0m(4, 1) 
176: [33mCALL_METHOD[0m(1, 1) 
177: [33mSTORE_FAST[0m(15, src_len) 
178: [33mLOAD_GLOBAL[0m(7, torch) 
179: [33mLOAD_METHOD[0m(14, bmm) 
180: [33mLOAD_FAST[0m(11, query_states) 
181: [33mLOAD_FAST[0m(12, key_states) 
182: [33mLOAD_METHOD[0m(15, transpose) 
183: [33mLOAD_CONST[0m(4, 1) 
184: [33mLOAD_CONST[0m(3, 2) 
185: [33mCALL_METHOD[0m(2, 2) 
186: [33mCALL_METHOD[0m(2, 2) 
187: [33mSTORE_FAST[0m(16, attn_weights) 
188: [33mLOAD_FAST[0m(16, attn_weights) 
189: [33mLOAD_METHOD[0m(0, size) 
190: [33mCALL_METHOD[0m(0, 0) 
191: [33mLOAD_FAST[0m(8, bsz) 
192: [33mLOAD_FAST[0m(0, self) 
193: [33mLOAD_ATTR[0m(10, num_heads) 
194: [33mBINARY_MULTIPLY[0m(None, None) 
195: [33mLOAD_FAST[0m(9, tgt_len) 
196: [33mLOAD_FAST[0m(15, src_len) 
197: [33mBUILD_TUPLE[0m(3, 3) 
198: [33mCOMPARE_OP[0m(3, !=) 
199: [33mEXTENDED_ARG[0m(1, 1) 
200: [33mPOP_JUMP_IF_FALSE[0m(438, 438)  -> inst 219
201: [33mLOAD_GLOBAL[0m(16, ValueError) 
202: [33mLOAD_CONST[0m(7, Attention weights should be of size ) 
203: [33mLOAD_FAST[0m(8, bsz) 
204: [33mLOAD_FAST[0m(0, self) 
205: [33mLOAD_ATTR[0m(10, num_heads) 
206: [33mBINARY_MULTIPLY[0m(None, None) 
207: [33mLOAD_FAST[0m(9, tgt_len) 
208: [33mLOAD_FAST[0m(15, src_len) 
209: [33mBUILD_TUPLE[0m(3, 3) 
210: [33mFORMAT_VALUE[0m(0, (None, False)) 
211: [33mLOAD_CONST[0m(8, , but is ) 
212: [33mLOAD_FAST[0m(16, attn_weights) 
213: [33mLOAD_METHOD[0m(0, size) 
214: [33mCALL_METHOD[0m(0, 0) 
215: [33mFORMAT_VALUE[0m(0, (None, False)) 
216: [33mBUILD_STRING[0m(4, 4) 
217: [33mCALL_FUNCTION[0m(1, 1) 
218: [33mRAISE_VARARGS[0m(1, 1) 
219: [33mLOAD_FAST[0m(4, attention_mask) 
220: [33mLOAD_CONST[0m(1, None) 
221: [33mIS_OP[0m(1, 1) 
222: [33mEXTENDED_ARG[0m(2, 2) 
223: [33mPOP_JUMP_IF_FALSE[0m(544, 544)  -> inst 272
224: [33mLOAD_FAST[0m(4, attention_mask) 
225: [33mLOAD_METHOD[0m(0, size) 
226: [33mCALL_METHOD[0m(0, 0) 
227: [33mLOAD_FAST[0m(8, bsz) 
228: [33mLOAD_CONST[0m(4, 1) 
229: [33mLOAD_FAST[0m(9, tgt_len) 
230: [33mLOAD_FAST[0m(15, src_len) 
231: [33mBUILD_TUPLE[0m(4, 4) 
232: [33mCOMPARE_OP[0m(3, !=) 
233: [33mEXTENDED_ARG[0m(1, 1) 
234: [33mPOP_JUMP_IF_FALSE[0m(502, 502)  -> inst 251
235: [33mLOAD_GLOBAL[0m(16, ValueError) 
236: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
237: [33mLOAD_FAST[0m(8, bsz) 
238: [33mLOAD_CONST[0m(4, 1) 
239: [33mLOAD_FAST[0m(9, tgt_len) 
240: [33mLOAD_FAST[0m(15, src_len) 
241: [33mBUILD_TUPLE[0m(4, 4) 
242: [33mFORMAT_VALUE[0m(0, (None, False)) 
243: [33mLOAD_CONST[0m(8, , but is ) 
244: [33mLOAD_FAST[0m(4, attention_mask) 
245: [33mLOAD_METHOD[0m(0, size) 
246: [33mCALL_METHOD[0m(0, 0) 
247: [33mFORMAT_VALUE[0m(0, (None, False)) 
248: [33mBUILD_STRING[0m(4, 4) 
249: [33mCALL_FUNCTION[0m(1, 1) 
250: [33mRAISE_VARARGS[0m(1, 1) 
251: [33mLOAD_FAST[0m(16, attn_weights) 
252: [33mLOAD_METHOD[0m(12, view) 
253: [33mLOAD_FAST[0m(8, bsz) 
254: [33mLOAD_FAST[0m(0, self) 
255: [33mLOAD_ATTR[0m(10, num_heads) 
256: [33mLOAD_FAST[0m(9, tgt_len) 
257: [33mLOAD_FAST[0m(15, src_len) 
258: [33mCALL_METHOD[0m(4, 4) 
259: [33mLOAD_FAST[0m(4, attention_mask) 
260: [33mBINARY_ADD[0m(None, None) 
261: [33mSTORE_FAST[0m(16, attn_weights) 
262: [33mLOAD_FAST[0m(16, attn_weights) 
263: [33mLOAD_METHOD[0m(12, view) 
264: [33mLOAD_FAST[0m(8, bsz) 
265: [33mLOAD_FAST[0m(0, self) 
266: [33mLOAD_ATTR[0m(10, num_heads) 
267: [33mBINARY_MULTIPLY[0m(None, None) 
268: [33mLOAD_FAST[0m(9, tgt_len) 
269: [33mLOAD_FAST[0m(15, src_len) 
270: [33mCALL_METHOD[0m(3, 3) 
271: [33mSTORE_FAST[0m(16, attn_weights) 
272: [33mLOAD_GLOBAL[0m(17, nn) 
273: [33mLOAD_ATTR[0m(18, functional) 
274: [33mLOAD_ATTR[0m(19, softmax) 
275: [33mLOAD_FAST[0m(16, attn_weights) 
276: [33mLOAD_CONST[0m(5, -1) 
277: [33mLOAD_CONST[0m(6, ('dim',)) 
278: [33mCALL_FUNCTION_KW[0m(2, 2) 
279: [33mSTORE_FAST[0m(16, attn_weights) 
280: [33mLOAD_FAST[0m(5, layer_head_mask) 
281: [33mLOAD_CONST[0m(1, None) 
282: [33mIS_OP[0m(1, 1) 
283: [33mEXTENDED_ARG[0m(2, 2) 
284: [33mPOP_JUMP_IF_FALSE[0m(670, 670)  -> inst 335
285: [33mLOAD_FAST[0m(5, layer_head_mask) 
286: [33mLOAD_METHOD[0m(0, size) 
287: [33mCALL_METHOD[0m(0, 0) 
288: [33mLOAD_FAST[0m(0, self) 
289: [33mLOAD_ATTR[0m(10, num_heads) 
290: [33mBUILD_TUPLE[0m(1, 1) 
291: [33mCOMPARE_OP[0m(3, !=) 
292: [33mEXTENDED_ARG[0m(2, 2) 
293: [33mPOP_JUMP_IF_FALSE[0m(616, 616)  -> inst 308
294: [33mLOAD_GLOBAL[0m(16, ValueError) 
295: [33mLOAD_CONST[0m(10, Head mask for a single layer should be of size ) 
296: [33mLOAD_FAST[0m(0, self) 
297: [33mLOAD_ATTR[0m(10, num_heads) 
298: [33mBUILD_TUPLE[0m(1, 1) 
299: [33mFORMAT_VALUE[0m(0, (None, False)) 
300: [33mLOAD_CONST[0m(8, , but is ) 
301: [33mLOAD_FAST[0m(5, layer_head_mask) 
302: [33mLOAD_METHOD[0m(0, size) 
303: [33mCALL_METHOD[0m(0, 0) 
304: [33mFORMAT_VALUE[0m(0, (None, False)) 
305: [33mBUILD_STRING[0m(4, 4) 
306: [33mCALL_FUNCTION[0m(1, 1) 
307: [33mRAISE_VARARGS[0m(1, 1) 
308: [33mLOAD_FAST[0m(5, layer_head_mask) 
309: [33mLOAD_METHOD[0m(12, view) 
310: [33mLOAD_CONST[0m(4, 1) 
311: [33mLOAD_CONST[0m(5, -1) 
312: [33mLOAD_CONST[0m(4, 1) 
313: [33mLOAD_CONST[0m(4, 1) 
314: [33mCALL_METHOD[0m(4, 4) 
315: [33mLOAD_FAST[0m(16, attn_weights) 
316: [33mLOAD_METHOD[0m(12, view) 
317: [33mLOAD_FAST[0m(8, bsz) 
318: [33mLOAD_FAST[0m(0, self) 
319: [33mLOAD_ATTR[0m(10, num_heads) 
320: [33mLOAD_FAST[0m(9, tgt_len) 
321: [33mLOAD_FAST[0m(15, src_len) 
322: [33mCALL_METHOD[0m(4, 4) 
323: [33mBINARY_MULTIPLY[0m(None, None) 
324: [33mSTORE_FAST[0m(16, attn_weights) 
325: [33mLOAD_FAST[0m(16, attn_weights) 
326: [33mLOAD_METHOD[0m(12, view) 
327: [33mLOAD_FAST[0m(8, bsz) 
328: [33mLOAD_FAST[0m(0, self) 
329: [33mLOAD_ATTR[0m(10, num_heads) 
330: [33mBINARY_MULTIPLY[0m(None, None) 
331: [33mLOAD_FAST[0m(9, tgt_len) 
332: [33mLOAD_FAST[0m(15, src_len) 
333: [33mCALL_METHOD[0m(3, 3) 
334: [33mSTORE_FAST[0m(16, attn_weights) 
335: [33mLOAD_FAST[0m(6, output_attentions) 
336: [33mEXTENDED_ARG[0m(2, 2) 
337: [33mPOP_JUMP_IF_FALSE[0m(716, 716)  -> inst 358
338: [33mLOAD_FAST[0m(16, attn_weights) 
339: [33mLOAD_METHOD[0m(12, view) 
340: [33mLOAD_FAST[0m(8, bsz) 
341: [33mLOAD_FAST[0m(0, self) 
342: [33mLOAD_ATTR[0m(10, num_heads) 
343: [33mLOAD_FAST[0m(9, tgt_len) 
344: [33mLOAD_FAST[0m(15, src_len) 
345: [33mCALL_METHOD[0m(4, 4) 
346: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
347: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
348: [33mLOAD_METHOD[0m(12, view) 
349: [33mLOAD_FAST[0m(8, bsz) 
350: [33mLOAD_FAST[0m(0, self) 
351: [33mLOAD_ATTR[0m(10, num_heads) 
352: [33mBINARY_MULTIPLY[0m(None, None) 
353: [33mLOAD_FAST[0m(9, tgt_len) 
354: [33mLOAD_FAST[0m(15, src_len) 
355: [33mCALL_METHOD[0m(3, 3) 
356: [33mSTORE_FAST[0m(16, attn_weights) 
357: [33mJUMP_FORWARD[0m(4, 720)  -> inst 360
358: [33mLOAD_CONST[0m(1, None) 
359: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
360: [33mLOAD_GLOBAL[0m(17, nn) 
361: [33mLOAD_ATTR[0m(18, functional) 
362: [33mLOAD_ATTR[0m(20, dropout) 
363: [33mLOAD_FAST[0m(16, attn_weights) 
364: [33mLOAD_FAST[0m(0, self) 
365: [33mLOAD_ATTR[0m(20, dropout) 
366: [33mLOAD_FAST[0m(0, self) 
367: [33mLOAD_ATTR[0m(21, training) 
368: [33mLOAD_CONST[0m(11, ('p', 'training')) 
369: [33mCALL_FUNCTION_KW[0m(3, 3) 
370: [33mSTORE_FAST[0m(18, attn_probs) 
371: [33mLOAD_GLOBAL[0m(7, torch) 
372: [33mLOAD_METHOD[0m(14, bmm) 
373: [33mLOAD_FAST[0m(18, attn_probs) 
374: [33mLOAD_FAST[0m(13, value_states) 
375: [33mCALL_METHOD[0m(2, 2) 
376: [33mSTORE_FAST[0m(19, attn_output) 
377: [33mLOAD_FAST[0m(19, attn_output) 
378: [33mLOAD_METHOD[0m(0, size) 
379: [33mCALL_METHOD[0m(0, 0) 
380: [33mLOAD_FAST[0m(8, bsz) 
381: [33mLOAD_FAST[0m(0, self) 
382: [33mLOAD_ATTR[0m(10, num_heads) 
383: [33mBINARY_MULTIPLY[0m(None, None) 
384: [33mLOAD_FAST[0m(9, tgt_len) 
385: [33mLOAD_FAST[0m(0, self) 
386: [33mLOAD_ATTR[0m(11, head_dim) 
387: [33mBUILD_TUPLE[0m(3, 3) 
388: [33mCOMPARE_OP[0m(3, !=) 
389: [33mEXTENDED_ARG[0m(3, 3) 
390: [33mPOP_JUMP_IF_FALSE[0m(820, 820)  -> inst 410
391: [33mLOAD_GLOBAL[0m(16, ValueError) 
392: [33mLOAD_CONST[0m(12, `attn_output` should be of size ) 
393: [33mLOAD_FAST[0m(8, bsz) 
394: [33mLOAD_FAST[0m(0, self) 
395: [33mLOAD_ATTR[0m(10, num_heads) 
396: [33mBINARY_MULTIPLY[0m(None, None) 
397: [33mLOAD_FAST[0m(9, tgt_len) 
398: [33mLOAD_FAST[0m(0, self) 
399: [33mLOAD_ATTR[0m(11, head_dim) 
400: [33mBUILD_TUPLE[0m(3, 3) 
401: [33mFORMAT_VALUE[0m(0, (None, False)) 
402: [33mLOAD_CONST[0m(8, , but is ) 
403: [33mLOAD_FAST[0m(19, attn_output) 
404: [33mLOAD_METHOD[0m(0, size) 
405: [33mCALL_METHOD[0m(0, 0) 
406: [33mFORMAT_VALUE[0m(0, (None, False)) 
407: [33mBUILD_STRING[0m(4, 4) 
408: [33mCALL_FUNCTION[0m(1, 1) 
409: [33mRAISE_VARARGS[0m(1, 1) 
410: [33mLOAD_FAST[0m(19, attn_output) 
411: [33mLOAD_METHOD[0m(12, view) 
412: [33mLOAD_FAST[0m(8, bsz) 
413: [33mLOAD_FAST[0m(0, self) 
414: [33mLOAD_ATTR[0m(10, num_heads) 
415: [33mLOAD_FAST[0m(9, tgt_len) 
416: [33mLOAD_FAST[0m(0, self) 
417: [33mLOAD_ATTR[0m(11, head_dim) 
418: [33mCALL_METHOD[0m(4, 4) 
419: [33mSTORE_FAST[0m(19, attn_output) 
420: [33mLOAD_FAST[0m(19, attn_output) 
421: [33mLOAD_METHOD[0m(15, transpose) 
422: [33mLOAD_CONST[0m(4, 1) 
423: [33mLOAD_CONST[0m(3, 2) 
424: [33mCALL_METHOD[0m(2, 2) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(13, reshape) 
428: [33mLOAD_FAST[0m(8, bsz) 
429: [33mLOAD_FAST[0m(9, tgt_len) 
430: [33mLOAD_FAST[0m(0, self) 
431: [33mLOAD_ATTR[0m(22, embed_dim) 
432: [33mCALL_METHOD[0m(3, 3) 
433: [33mSTORE_FAST[0m(19, attn_output) 
434: [33mLOAD_FAST[0m(0, self) 
435: [33mLOAD_METHOD[0m(23, out_proj) 
436: [33mLOAD_FAST[0m(19, attn_output) 
437: [33mCALL_METHOD[0m(1, 1) 
438: [33mSTORE_FAST[0m(19, attn_output) 
439: [33mLOAD_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
441: [33mLOAD_FAST[0m(3, past_key_value) 
442: [33mBUILD_TUPLE[0m(3, 3) 
443: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'tuple'>, ('dim',)), (<class 'int'>, 2), (<class 'int'>, -1), (<class 'str'>, '`attn_output` should be of size '), (<class 'str'>, 'Input shape: Batch x Time x Channel'), (<class 'int'>, 1), (<class 'str'>, 'Head mask for a single layer should be of size '), (<class 'int'>, 0), (<class 'str'>, ', but is '), (<class 'str'>, 'Attention mask should be of size '), (<class 'tuple'>, ('p', 'training')), (<class 'str'>, 'Attention weights should be of size '), (<class 'NoneType'>, None), (<class 'int'>, 6)]
guarded code
0: [32mLOAD_GLOBAL[0m(28, disable_trace) 
1: [32mLOAD_CONST[0m(13, 6) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mEXTENDED_ARG[0m(3, 3) 
5: [32mJUMP_ABSOLUTE[0m(902, 902)  -> inst 451
6: [33mLOAD_FAST[0m(2, key_value_states) 
7: [33mLOAD_CONST[0m(12, None) 
8: [33mIS_OP[0m(1, 1) 
9: [33mSTORE_FAST[0m(7, is_cross_attention) 
10: [33mLOAD_FAST[0m(1, hidden_states) 
11: [33mLOAD_METHOD[0m(0, size) 
12: [33mCALL_METHOD[0m(0, 0) 
13: [33mUNPACK_SEQUENCE[0m(3, 3) 
14: [33mSTORE_FAST[0m(8, bsz) 
15: [33mSTORE_FAST[0m(9, tgt_len) 
16: [33mSTORE_FAST[0m(10, _) 
17: [33mLOAD_FAST[0m(0, self) 
18: [33mLOAD_METHOD[0m(1, q_proj) 
19: [33mLOAD_FAST[0m(1, hidden_states) 
20: [33mCALL_METHOD[0m(1, 1) 
21: [33mLOAD_FAST[0m(0, self) 
22: [33mLOAD_ATTR[0m(2, scaling) 
23: [33mBINARY_MULTIPLY[0m(None, None) 
24: [33mSTORE_FAST[0m(11, query_states) 
25: [33mLOAD_FAST[0m(7, is_cross_attention) 
26: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
27: [33mLOAD_FAST[0m(3, past_key_value) 
28: [33mLOAD_CONST[0m(12, None) 
29: [33mIS_OP[0m(1, 1) 
30: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
31: [33mLOAD_FAST[0m(3, past_key_value) 
32: [33mLOAD_CONST[0m(7, 0) 
33: [33mBINARY_SUBSCR[0m(None, None) 
34: [33mLOAD_ATTR[0m(3, shape) 
35: [33mLOAD_CONST[0m(1, 2) 
36: [33mBINARY_SUBSCR[0m(None, None) 
37: [33mLOAD_FAST[0m(2, key_value_states) 
38: [33mLOAD_ATTR[0m(3, shape) 
39: [33mLOAD_CONST[0m(5, 1) 
40: [33mBINARY_SUBSCR[0m(None, None) 
41: [33mCOMPARE_OP[0m(2, ==) 
42: [33mPOP_JUMP_IF_FALSE[0m(104, 104)  -> inst 52
43: [33mLOAD_FAST[0m(3, past_key_value) 
44: [33mLOAD_CONST[0m(7, 0) 
45: [33mBINARY_SUBSCR[0m(None, None) 
46: [33mSTORE_FAST[0m(12, key_states) 
47: [33mLOAD_FAST[0m(3, past_key_value) 
48: [33mLOAD_CONST[0m(5, 1) 
49: [33mBINARY_SUBSCR[0m(None, None) 
50: [33mSTORE_FAST[0m(13, value_states) 
51: [33mJUMP_FORWARD[0m(180, 284)  -> inst 142
52: [33mLOAD_FAST[0m(7, is_cross_attention) 
53: [33mPOP_JUMP_IF_FALSE[0m(150, 150)  -> inst 75
54: [33mLOAD_FAST[0m(0, self) 
55: [33mLOAD_METHOD[0m(4, _shape) 
56: [33mLOAD_FAST[0m(0, self) 
57: [33mLOAD_METHOD[0m(5, k_proj) 
58: [33mLOAD_FAST[0m(2, key_value_states) 
59: [33mCALL_METHOD[0m(1, 1) 
60: [33mLOAD_CONST[0m(2, -1) 
61: [33mLOAD_FAST[0m(8, bsz) 
62: [33mCALL_METHOD[0m(3, 3) 
63: [33mSTORE_FAST[0m(12, key_states) 
64: [33mLOAD_FAST[0m(0, self) 
65: [33mLOAD_METHOD[0m(4, _shape) 
66: [33mLOAD_FAST[0m(0, self) 
67: [33mLOAD_METHOD[0m(6, v_proj) 
68: [33mLOAD_FAST[0m(2, key_value_states) 
69: [33mCALL_METHOD[0m(1, 1) 
70: [33mLOAD_CONST[0m(2, -1) 
71: [33mLOAD_FAST[0m(8, bsz) 
72: [33mCALL_METHOD[0m(3, 3) 
73: [33mSTORE_FAST[0m(13, value_states) 
74: [33mJUMP_FORWARD[0m(134, 284)  -> inst 142
75: [33mLOAD_FAST[0m(3, past_key_value) 
76: [33mLOAD_CONST[0m(12, None) 
77: [33mIS_OP[0m(1, 1) 
78: [33mPOP_JUMP_IF_FALSE[0m(244, 244)  -> inst 122
79: [33mLOAD_FAST[0m(0, self) 
80: [33mLOAD_METHOD[0m(4, _shape) 
81: [33mLOAD_FAST[0m(0, self) 
82: [33mLOAD_METHOD[0m(5, k_proj) 
83: [33mLOAD_FAST[0m(1, hidden_states) 
84: [33mCALL_METHOD[0m(1, 1) 
85: [33mLOAD_CONST[0m(2, -1) 
86: [33mLOAD_FAST[0m(8, bsz) 
87: [33mCALL_METHOD[0m(3, 3) 
88: [33mSTORE_FAST[0m(12, key_states) 
89: [33mLOAD_FAST[0m(0, self) 
90: [33mLOAD_METHOD[0m(4, _shape) 
91: [33mLOAD_FAST[0m(0, self) 
92: [33mLOAD_METHOD[0m(6, v_proj) 
93: [33mLOAD_FAST[0m(1, hidden_states) 
94: [33mCALL_METHOD[0m(1, 1) 
95: [33mLOAD_CONST[0m(2, -1) 
96: [33mLOAD_FAST[0m(8, bsz) 
97: [33mCALL_METHOD[0m(3, 3) 
98: [33mSTORE_FAST[0m(13, value_states) 
99: [33mLOAD_GLOBAL[0m(7, torch) 
100: [33mLOAD_ATTR[0m(8, cat) 
101: [33mLOAD_FAST[0m(3, past_key_value) 
102: [33mLOAD_CONST[0m(7, 0) 
103: [33mBINARY_SUBSCR[0m(None, None) 
104: [33mLOAD_FAST[0m(12, key_states) 
105: [33mBUILD_LIST[0m(2, 2) 
106: [33mLOAD_CONST[0m(1, 2) 
107: [33mLOAD_CONST[0m(0, ('dim',)) 
108: [33mCALL_FUNCTION_KW[0m(2, 2) 
109: [33mSTORE_FAST[0m(12, key_states) 
110: [33mLOAD_GLOBAL[0m(7, torch) 
111: [33mLOAD_ATTR[0m(8, cat) 
112: [33mLOAD_FAST[0m(3, past_key_value) 
113: [33mLOAD_CONST[0m(5, 1) 
114: [33mBINARY_SUBSCR[0m(None, None) 
115: [33mLOAD_FAST[0m(13, value_states) 
116: [33mBUILD_LIST[0m(2, 2) 
117: [33mLOAD_CONST[0m(1, 2) 
118: [33mLOAD_CONST[0m(0, ('dim',)) 
119: [33mCALL_FUNCTION_KW[0m(2, 2) 
120: [33mSTORE_FAST[0m(13, value_states) 
121: [33mJUMP_FORWARD[0m(40, 284)  -> inst 142
122: [33mLOAD_FAST[0m(0, self) 
123: [33mLOAD_METHOD[0m(4, _shape) 
124: [33mLOAD_FAST[0m(0, self) 
125: [33mLOAD_METHOD[0m(5, k_proj) 
126: [33mLOAD_FAST[0m(1, hidden_states) 
127: [33mCALL_METHOD[0m(1, 1) 
128: [33mLOAD_CONST[0m(2, -1) 
129: [33mLOAD_FAST[0m(8, bsz) 
130: [33mCALL_METHOD[0m(3, 3) 
131: [33mSTORE_FAST[0m(12, key_states) 
132: [33mLOAD_FAST[0m(0, self) 
133: [33mLOAD_METHOD[0m(4, _shape) 
134: [33mLOAD_FAST[0m(0, self) 
135: [33mLOAD_METHOD[0m(6, v_proj) 
136: [33mLOAD_FAST[0m(1, hidden_states) 
137: [33mCALL_METHOD[0m(1, 1) 
138: [33mLOAD_CONST[0m(2, -1) 
139: [33mLOAD_FAST[0m(8, bsz) 
140: [33mCALL_METHOD[0m(3, 3) 
141: [33mSTORE_FAST[0m(13, value_states) 
142: [33mLOAD_FAST[0m(0, self) 
143: [33mLOAD_ATTR[0m(9, is_decoder) 
144: [32mEXTENDED_ARG[0m(1, 1) 
145: [33mPOP_JUMP_IF_FALSE[0m(300, 300)  -> inst 150
146: [33mLOAD_FAST[0m(12, key_states) 
147: [33mLOAD_FAST[0m(13, value_states) 
148: [33mBUILD_TUPLE[0m(2, 2) 
149: [33mSTORE_FAST[0m(3, past_key_value) 
150: [33mLOAD_FAST[0m(8, bsz) 
151: [33mLOAD_FAST[0m(0, self) 
152: [33mLOAD_ATTR[0m(10, num_heads) 
153: [33mBINARY_MULTIPLY[0m(None, None) 
154: [33mLOAD_CONST[0m(2, -1) 
155: [33mLOAD_FAST[0m(0, self) 
156: [33mLOAD_ATTR[0m(11, head_dim) 
157: [33mBUILD_TUPLE[0m(3, 3) 
158: [33mSTORE_FAST[0m(14, proj_shape) 
159: [33mLOAD_FAST[0m(0, self) 
160: [33mLOAD_METHOD[0m(4, _shape) 
161: [33mLOAD_FAST[0m(11, query_states) 
162: [33mLOAD_FAST[0m(9, tgt_len) 
163: [33mLOAD_FAST[0m(8, bsz) 
164: [33mCALL_METHOD[0m(3, 3) 
165: [33mLOAD_ATTR[0m(12, view) 
166: [33mLOAD_FAST[0m(14, proj_shape) 
167: [33mCALL_FUNCTION_EX[0m(0, 0) 
168: [33mSTORE_FAST[0m(11, query_states) 
169: [33mLOAD_FAST[0m(12, key_states) 
170: [33mLOAD_ATTR[0m(13, reshape) 
171: [33mLOAD_FAST[0m(14, proj_shape) 
172: [33mCALL_FUNCTION_EX[0m(0, 0) 
173: [33mSTORE_FAST[0m(12, key_states) 
174: [33mLOAD_FAST[0m(13, value_states) 
175: [33mLOAD_ATTR[0m(13, reshape) 
176: [33mLOAD_FAST[0m(14, proj_shape) 
177: [33mCALL_FUNCTION_EX[0m(0, 0) 
178: [33mSTORE_FAST[0m(13, value_states) 
179: [33mLOAD_FAST[0m(12, key_states) 
180: [33mLOAD_METHOD[0m(0, size) 
181: [33mLOAD_CONST[0m(5, 1) 
182: [33mCALL_METHOD[0m(1, 1) 
183: [33mSTORE_FAST[0m(15, src_len) 
184: [33mLOAD_GLOBAL[0m(7, torch) 
185: [33mLOAD_METHOD[0m(14, bmm) 
186: [33mLOAD_FAST[0m(11, query_states) 
187: [33mLOAD_FAST[0m(12, key_states) 
188: [33mLOAD_METHOD[0m(15, transpose) 
189: [33mLOAD_CONST[0m(5, 1) 
190: [33mLOAD_CONST[0m(1, 2) 
191: [33mCALL_METHOD[0m(2, 2) 
192: [33mCALL_METHOD[0m(2, 2) 
193: [33mSTORE_FAST[0m(16, attn_weights) 
194: [33mLOAD_FAST[0m(16, attn_weights) 
195: [33mLOAD_METHOD[0m(0, size) 
196: [33mCALL_METHOD[0m(0, 0) 
197: [33mLOAD_FAST[0m(8, bsz) 
198: [33mLOAD_FAST[0m(0, self) 
199: [33mLOAD_ATTR[0m(10, num_heads) 
200: [33mBINARY_MULTIPLY[0m(None, None) 
201: [33mLOAD_FAST[0m(9, tgt_len) 
202: [33mLOAD_FAST[0m(15, src_len) 
203: [33mBUILD_TUPLE[0m(3, 3) 
204: [33mCOMPARE_OP[0m(3, !=) 
205: [32mEXTENDED_ARG[0m(1, 1) 
206: [33mPOP_JUMP_IF_FALSE[0m(450, 450)  -> inst 225
207: [33mLOAD_GLOBAL[0m(16, ValueError) 
208: [33mLOAD_CONST[0m(11, Attention weights should be of size ) 
209: [33mLOAD_FAST[0m(8, bsz) 
210: [33mLOAD_FAST[0m(0, self) 
211: [33mLOAD_ATTR[0m(10, num_heads) 
212: [33mBINARY_MULTIPLY[0m(None, None) 
213: [33mLOAD_FAST[0m(9, tgt_len) 
214: [33mLOAD_FAST[0m(15, src_len) 
215: [33mBUILD_TUPLE[0m(3, 3) 
216: [33mFORMAT_VALUE[0m(0, (None, False)) 
217: [33mLOAD_CONST[0m(8, , but is ) 
218: [33mLOAD_FAST[0m(16, attn_weights) 
219: [33mLOAD_METHOD[0m(0, size) 
220: [33mCALL_METHOD[0m(0, 0) 
221: [33mFORMAT_VALUE[0m(0, (None, False)) 
222: [33mBUILD_STRING[0m(4, 4) 
223: [33mCALL_FUNCTION[0m(1, 1) 
224: [33mRAISE_VARARGS[0m(1, 1) 
225: [33mLOAD_FAST[0m(4, attention_mask) 
226: [33mLOAD_CONST[0m(12, None) 
227: [33mIS_OP[0m(1, 1) 
228: [32mEXTENDED_ARG[0m(2, 2) 
229: [33mPOP_JUMP_IF_FALSE[0m(556, 556)  -> inst 278
230: [33mLOAD_FAST[0m(4, attention_mask) 
231: [33mLOAD_METHOD[0m(0, size) 
232: [33mCALL_METHOD[0m(0, 0) 
233: [33mLOAD_FAST[0m(8, bsz) 
234: [33mLOAD_CONST[0m(5, 1) 
235: [33mLOAD_FAST[0m(9, tgt_len) 
236: [33mLOAD_FAST[0m(15, src_len) 
237: [33mBUILD_TUPLE[0m(4, 4) 
238: [33mCOMPARE_OP[0m(3, !=) 
239: [32mEXTENDED_ARG[0m(2, 2) 
240: [33mPOP_JUMP_IF_FALSE[0m(514, 514)  -> inst 257
241: [33mLOAD_GLOBAL[0m(16, ValueError) 
242: [33mLOAD_CONST[0m(9, Attention mask should be of size ) 
243: [33mLOAD_FAST[0m(8, bsz) 
244: [33mLOAD_CONST[0m(5, 1) 
245: [33mLOAD_FAST[0m(9, tgt_len) 
246: [33mLOAD_FAST[0m(15, src_len) 
247: [33mBUILD_TUPLE[0m(4, 4) 
248: [33mFORMAT_VALUE[0m(0, (None, False)) 
249: [33mLOAD_CONST[0m(8, , but is ) 
250: [33mLOAD_FAST[0m(4, attention_mask) 
251: [33mLOAD_METHOD[0m(0, size) 
252: [33mCALL_METHOD[0m(0, 0) 
253: [33mFORMAT_VALUE[0m(0, (None, False)) 
254: [33mBUILD_STRING[0m(4, 4) 
255: [33mCALL_FUNCTION[0m(1, 1) 
256: [33mRAISE_VARARGS[0m(1, 1) 
257: [33mLOAD_FAST[0m(16, attn_weights) 
258: [33mLOAD_METHOD[0m(12, view) 
259: [33mLOAD_FAST[0m(8, bsz) 
260: [33mLOAD_FAST[0m(0, self) 
261: [33mLOAD_ATTR[0m(10, num_heads) 
262: [33mLOAD_FAST[0m(9, tgt_len) 
263: [33mLOAD_FAST[0m(15, src_len) 
264: [33mCALL_METHOD[0m(4, 4) 
265: [33mLOAD_FAST[0m(4, attention_mask) 
266: [33mBINARY_ADD[0m(None, None) 
267: [33mSTORE_FAST[0m(16, attn_weights) 
268: [33mLOAD_FAST[0m(16, attn_weights) 
269: [33mLOAD_METHOD[0m(12, view) 
270: [33mLOAD_FAST[0m(8, bsz) 
271: [33mLOAD_FAST[0m(0, self) 
272: [33mLOAD_ATTR[0m(10, num_heads) 
273: [33mBINARY_MULTIPLY[0m(None, None) 
274: [33mLOAD_FAST[0m(9, tgt_len) 
275: [33mLOAD_FAST[0m(15, src_len) 
276: [33mCALL_METHOD[0m(3, 3) 
277: [33mSTORE_FAST[0m(16, attn_weights) 
278: [33mLOAD_GLOBAL[0m(17, nn) 
279: [33mLOAD_ATTR[0m(18, functional) 
280: [33mLOAD_ATTR[0m(19, softmax) 
281: [33mLOAD_FAST[0m(16, attn_weights) 
282: [33mLOAD_CONST[0m(2, -1) 
283: [33mLOAD_CONST[0m(0, ('dim',)) 
284: [33mCALL_FUNCTION_KW[0m(2, 2) 
285: [33mSTORE_FAST[0m(16, attn_weights) 
286: [33mLOAD_FAST[0m(5, layer_head_mask) 
287: [33mLOAD_CONST[0m(12, None) 
288: [33mIS_OP[0m(1, 1) 
289: [32mEXTENDED_ARG[0m(2, 2) 
290: [33mPOP_JUMP_IF_FALSE[0m(682, 682)  -> inst 341
291: [33mLOAD_FAST[0m(5, layer_head_mask) 
292: [33mLOAD_METHOD[0m(0, size) 
293: [33mCALL_METHOD[0m(0, 0) 
294: [33mLOAD_FAST[0m(0, self) 
295: [33mLOAD_ATTR[0m(10, num_heads) 
296: [33mBUILD_TUPLE[0m(1, 1) 
297: [33mCOMPARE_OP[0m(3, !=) 
298: [32mEXTENDED_ARG[0m(2, 2) 
299: [33mPOP_JUMP_IF_FALSE[0m(628, 628)  -> inst 314
300: [33mLOAD_GLOBAL[0m(16, ValueError) 
301: [33mLOAD_CONST[0m(6, Head mask for a single layer should be of size ) 
302: [33mLOAD_FAST[0m(0, self) 
303: [33mLOAD_ATTR[0m(10, num_heads) 
304: [33mBUILD_TUPLE[0m(1, 1) 
305: [33mFORMAT_VALUE[0m(0, (None, False)) 
306: [33mLOAD_CONST[0m(8, , but is ) 
307: [33mLOAD_FAST[0m(5, layer_head_mask) 
308: [33mLOAD_METHOD[0m(0, size) 
309: [33mCALL_METHOD[0m(0, 0) 
310: [33mFORMAT_VALUE[0m(0, (None, False)) 
311: [33mBUILD_STRING[0m(4, 4) 
312: [33mCALL_FUNCTION[0m(1, 1) 
313: [33mRAISE_VARARGS[0m(1, 1) 
314: [33mLOAD_FAST[0m(5, layer_head_mask) 
315: [33mLOAD_METHOD[0m(12, view) 
316: [33mLOAD_CONST[0m(5, 1) 
317: [33mLOAD_CONST[0m(2, -1) 
318: [33mLOAD_CONST[0m(5, 1) 
319: [33mLOAD_CONST[0m(5, 1) 
320: [33mCALL_METHOD[0m(4, 4) 
321: [33mLOAD_FAST[0m(16, attn_weights) 
322: [33mLOAD_METHOD[0m(12, view) 
323: [33mLOAD_FAST[0m(8, bsz) 
324: [33mLOAD_FAST[0m(0, self) 
325: [33mLOAD_ATTR[0m(10, num_heads) 
326: [33mLOAD_FAST[0m(9, tgt_len) 
327: [33mLOAD_FAST[0m(15, src_len) 
328: [33mCALL_METHOD[0m(4, 4) 
329: [33mBINARY_MULTIPLY[0m(None, None) 
330: [33mSTORE_FAST[0m(16, attn_weights) 
331: [33mLOAD_FAST[0m(16, attn_weights) 
332: [33mLOAD_METHOD[0m(12, view) 
333: [33mLOAD_FAST[0m(8, bsz) 
334: [33mLOAD_FAST[0m(0, self) 
335: [33mLOAD_ATTR[0m(10, num_heads) 
336: [33mBINARY_MULTIPLY[0m(None, None) 
337: [33mLOAD_FAST[0m(9, tgt_len) 
338: [33mLOAD_FAST[0m(15, src_len) 
339: [33mCALL_METHOD[0m(3, 3) 
340: [33mSTORE_FAST[0m(16, attn_weights) 
341: [33mLOAD_FAST[0m(6, output_attentions) 
342: [32mEXTENDED_ARG[0m(2, 2) 
343: [33mPOP_JUMP_IF_FALSE[0m(728, 728)  -> inst 364
344: [33mLOAD_FAST[0m(16, attn_weights) 
345: [33mLOAD_METHOD[0m(12, view) 
346: [33mLOAD_FAST[0m(8, bsz) 
347: [33mLOAD_FAST[0m(0, self) 
348: [33mLOAD_ATTR[0m(10, num_heads) 
349: [33mLOAD_FAST[0m(9, tgt_len) 
350: [33mLOAD_FAST[0m(15, src_len) 
351: [33mCALL_METHOD[0m(4, 4) 
352: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
353: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
354: [33mLOAD_METHOD[0m(12, view) 
355: [33mLOAD_FAST[0m(8, bsz) 
356: [33mLOAD_FAST[0m(0, self) 
357: [33mLOAD_ATTR[0m(10, num_heads) 
358: [33mBINARY_MULTIPLY[0m(None, None) 
359: [33mLOAD_FAST[0m(9, tgt_len) 
360: [33mLOAD_FAST[0m(15, src_len) 
361: [33mCALL_METHOD[0m(3, 3) 
362: [33mSTORE_FAST[0m(16, attn_weights) 
363: [33mJUMP_FORWARD[0m(4, 732)  -> inst 366
364: [33mLOAD_CONST[0m(12, None) 
365: [33mSTORE_FAST[0m(17, attn_weights_reshaped) 
366: [33mLOAD_GLOBAL[0m(17, nn) 
367: [33mLOAD_ATTR[0m(18, functional) 
368: [33mLOAD_ATTR[0m(20, dropout) 
369: [33mLOAD_FAST[0m(16, attn_weights) 
370: [33mLOAD_FAST[0m(0, self) 
371: [33mLOAD_ATTR[0m(20, dropout) 
372: [33mLOAD_FAST[0m(0, self) 
373: [33mLOAD_ATTR[0m(21, training) 
374: [33mLOAD_CONST[0m(10, ('p', 'training')) 
375: [33mCALL_FUNCTION_KW[0m(3, 3) 
376: [33mSTORE_FAST[0m(18, attn_probs) 
377: [33mLOAD_GLOBAL[0m(7, torch) 
378: [33mLOAD_METHOD[0m(14, bmm) 
379: [33mLOAD_FAST[0m(18, attn_probs) 
380: [33mLOAD_FAST[0m(13, value_states) 
381: [33mCALL_METHOD[0m(2, 2) 
382: [33mSTORE_FAST[0m(19, attn_output) 
383: [33mLOAD_FAST[0m(19, attn_output) 
384: [33mLOAD_METHOD[0m(0, size) 
385: [33mCALL_METHOD[0m(0, 0) 
386: [33mLOAD_FAST[0m(8, bsz) 
387: [33mLOAD_FAST[0m(0, self) 
388: [33mLOAD_ATTR[0m(10, num_heads) 
389: [33mBINARY_MULTIPLY[0m(None, None) 
390: [33mLOAD_FAST[0m(9, tgt_len) 
391: [33mLOAD_FAST[0m(0, self) 
392: [33mLOAD_ATTR[0m(11, head_dim) 
393: [33mBUILD_TUPLE[0m(3, 3) 
394: [33mCOMPARE_OP[0m(3, !=) 
395: [32mEXTENDED_ARG[0m(3, 3) 
396: [33mPOP_JUMP_IF_FALSE[0m(832, 832)  -> inst 416
397: [33mLOAD_GLOBAL[0m(16, ValueError) 
398: [33mLOAD_CONST[0m(3, `attn_output` should be of size ) 
399: [33mLOAD_FAST[0m(8, bsz) 
400: [33mLOAD_FAST[0m(0, self) 
401: [33mLOAD_ATTR[0m(10, num_heads) 
402: [33mBINARY_MULTIPLY[0m(None, None) 
403: [33mLOAD_FAST[0m(9, tgt_len) 
404: [33mLOAD_FAST[0m(0, self) 
405: [33mLOAD_ATTR[0m(11, head_dim) 
406: [33mBUILD_TUPLE[0m(3, 3) 
407: [33mFORMAT_VALUE[0m(0, (None, False)) 
408: [33mLOAD_CONST[0m(8, , but is ) 
409: [33mLOAD_FAST[0m(19, attn_output) 
410: [33mLOAD_METHOD[0m(0, size) 
411: [33mCALL_METHOD[0m(0, 0) 
412: [33mFORMAT_VALUE[0m(0, (None, False)) 
413: [33mBUILD_STRING[0m(4, 4) 
414: [33mCALL_FUNCTION[0m(1, 1) 
415: [33mRAISE_VARARGS[0m(1, 1) 
416: [33mLOAD_FAST[0m(19, attn_output) 
417: [33mLOAD_METHOD[0m(12, view) 
418: [33mLOAD_FAST[0m(8, bsz) 
419: [33mLOAD_FAST[0m(0, self) 
420: [33mLOAD_ATTR[0m(10, num_heads) 
421: [33mLOAD_FAST[0m(9, tgt_len) 
422: [33mLOAD_FAST[0m(0, self) 
423: [33mLOAD_ATTR[0m(11, head_dim) 
424: [33mCALL_METHOD[0m(4, 4) 
425: [33mSTORE_FAST[0m(19, attn_output) 
426: [33mLOAD_FAST[0m(19, attn_output) 
427: [33mLOAD_METHOD[0m(15, transpose) 
428: [33mLOAD_CONST[0m(5, 1) 
429: [33mLOAD_CONST[0m(1, 2) 
430: [33mCALL_METHOD[0m(2, 2) 
431: [33mSTORE_FAST[0m(19, attn_output) 
432: [33mLOAD_FAST[0m(19, attn_output) 
433: [33mLOAD_METHOD[0m(13, reshape) 
434: [33mLOAD_FAST[0m(8, bsz) 
435: [33mLOAD_FAST[0m(9, tgt_len) 
436: [33mLOAD_FAST[0m(0, self) 
437: [33mLOAD_ATTR[0m(22, embed_dim) 
438: [33mCALL_METHOD[0m(3, 3) 
439: [33mSTORE_FAST[0m(19, attn_output) 
440: [33mLOAD_FAST[0m(0, self) 
441: [33mLOAD_METHOD[0m(23, out_proj) 
442: [33mLOAD_FAST[0m(19, attn_output) 
443: [33mCALL_METHOD[0m(1, 1) 
444: [33mSTORE_FAST[0m(19, attn_output) 
445: [33mLOAD_FAST[0m(19, attn_output) 
446: [33mLOAD_FAST[0m(17, attn_weights_reshaped) 
447: [33mLOAD_FAST[0m(3, past_key_value) 
448: [33mBUILD_TUPLE[0m(3, 3) 
449: [32mEXTENDED_ARG[0m(3, 3) 
450: [32mJUMP_ABSOLUTE[0m(930, 930)  -> inst 465
451: [32mLOAD_GLOBAL[0m(25, guard_match) 
452: [32mLOAD_CONST[0m(13, 6) 
453: [32mLOAD_CONST[0m(7, 0) 
454: [32mLOAD_GLOBAL[0m(24, locals) 
455: [32mCALL_FUNCTION[0m(0, 0) 
456: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
457: [32mUNPACK_SEQUENCE[0m(2, 2) 
458: [32mSTORE_FAST[0m(21, __case_idx) 
459: [32mSTORE_FAST[0m(20, __graph_fn) 
460: [32mLOAD_GLOBAL[0m(26, enable_trace) 
461: [32mLOAD_CONST[0m(13, 6) 
462: [32mCALL_FUNCTION[0m(1, 1) 
463: [32mPOP_TOP[0m(None, None) 
464: [32mJUMP_ABSOLUTE[0m(12, 12)  -> inst 6
465: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=6(0x68d81c0)
push tracker due to record
push tracker 6 frame 0x68d81c0 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=6(0x68d81c0)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=6(0x68d81c0)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6] frame_id 6
enable_trace
push tracker 6 frame 0x68d81c0 frame_id 6 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6]
tracing opcode POP_TOP None pc=926 frame=6(0x68d81c0)
process last instruction done
restart: running injected code (f_lasti=926)
tracing opcode JUMP_ABSOLUTE None pc=928 frame=6(0x68d81c0)
process last instruction done
restart: running injected code (f_lasti=928)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=12 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=14 frame=6(0x68d81c0)
process last instruction done
tracing opcode IS_OP None pc=16 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=18 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=20 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=22 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=24 frame=6(0x68d81c0)
process last instruction done
tracing opcode UNPACK_SEQUENCE None pc=26 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=28 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=30 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=32 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=34 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=38 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=40 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=42 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=6(0x68d81c0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=46 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=48 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=50 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode POP_JUMP_IF_FALSE None pc=52 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=104 frame=6(0x68d81c0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=106 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=150 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=152 frame=6(0x68d81c0)
process last instruction done
tracing opcode IS_OP None pc=154 frame=6(0x68d81c0)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=156 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=244 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=246 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=248 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=250 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=252 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=254 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=256 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=258 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=260 frame=6(0x68d81c0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x69b4d80)
push tracker due to record
push tracker 7 frame 0x69b4d80 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x69b4d80)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x69b4d80)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x69b4d80 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x69b4d80)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x69b4d80)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x69b4d80)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x69b4d80)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x69b4d80)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x69b4d80)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x69b4d80)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x69b4d80)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_95 : [#users=1] = placeholder[target=tensor_95]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_95, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_95 : [#users=1] = placeholder[target=tensor_95]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_95, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x69b4d80)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=262 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=264 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=266 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=268 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=270 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=272 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=274 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=276 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=278 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=280 frame=6(0x68d81c0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x698a940)
push tracker due to record
push tracker 7 frame 0x698a940 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x698a940)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x698a940)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x698a940 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x698a940)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x698a940)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x698a940)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x698a940)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x698a940)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x698a940)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x698a940)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x698a940)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_97 : [#users=1] = placeholder[target=tensor_97]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_97, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_97 : [#users=1] = placeholder[target=tensor_97]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_97, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x698a940)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=282 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=284 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=286 frame=6(0x68d81c0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=288 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=300 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=302 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=304 frame=6(0x68d81c0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=306 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=308 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=310 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=312 frame=6(0x68d81c0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=314 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=316 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=318 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=320 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=322 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=324 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=326 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=328 frame=6(0x68d81c0)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend/test/simple.py 7 0x150b33c97cf0 _shape
0: [33mLOAD_FAST[0m(1, tensor) 
1: [33mLOAD_METHOD[0m(0, view) 
2: [33mLOAD_FAST[0m(3, bsz) 
3: [33mLOAD_FAST[0m(2, seq_len) 
4: [33mLOAD_FAST[0m(0, self) 
5: [33mLOAD_ATTR[0m(1, num_heads) 
6: [33mLOAD_FAST[0m(0, self) 
7: [33mLOAD_ATTR[0m(2, head_dim) 
8: [33mCALL_METHOD[0m(4, 4) 
9: [33mLOAD_METHOD[0m(3, transpose) 
10: [33mLOAD_CONST[0m(1, 1) 
11: [33mLOAD_CONST[0m(2, 2) 
12: [33mCALL_METHOD[0m(2, 2) 
13: [33mLOAD_METHOD[0m(4, contiguous) 
14: [33mCALL_METHOD[0m(0, 0) 
15: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, 1), (<class 'int'>, 2), (<class 'NoneType'>, None), (<class 'int'>, 7), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(9, disable_trace) 
1: [32mLOAD_CONST[0m(3, 7) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(42, 42)  -> inst 21
5: [33mLOAD_FAST[0m(1, tensor) 
6: [33mLOAD_METHOD[0m(0, view) 
7: [33mLOAD_FAST[0m(3, bsz) 
8: [33mLOAD_FAST[0m(2, seq_len) 
9: [33mLOAD_FAST[0m(0, self) 
10: [33mLOAD_ATTR[0m(1, num_heads) 
11: [33mLOAD_FAST[0m(0, self) 
12: [33mLOAD_ATTR[0m(2, head_dim) 
13: [33mCALL_METHOD[0m(4, 4) 
14: [33mLOAD_METHOD[0m(3, transpose) 
15: [33mLOAD_CONST[0m(0, 1) 
16: [33mLOAD_CONST[0m(1, 2) 
17: [33mCALL_METHOD[0m(2, 2) 
18: [33mLOAD_METHOD[0m(4, contiguous) 
19: [33mCALL_METHOD[0m(0, 0) 
20: [32mJUMP_ABSOLUTE[0m(70, 70)  -> inst 35
21: [32mLOAD_GLOBAL[0m(6, guard_match) 
22: [32mLOAD_CONST[0m(3, 7) 
23: [32mLOAD_CONST[0m(4, 0) 
24: [32mLOAD_GLOBAL[0m(5, locals) 
25: [32mCALL_FUNCTION[0m(0, 0) 
26: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
27: [32mUNPACK_SEQUENCE[0m(2, 2) 
28: [32mSTORE_FAST[0m(5, __case_idx) 
29: [32mSTORE_FAST[0m(4, __graph_fn) 
30: [32mLOAD_GLOBAL[0m(7, enable_trace) 
31: [32mLOAD_CONST[0m(3, 7) 
32: [32mCALL_FUNCTION[0m(1, 1) 
33: [32mPOP_TOP[0m(None, None) 
34: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
35: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=0 frame=7(0x6886580)
push tracker due to record
push tracker 7 frame 0x6886580 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=7(0x6886580)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=7(0x6886580)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
enable_trace
push tracker 7 frame 0x6886580 frame_id 7 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 6, 7]
tracing opcode POP_TOP None pc=66 frame=7(0x6886580)
process last instruction done
restart: running injected code (f_lasti=66)
tracing opcode JUMP_ABSOLUTE None pc=68 frame=7(0x6886580)
process last instruction done
restart: running injected code (f_lasti=68)
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=10 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_FAST None pc=16 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_FAST None pc=18 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_ATTR None pc=20 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_FAST None pc=22 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_ATTR None pc=24 frame=7(0x6886580)
process last instruction done
tracing opcode CALL_METHOD None pc=26 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_METHOD None pc=28 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_CONST None pc=30 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_CONST None pc=32 frame=7(0x6886580)
process last instruction done
tracing opcode CALL_METHOD None pc=34 frame=7(0x6886580)
process last instruction done
tracing opcode LOAD_METHOD None pc=36 frame=7(0x6886580)
process last instruction done
tracing opcode CALL_METHOD None pc=38 frame=7(0x6886580)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=40 frame=7(0x6886580)
process last instruction done
restart: running injected code (f_lasti=40)
commiting 0 15 [32mRETURN_VALUE[0m(None, None)  40
graph graph():
    %tensor_99 : [#users=1] = placeholder[target=tensor_99]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_99, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
callee is full graph, merge to caller
to merge graph():
    %tensor_99 : [#users=1] = placeholder[target=tensor_99]
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%tensor_99, 1, 2, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=1] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    return (contiguous,)
tracing opcode RETURN_VALUE None pc=70 frame=7(0x6886580)
process last instruction done
restart: running injected code (f_lasti=70)
before pop_tracker [0, 2, 5, 6, 7] frame_id 7
tracing return in /home/drc/frontend/test/simple.py
tracing opcode LOAD_ATTR None pc=330 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=332 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=334 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=336 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=338 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=340 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=342 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=344 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=346 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=348 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=350 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=352 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_FUNCTION_EX None pc=354 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=356 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=358 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=360 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=362 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=364 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=366 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=368 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=370 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=372 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=374 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=376 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=378 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=380 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=382 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=384 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=386 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=388 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=390 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=392 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=394 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=396 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=398 frame=6(0x68d81c0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=400 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=402 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=404 frame=6(0x68d81c0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=406 frame=6(0x68d81c0)
process last instruction done
tracing opcode COMPARE_OP None pc=408 frame=6(0x68d81c0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=410 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=450 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=452 frame=6(0x68d81c0)
process last instruction done
tracing opcode IS_OP None pc=454 frame=6(0x68d81c0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=456 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=460 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=462 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=464 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=466 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=468 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=470 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=472 frame=6(0x68d81c0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=474 frame=6(0x68d81c0)
process last instruction done
tracing opcode COMPARE_OP None pc=476 frame=6(0x68d81c0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=478 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=514 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=516 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=518 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=520 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=522 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=524 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=526 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=528 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=530 frame=6(0x68d81c0)
process last instruction done
tracing opcode BINARY_ADD None pc=532 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=534 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=536 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=538 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=540 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=542 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=544 frame=6(0x68d81c0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=546 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=548 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=550 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=552 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=554 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=556 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=558 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=560 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=562 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=564 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=566 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=568 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=570 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=572 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=574 frame=6(0x68d81c0)
process last instruction done
tracing opcode IS_OP None pc=576 frame=6(0x68d81c0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=578 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=682 frame=6(0x68d81c0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=684 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_CONST None pc=728 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=730 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=732 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=734 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=736 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=738 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=740 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=742 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=744 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=746 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=748 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=750 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=752 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=754 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=756 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=758 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=760 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=762 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=764 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=766 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=768 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=770 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=772 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=774 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=776 frame=6(0x68d81c0)
process last instruction done
tracing opcode BINARY_MULTIPLY None pc=778 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=780 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=782 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=784 frame=6(0x68d81c0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=786 frame=6(0x68d81c0)
process last instruction done
tracing opcode COMPARE_OP None pc=788 frame=6(0x68d81c0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=790 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=832 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=834 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=836 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=838 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=840 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=842 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=844 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=846 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=848 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=850 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=852 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=854 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=856 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_CONST None pc=858 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=860 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=862 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=864 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=866 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=868 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=870 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=872 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_ATTR None pc=874 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=876 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=878 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=880 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_METHOD None pc=882 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=884 frame=6(0x68d81c0)
process last instruction done
tracing opcode CALL_METHOD None pc=886 frame=6(0x68d81c0)
process last instruction done
tracing opcode STORE_FAST None pc=888 frame=6(0x68d81c0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=890 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=892 frame=6(0x68d81c0)
process last instruction done
tracing opcode LOAD_FAST None pc=894 frame=6(0x68d81c0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=896 frame=6(0x68d81c0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=898 frame=6(0x68d81c0)
process last instruction done
restart: running injected code (f_lasti=898)
commiting 0 443 [32mRETURN_VALUE[0m(None, None)  898
graph graph():
    %tensor_94 : [#users=3] = placeholder[target=tensor_94]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_94,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_94,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_94,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_101 : [#users=1] = placeholder[target=tensor_101]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_101), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
callee is full graph, merge to caller
to merge graph():
    %tensor_94 : [#users=3] = placeholder[target=tensor_94]
    %q_proj : [#users=1] = call_module[target=q_proj](args = (%tensor_94,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=k_proj](args = (%tensor_94,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=v_proj](args = (%tensor_94,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %tensor_101 : [#users=1] = placeholder[target=tensor_101]
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_101), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=out_proj](args = (%reshape_2,), kwargs = {})
    return (out_proj,)
tracing opcode RETURN_VALUE None pc=930 frame=6(0x68d81c0)
process last instruction done
restart: running injected code (f_lasti=930)
before pop_tracker [0, 2, 5, 6] frame_id 6
tracing return in /home/drc/frontend/test/simple.py
tracing opcode UNPACK_SEQUENCE None pc=32 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=34 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=36 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=38 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=40 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=42 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=44 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=46 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=48 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=50 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=52 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=54 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_CONST None pc=56 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=58 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=60 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=62 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=64 frame=5(0x698de50)
process last instruction done
tracing opcode BINARY_ADD None pc=66 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=68 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=70 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_METHOD None pc=72 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=74 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_METHOD None pc=76 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=78 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=80 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=82 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=84 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_METHOD None pc=86 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=88 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_METHOD None pc=90 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=92 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_METHOD None pc=94 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_METHOD None pc=96 frame=5(0x698de50)
process last instruction done
run into user defined function
preprocess frame /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py 8 0x6825ce0 forward
0: [33mLOAD_FAST[0m(0, self) 
1: [33mLOAD_METHOD[0m(0, act) 
2: [33mLOAD_FAST[0m(1, input) 
3: [33mCALL_METHOD[0m(1, 1) 
4: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'NoneType'>, None), (<class 'int'>, 8), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(5, disable_trace) 
1: [32mLOAD_CONST[0m(1, 8) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(20, 20)  -> inst 10
5: [33mLOAD_FAST[0m(0, self) 
6: [33mLOAD_METHOD[0m(0, act) 
7: [33mLOAD_FAST[0m(1, input) 
8: [33mCALL_METHOD[0m(1, 1) 
9: [32mJUMP_ABSOLUTE[0m(48, 48)  -> inst 24
10: [32mLOAD_GLOBAL[0m(2, guard_match) 
11: [32mLOAD_CONST[0m(1, 8) 
12: [32mLOAD_CONST[0m(2, 0) 
13: [32mLOAD_GLOBAL[0m(1, locals) 
14: [32mCALL_FUNCTION[0m(0, 0) 
15: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
16: [32mUNPACK_SEQUENCE[0m(2, 2) 
17: [32mSTORE_FAST[0m(3, __case_idx) 
18: [32mSTORE_FAST[0m(2, __graph_fn) 
19: [32mLOAD_GLOBAL[0m(3, enable_trace) 
20: [32mLOAD_CONST[0m(1, 8) 
21: [32mCALL_FUNCTION[0m(1, 1) 
22: [32mPOP_TOP[0m(None, None) 
23: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
24: [32mRETURN_VALUE[0m(None, None) 

tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_GLOBAL None pc=0 frame=8(0x150ab78e7840)
push tracker due to record
push tracker 8 frame 0x150ab78e7840 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
process last instruction done
restart: running injected code (f_lasti=0)
tracing opcode LOAD_CONST None pc=2 frame=8(0x150ab78e7840)
process last instruction done
restart: running injected code (f_lasti=2)
tracing opcode CALL_FUNCTION None pc=4 frame=8(0x150ab78e7840)
process last instruction done
restart: running injected code (f_lasti=4)
disable_trace
before pop_tracker [0, 2, 5, 8] frame_id 8
enable_trace
push tracker 8 frame 0x150ab78e7840 frame_id 8 read_stack False cf_info <class 'NoneType'> all [0, 2, 5, 8]
tracing opcode POP_TOP None pc=44 frame=8(0x150ab78e7840)
process last instruction done
restart: running injected code (f_lasti=44)
tracing opcode JUMP_ABSOLUTE None pc=46 frame=8(0x150ab78e7840)
process last instruction done
restart: running injected code (f_lasti=46)
tracing line in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode LOAD_FAST None pc=10 frame=8(0x150ab78e7840)
process last instruction done
tracing opcode LOAD_METHOD None pc=12 frame=8(0x150ab78e7840)
process last instruction done
tracing opcode LOAD_FAST None pc=14 frame=8(0x150ab78e7840)
process last instruction done
tracing opcode CALL_METHOD None pc=16 frame=8(0x150ab78e7840)
process last instruction done
tracing opcode JUMP_ABSOLUTE None pc=18 frame=8(0x150ab78e7840)
process last instruction done
restart: running injected code (f_lasti=18)
commiting 0 4 [32mRETURN_VALUE[0m(None, None)  18
graph graph():
    %tensor_104 : [#users=1] = placeholder[target=tensor_104]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_104,), kwargs = {})
    return (gelu,)
callee is full graph, merge to caller
to merge graph():
    %tensor_104 : [#users=1] = placeholder[target=tensor_104]
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%tensor_104,), kwargs = {})
    return (gelu,)
tracing opcode RETURN_VALUE None pc=48 frame=8(0x150ab78e7840)
process last instruction done
restart: running injected code (f_lasti=48)
before pop_tracker [0, 2, 5, 8] frame_id 8
tracing return in /home/drc/frontend-venv/lib/python3.9/site-packages/transformers/activations.py
tracing opcode STORE_FAST None pc=98 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=100 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=102 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=104 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=106 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=108 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=110 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=112 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=114 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_CONST None pc=116 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=118 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=120 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=122 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_METHOD None pc=124 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=126 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_METHOD None pc=128 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=130 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=132 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=134 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=136 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=138 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=140 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=142 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=144 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=146 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_CONST None pc=148 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_FUNCTION_KW None pc=150 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=152 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=154 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=156 frame=5(0x698de50)
process last instruction done
tracing opcode BINARY_ADD None pc=158 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=160 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=162 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_METHOD None pc=164 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_FAST None pc=166 frame=5(0x698de50)
process last instruction done
tracing opcode CALL_METHOD None pc=168 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=170 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=172 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=174 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_GLOBAL None pc=176 frame=5(0x698de50)
process last instruction done
tracing opcode LOAD_ATTR None pc=178 frame=5(0x698de50)
process last instruction done
tracing opcode COMPARE_OP None pc=180 frame=5(0x698de50)
process last instruction done
tracing opcode POP_JUMP_IF_FALSE None pc=182 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=248 frame=5(0x698de50)
process last instruction done
tracing opcode BUILD_TUPLE None pc=250 frame=5(0x698de50)
process last instruction done
tracing opcode STORE_FAST None pc=252 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=254 frame=5(0x698de50)
process last instruction done
tracing opcode EXTENDED_ARG None pc=256 frame=5(0x698de50)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=270 frame=5(0x698de50)
process last instruction done
tracing opcode EXTENDED_ARG None pc=272 frame=5(0x698de50)
process last instruction done
restart: running injected code (f_lasti=272)
commiting 0 130 [32mRETURN_VALUE[0m(None, None)  272
graph graph():
    %tensor_92 : [#users=4] = placeholder[target=tensor_92]
    %tensor_93 : [#users=1] = placeholder[target=tensor_93]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_92,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_92,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_92,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_93), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_92, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
callee is full graph, merge to caller
to merge graph():
    %tensor_92 : [#users=4] = placeholder[target=tensor_92]
    %tensor_93 : [#users=1] = placeholder[target=tensor_93]
    %q_proj : [#users=1] = call_module[target=self_attn.q_proj](args = (%tensor_92,), kwargs = {})
    %mul : [#users=1] = call_function[target=operator.mul](args = (%q_proj, 0.125), kwargs = {})
    %k_proj : [#users=1] = call_module[target=self_attn.k_proj](args = (%tensor_92,), kwargs = {})
    %view : [#users=1] = call_function[target=torch.Tensor.view](args = (%k_proj, 1, -1, 12, 64), kwargs = {})
    %transpose : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view, 1, 2), kwargs = {})
    %contiguous : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose,), kwargs = {})
    %v_proj : [#users=1] = call_module[target=self_attn.v_proj](args = (%tensor_92,), kwargs = {})
    %view_1 : [#users=1] = call_function[target=torch.Tensor.view](args = (%v_proj, 1, -1, 12, 64), kwargs = {})
    %transpose_1 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_1, 1, 2), kwargs = {})
    %contiguous_1 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_1,), kwargs = {})
    %view_2 : [#users=1] = call_function[target=torch.Tensor.view](args = (%mul, 1, 2, 12, 64), kwargs = {})
    %transpose_2 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_2, 1, 2), kwargs = {})
    %contiguous_2 : [#users=0] = call_function[target=torch.Tensor.contiguous](args = (%transpose_2,), kwargs = {})
    %view_3 : [#users=1] = call_method[target=view](args = (12, -1, 64), kwargs = {})
    %reshape : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %reshape_1 : [#users=1] = call_method[target=reshape](args = (12, -1, 64), kwargs = {})
    %transpose_3 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%reshape, 1, 2), kwargs = {})
    %bmm : [#users=1] = call_function[target=torch.bmm](args = (%view_3, %transpose_3), kwargs = {})
    %view_4 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm, 1, 12, 2, 2), kwargs = {})
    %add : [#users=1] = call_function[target=operator.add](args = (%view_4, %tensor_93), kwargs = {})
    %view_5 : [#users=1] = call_function[target=torch.Tensor.view](args = (%add, 12, 2, 2), kwargs = {})
    %softmax : [#users=1] = call_function[target=torch.nn.functional.softmax](args = (%view_5,), kwargs = {dim: -1})
    %dropout : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%softmax,), kwargs = {p: 0.1, training: True})
    %bmm_1 : [#users=1] = call_function[target=torch.bmm](args = (%dropout, %reshape_1), kwargs = {})
    %view_6 : [#users=1] = call_function[target=torch.Tensor.view](args = (%bmm_1, 1, 12, 2, 64), kwargs = {})
    %transpose_4 : [#users=1] = call_function[target=torch.Tensor.transpose](args = (%view_6, 1, 2), kwargs = {})
    %reshape_2 : [#users=1] = call_function[target=torch.Tensor.reshape](args = (%transpose_4, 1, 2, 768), kwargs = {})
    %out_proj : [#users=1] = call_module[target=self_attn.out_proj](args = (%reshape_2,), kwargs = {})
    %dropout_1 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%out_proj,), kwargs = {p: 0.1, training: True})
    %add_1 : [#users=1] = call_function[target=operator.add](args = (%tensor_92, %dropout_1), kwargs = {})
    %self_attn_layer_norm : [#users=2] = call_module[target=self_attn_layer_norm](args = (%add_1,), kwargs = {})
    %fc1 : [#users=1] = call_module[target=fc1](args = (%self_attn_layer_norm,), kwargs = {})
    %gelu : [#users=1] = call_function[target=torch._C._nn.gelu](args = (%fc1,), kwargs = {})
    %dropout_2 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%gelu,), kwargs = {p: 0.1, training: True})
    %fc2 : [#users=1] = call_module[target=fc2](args = (%dropout_2,), kwargs = {})
    %dropout_3 : [#users=1] = call_function[target=torch.nn.functional.dropout](args = (%fc2,), kwargs = {p: 0.1, training: True})
    %add_2 : [#users=1] = call_function[target=operator.add](args = (%self_attn_layer_norm, %dropout_3), kwargs = {})
    %final_layer_norm : [#users=1] = call_module[target=final_layer_norm](args = (%add_2,), kwargs = {})
    return (final_layer_norm,)
tracing opcode RETURN_VALUE None pc=304 frame=5(0x698de50)
process last instruction done
restart: running injected code (f_lasti=304)
before pop_tracker [0, 2, 5] frame_id 5
tracing return in /home/drc/frontend/test/simple.py
tracing opcode STORE_FAST None pc=552 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=554 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=556 frame=2(0x688b4d0)
process last instruction done
tracing opcode BINARY_SUBSCR None pc=558 frame=2(0x688b4d0)
process last instruction done
tracing opcode STORE_FAST None pc=560 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_DEREF None pc=562 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=564 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode FOR_ITER None pc=386 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=586 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=588 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_FAST None pc=602 frame=2(0x688b4d0)
process last instruction done
tracing opcode EXTENDED_ARG None pc=604 frame=2(0x688b4d0)
process last instruction done
tracing line in /home/drc/frontend/test/simple.py
tracing opcode LOAD_GLOBAL None pc=608 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=610 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_CONST None pc=612 frame=2(0x688b4d0)
process last instruction done
tracing opcode MAKE_FUNCTION None pc=614 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=616 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=618 frame=2(0x688b4d0)
process last instruction done
tracing opcode LOAD_FAST None pc=620 frame=2(0x688b4d0)
process last instruction done
tracing opcode BUILD_TUPLE None pc=622 frame=2(0x688b4d0)
process last instruction done
tracing opcode GET_ITER None pc=624 frame=2(0x688b4d0)
process last instruction done
tracing opcode CALL_FUNCTION None pc=626 frame=2(0x688b4d0)
process last instruction done
run into user defined function
tracing opcode CALL_FUNCTION None pc=628 frame=2(0x688b4d0)
preprocess frame /home/drc/frontend/frontend/guard_tracker.py 9 0x150b31a65dd0 record
0: [33mLOAD_GLOBAL[0m(0, id) 
1: [33mLOAD_FAST[0m(0, frame) 
2: [33mCALL_FUNCTION[0m(1, 1) 
3: [33mLOAD_GLOBAL[0m(0, id) 
4: [33mLOAD_GLOBAL[0m(1, trackers) 
5: [33mLOAD_CONST[0m(1, -1) 
6: [33mBINARY_SUBSCR[0m(None, None) 
7: [33mLOAD_ATTR[0m(2, frame) 
8: [33mCALL_FUNCTION[0m(1, 1) 
9: [33mCOMPARE_OP[0m(3, !=) 
10: [33mPOP_JUMP_IF_FALSE[0m(72, 72)  -> inst 36
11: [33mLOAD_GLOBAL[0m(1, trackers) 
12: [33mLOAD_CONST[0m(1, -1) 
13: [33mBINARY_SUBSCR[0m(None, None) 
14: [33mLOAD_ATTR[0m(3, code) 
15: [33mLOAD_METHOD[0m(4, get_inst) 
16: [33mLOAD_GLOBAL[0m(1, trackers) 
17: [33mLOAD_CONST[0m(1, -1) 
18: [33mBINARY_SUBSCR[0m(None, None) 
19: [33mLOAD_ATTR[0m(2, frame) 
20: [33mLOAD_ATTR[0m(5, f_lasti) 
21: [33mCALL_METHOD[0m(1, 1) 
22: [33mSTORE_FAST[0m(2, last_inst) 
23: [33mLOAD_GLOBAL[0m(6, is_call_bytecode) 
24: [33mLOAD_FAST[0m(2, last_inst) 
25: [33mCALL_FUNCTION[0m(1, 1) 
26: [33mPOP_JUMP_IF_FALSE[0m(72, 72)  -> inst 36
27: [33mLOAD_GLOBAL[0m(7, print) 
28: [33mLOAD_CONST[0m(2, push tracker due to record) 
29: [33mCALL_FUNCTION[0m(1, 1) 
30: [33mPOP_TOP[0m(None, None) 
31: [33mLOAD_GLOBAL[0m(8, push_tracker) 
32: [33mLOAD_FAST[0m(0, frame) 
33: [33mLOAD_FAST[0m(1, frame_id) 
34: [33mCALL_FUNCTION[0m(2, 2) 
35: [33mPOP_TOP[0m(None, None) 
36: [33mLOAD_GLOBAL[0m(1, trackers) 
37: [33mLOAD_CONST[0m(1, -1) 
38: [33mBINARY_SUBSCR[0m(None, None) 
39: [33mLOAD_METHOD[0m(9, record) 
40: [33mLOAD_FAST[0m(0, frame) 
41: [33mLOAD_FAST[0m(1, frame_id) 
42: [33mCALL_METHOD[0m(2, 2) 
43: [33mPOP_TOP[0m(None, None) 
44: [33mLOAD_CONST[0m(0, None) 
45: [33mRETURN_VALUE[0m(None, None) 

const_list [(<class 'int'>, -1), (<class 'str'>, 'push tracker due to record'), (<class 'NoneType'>, None), (<class 'int'>, 9), (<class 'int'>, 0)]
guarded code
0: [32mLOAD_GLOBAL[0m(14, disable_trace) 
1: [32mLOAD_CONST[0m(3, 9) 
2: [32mCALL_FUNCTION[0m(1, 1) 
3: [32mPOP_TOP[0m(None, None) 
4: [32mJUMP_ABSOLUTE[0m(102, 102)  -> inst 51
5: [33mLOAD_GLOBAL[0m(0, id) 
6: [33mLOAD_FAST[0m(0, frame) 
7: [33mCALL_FUNCTION[0m(1, 1) 
8: [33mLOAD_GLOBAL[0m(0, id) 
9: [33mLOAD_GLOBAL[0m(1, trackers) 
10: [33mLOAD_CONST[0m(0, -1) 
11: [33mBINARY_SUBSCR[0m(None, None) 
12: [33mLOAD_ATTR[0m(2, frame) 
13: [33mCALL_FUNCTION[0m(1, 1) 
14: [33mCOMPARE_OP[0m(3, !=) 
15: [33mPOP_JUMP_IF_FALSE[0m(82, 82)  -> inst 41
16: [33mLOAD_GLOBAL[0m(1, trackers) 
17: [33mLOAD_CONST[0m(0, -1) 
18: [33mBINARY_SUBSCR[0m(None, None) 
19: [33mLOAD_ATTR[0m(3, code) 
20: [33mLOAD_METHOD[0m(4, get_inst) 
21: [33mLOAD_GLOBAL[0m(1, trackers) 
22: [33mLOAD_CONST[0m(0, -1) 
23: [33mBINARY_SUBSCR[0m(None, None) 
24: [33mLOAD_ATTR[0m(2, frame) 
25: [33mLOAD_ATTR[0m(5, f_lasti) 
26: [33mCALL_METHOD[0m(1, 1) 
27: [33mSTORE_FAST[0m(2, last_inst) 
28: [33mLOAD_GLOBAL[0m(6, is_call_bytecode) 
29: [33mLOAD_FAST[0m(2, last_inst) 
30: [33mCALL_FUNCTION[0m(1, 1) 
31: [33mPOP_JUMP_IF_FALSE[0m(82, 82)  -> inst 41
32: [33mLOAD_GLOBAL[0m(15, print) 
33: [33mLOAD_CONST[0m(1, push tracker due to record) 
34: [33mCALL_FUNCTION[0m(1, 1) 
35: [33mPOP_TOP[0m(None, None) 
36: [33mLOAD_GLOBAL[0m(8, push_tracker) 
37: [33mLOAD_FAST[0m(0, frame) 
38: [33mLOAD_FAST[0m(1, frame_id) 
39: [33mCALL_FUNCTION[0m(2, 2) 
40: [33mPOP_TOP[0m(None, None) 
41: [33mLOAD_GLOBAL[0m(1, trackers) 
42: [33mLOAD_CONST[0m(0, -1) 
43: [33mBINARY_SUBSCR[0m(None, None) 
44: [33mLOAD_METHOD[0m(9, record) 
45: [33mLOAD_FAST[0m(0, frame) 
46: [33mLOAD_FAST[0m(1, frame_id) 
47: [33mCALL_METHOD[0m(2, 2) 
48: [33mPOP_TOP[0m(None, None) 
49: [33mLOAD_CONST[0m(2, None) 
50: [32mJUMP_ABSOLUTE[0m(130, 130)  -> inst 65
51: [32mLOAD_GLOBAL[0m(11, guard_match) 
52: [32mLOAD_CONST[0m(3, 9) 
53: [32mLOAD_CONST[0m(4, 0) 
54: [32mLOAD_GLOBAL[0m(10, locals) 
55: [32mCALL_FUNCTION[0m(0, 0) 
56: [32mCALL_FUNCTION[0m(3, 3) [90m# call guard_match(frame_id, callsite_id, locals) [0m
57: [32mUNPACK_SEQUENCE[0m(2, 2) 
58: [32mSTORE_FAST[0m(4, __case_idx) 
59: [32mSTORE_FAST[0m(3, __graph_fn) 
60: [32mLOAD_GLOBAL[0m(12, enable_trace) 
61: [32mLOAD_CONST[0m(3, 9) 
62: [32mCALL_FUNCTION[0m(1, 1) 
63: [32mPOP_TOP[0m(None, None) 
64: [32mJUMP_ABSOLUTE[0m(10, 10)  -> inst 5
65: [32mRETURN_VALUE[0m(None, None) 

disable_trace
before pop_tracker [0, 2] frame_id 9
exception in disable_trace:  <class 'AssertionError'>
Traceback (most recent call last):
  File "/home/drc/frontend/frontend/tracer.py", line 59, in disable_trace
    pop_tracker(frame_id)
  File "/home/drc/frontend/frontend/guard_tracker.py", line 1657, in pop_tracker
    assert to_pop.frame_id == frame_id
AssertionError

exception in trace_func:  <class 'AssertionError'>
Traceback (most recent call last):
  File "/home/drc/frontend/frontend/tracer.py", line 25, in trace_func
    record(frame, frame_id)
  File "/home/drc/frontend/frontend/guard_tracker.py", line 1661, in record
    def record(frame: FrameType, frame_id: int) -> None:
  File "/home/drc/frontend/frontend/tracer.py", line 64, in disable_trace
    raise e
  File "/home/drc/frontend/frontend/tracer.py", line 59, in disable_trace
    pop_tracker(frame_id)
  File "/home/drc/frontend/frontend/guard_tracker.py", line 1657, in pop_tracker
    assert to_pop.frame_id == frame_id
AssertionError

exception in _fn:  <class 'AssertionError'>
restoring frame, prior = None
